/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 338.0, "minX": 0.0, "maxY": 13055.0, "series": [{"data": [[0.0, 4540.0], [0.1, 4540.0], [0.2, 4582.0], [0.3, 4582.0], [0.4, 4912.0], [0.5, 4912.0], [0.6, 4917.0], [0.7, 4917.0], [0.8, 5059.0], [0.9, 5059.0], [1.0, 5130.0], [1.1, 5130.0], [1.2, 5166.0], [1.3, 5166.0], [1.4, 5245.0], [1.5, 5245.0], [1.6, 5249.0], [1.7, 5249.0], [1.8, 5308.0], [1.9, 5308.0], [2.0, 5317.0], [2.1, 5317.0], [2.2, 5340.0], [2.3, 5340.0], [2.4, 5358.0], [2.5, 5358.0], [2.6, 5360.0], [2.7, 5360.0], [2.8, 5378.0], [2.9, 5378.0], [3.0, 5381.0], [3.1, 5381.0], [3.2, 5401.0], [3.3, 5401.0], [3.4, 5410.0], [3.5, 5410.0], [3.6, 5417.0], [3.7, 5417.0], [3.8, 5427.0], [3.9, 5427.0], [4.0, 5431.0], [4.1, 5431.0], [4.2, 5431.0], [4.3, 5432.0], [4.4, 5432.0], [4.5, 5435.0], [4.6, 5435.0], [4.7, 5439.0], [4.8, 5439.0], [4.9, 5440.0], [5.0, 5440.0], [5.1, 5444.0], [5.2, 5444.0], [5.3, 5452.0], [5.4, 5452.0], [5.5, 5459.0], [5.6, 5459.0], [5.7, 5480.0], [5.8, 5480.0], [5.9, 5490.0], [6.0, 5490.0], [6.1, 5535.0], [6.2, 5535.0], [6.3, 5576.0], [6.4, 5576.0], [6.5, 5584.0], [6.6, 5584.0], [6.7, 5589.0], [6.8, 5589.0], [6.9, 5596.0], [7.0, 5596.0], [7.1, 5641.0], [7.2, 5641.0], [7.3, 5645.0], [7.4, 5645.0], [7.5, 5693.0], [7.6, 5693.0], [7.7, 5702.0], [7.8, 5702.0], [7.9, 5709.0], [8.0, 5709.0], [8.1, 5711.0], [8.2, 5711.0], [8.3, 5722.0], [8.4, 5726.0], [8.5, 5726.0], [8.6, 5728.0], [8.7, 5728.0], [8.8, 5728.0], [8.9, 5728.0], [9.0, 5729.0], [9.1, 5729.0], [9.2, 5729.0], [9.3, 5729.0], [9.4, 5730.0], [9.5, 5730.0], [9.6, 5747.0], [9.7, 5747.0], [9.8, 5747.0], [9.9, 5747.0], [10.0, 5750.0], [10.1, 5750.0], [10.2, 5751.0], [10.3, 5751.0], [10.4, 5753.0], [10.5, 5753.0], [10.6, 5759.0], [10.7, 5759.0], [10.8, 5760.0], [10.9, 5760.0], [11.0, 5767.0], [11.1, 5767.0], [11.2, 5768.0], [11.3, 5768.0], [11.4, 5770.0], [11.5, 5770.0], [11.6, 5770.0], [11.7, 5770.0], [11.8, 5771.0], [11.9, 5771.0], [12.0, 5778.0], [12.1, 5778.0], [12.2, 5843.0], [12.3, 5843.0], [12.4, 5872.0], [12.5, 5878.0], [12.6, 5878.0], [12.7, 5881.0], [12.8, 5881.0], [12.9, 5913.0], [13.0, 5913.0], [13.1, 5937.0], [13.2, 5937.0], [13.3, 5944.0], [13.4, 5944.0], [13.5, 5954.0], [13.6, 5954.0], [13.7, 5955.0], [13.8, 5955.0], [13.9, 5968.0], [14.0, 5968.0], [14.1, 5968.0], [14.2, 5968.0], [14.3, 5972.0], [14.4, 5972.0], [14.5, 5986.0], [14.6, 5986.0], [14.7, 5989.0], [14.8, 5989.0], [14.9, 5991.0], [15.0, 5991.0], [15.1, 5992.0], [15.2, 5992.0], [15.3, 5996.0], [15.4, 5996.0], [15.5, 5999.0], [15.6, 5999.0], [15.7, 6006.0], [15.8, 6006.0], [15.9, 6028.0], [16.0, 6028.0], [16.1, 6030.0], [16.2, 6030.0], [16.3, 6031.0], [16.4, 6031.0], [16.5, 6034.0], [16.6, 6034.0], [16.7, 6037.0], [16.8, 6045.0], [16.9, 6045.0], [17.0, 6050.0], [17.1, 6050.0], [17.2, 6053.0], [17.3, 6053.0], [17.4, 6054.0], [17.5, 6054.0], [17.6, 6054.0], [17.7, 6054.0], [17.8, 6056.0], [17.9, 6056.0], [18.0, 6056.0], [18.1, 6056.0], [18.2, 6059.0], [18.3, 6059.0], [18.4, 6065.0], [18.5, 6065.0], [18.6, 6065.0], [18.7, 6065.0], [18.8, 6078.0], [18.9, 6078.0], [19.0, 6088.0], [19.1, 6088.0], [19.2, 6088.0], [19.3, 6088.0], [19.4, 6090.0], [19.5, 6090.0], [19.6, 6093.0], [19.7, 6093.0], [19.8, 6099.0], [19.9, 6099.0], [20.0, 6105.0], [20.1, 6105.0], [20.2, 6107.0], [20.3, 6107.0], [20.4, 6116.0], [20.5, 6116.0], [20.6, 6121.0], [20.7, 6121.0], [20.8, 6121.0], [20.9, 6129.0], [21.0, 6129.0], [21.1, 6130.0], [21.2, 6130.0], [21.3, 6130.0], [21.4, 6130.0], [21.5, 6140.0], [21.6, 6140.0], [21.7, 6141.0], [21.8, 6141.0], [21.9, 6145.0], [22.0, 6145.0], [22.1, 6146.0], [22.2, 6146.0], [22.3, 6149.0], [22.4, 6149.0], [22.5, 6150.0], [22.6, 6150.0], [22.7, 6156.0], [22.8, 6156.0], [22.9, 6165.0], [23.0, 6165.0], [23.1, 6169.0], [23.2, 6169.0], [23.3, 6171.0], [23.4, 6171.0], [23.5, 6173.0], [23.6, 6173.0], [23.7, 6175.0], [23.8, 6175.0], [23.9, 6175.0], [24.0, 6175.0], [24.1, 6176.0], [24.2, 6176.0], [24.3, 6177.0], [24.4, 6177.0], [24.5, 6178.0], [24.6, 6178.0], [24.7, 6183.0], [24.8, 6183.0], [24.9, 6184.0], [25.0, 6191.0], [25.1, 6191.0], [25.2, 6197.0], [25.3, 6197.0], [25.4, 6204.0], [25.5, 6204.0], [25.6, 6212.0], [25.7, 6212.0], [25.8, 6215.0], [25.9, 6215.0], [26.0, 6219.0], [26.1, 6219.0], [26.2, 6220.0], [26.3, 6220.0], [26.4, 6220.0], [26.5, 6220.0], [26.6, 6223.0], [26.7, 6223.0], [26.8, 6223.0], [26.9, 6223.0], [27.0, 6224.0], [27.1, 6224.0], [27.2, 6230.0], [27.3, 6230.0], [27.4, 6230.0], [27.5, 6230.0], [27.6, 6238.0], [27.7, 6238.0], [27.8, 6238.0], [27.9, 6238.0], [28.0, 6241.0], [28.1, 6241.0], [28.2, 6243.0], [28.3, 6243.0], [28.4, 6247.0], [28.5, 6247.0], [28.6, 6247.0], [28.7, 6247.0], [28.8, 6251.0], [28.9, 6251.0], [29.0, 6253.0], [29.1, 6253.0], [29.2, 6254.0], [29.3, 6256.0], [29.4, 6256.0], [29.5, 6257.0], [29.6, 6257.0], [29.7, 6258.0], [29.8, 6258.0], [29.9, 6259.0], [30.0, 6259.0], [30.1, 6259.0], [30.2, 6259.0], [30.3, 6260.0], [30.4, 6260.0], [30.5, 6273.0], [30.6, 6273.0], [30.7, 6281.0], [30.8, 6281.0], [30.9, 6284.0], [31.0, 6284.0], [31.1, 6285.0], [31.2, 6285.0], [31.3, 6285.0], [31.4, 6285.0], [31.5, 6286.0], [31.6, 6286.0], [31.7, 6287.0], [31.8, 6287.0], [31.9, 6290.0], [32.0, 6290.0], [32.1, 6292.0], [32.2, 6292.0], [32.3, 6299.0], [32.4, 6299.0], [32.5, 6303.0], [32.6, 6303.0], [32.7, 6303.0], [32.8, 6303.0], [32.9, 6305.0], [33.0, 6305.0], [33.1, 6305.0], [33.2, 6305.0], [33.3, 6309.0], [33.4, 6311.0], [33.5, 6311.0], [33.6, 6312.0], [33.7, 6312.0], [33.8, 6313.0], [33.9, 6313.0], [34.0, 6316.0], [34.1, 6316.0], [34.2, 6317.0], [34.3, 6317.0], [34.4, 6318.0], [34.5, 6318.0], [34.6, 6319.0], [34.7, 6319.0], [34.8, 6320.0], [34.9, 6320.0], [35.0, 6321.0], [35.1, 6321.0], [35.2, 6323.0], [35.3, 6323.0], [35.4, 6325.0], [35.5, 6325.0], [35.6, 6325.0], [35.7, 6325.0], [35.8, 6326.0], [35.9, 6326.0], [36.0, 6326.0], [36.1, 6326.0], [36.2, 6327.0], [36.3, 6327.0], [36.4, 6333.0], [36.5, 6333.0], [36.6, 6336.0], [36.7, 6336.0], [36.8, 6338.0], [36.9, 6338.0], [37.0, 6341.0], [37.1, 6341.0], [37.2, 6343.0], [37.3, 6343.0], [37.4, 6347.0], [37.5, 6349.0], [37.6, 6349.0], [37.7, 6350.0], [37.8, 6350.0], [37.9, 6353.0], [38.0, 6353.0], [38.1, 6354.0], [38.2, 6354.0], [38.3, 6354.0], [38.4, 6354.0], [38.5, 6355.0], [38.6, 6355.0], [38.7, 6356.0], [38.8, 6356.0], [38.9, 6358.0], [39.0, 6358.0], [39.1, 6359.0], [39.2, 6359.0], [39.3, 6361.0], [39.4, 6361.0], [39.5, 6362.0], [39.6, 6362.0], [39.7, 6363.0], [39.8, 6363.0], [39.9, 6368.0], [40.0, 6368.0], [40.1, 6375.0], [40.2, 6375.0], [40.3, 6376.0], [40.4, 6376.0], [40.5, 6376.0], [40.6, 6376.0], [40.7, 6380.0], [40.8, 6380.0], [40.9, 6380.0], [41.0, 6380.0], [41.1, 6381.0], [41.2, 6381.0], [41.3, 6383.0], [41.4, 6383.0], [41.5, 6383.0], [41.6, 6383.0], [41.7, 6384.0], [41.8, 6385.0], [41.9, 6385.0], [42.0, 6394.0], [42.1, 6394.0], [42.2, 6399.0], [42.3, 6399.0], [42.4, 6407.0], [42.5, 6407.0], [42.6, 6408.0], [42.7, 6408.0], [42.8, 6423.0], [42.9, 6423.0], [43.0, 6440.0], [43.1, 6440.0], [43.2, 6443.0], [43.3, 6443.0], [43.4, 6443.0], [43.5, 6443.0], [43.6, 6445.0], [43.7, 6445.0], [43.8, 6450.0], [43.9, 6450.0], [44.0, 6450.0], [44.1, 6450.0], [44.2, 6452.0], [44.3, 6452.0], [44.4, 6455.0], [44.5, 6455.0], [44.6, 6455.0], [44.7, 6455.0], [44.8, 6458.0], [44.9, 6458.0], [45.0, 6462.0], [45.1, 6462.0], [45.2, 6462.0], [45.3, 6462.0], [45.4, 6466.0], [45.5, 6466.0], [45.6, 6468.0], [45.7, 6468.0], [45.8, 6468.0], [45.9, 6473.0], [46.0, 6473.0], [46.1, 6485.0], [46.2, 6485.0], [46.3, 6486.0], [46.4, 6486.0], [46.5, 6489.0], [46.6, 6489.0], [46.7, 6491.0], [46.8, 6491.0], [46.9, 6491.0], [47.0, 6491.0], [47.1, 6495.0], [47.2, 6495.0], [47.3, 6498.0], [47.4, 6498.0], [47.5, 6503.0], [47.6, 6503.0], [47.7, 6506.0], [47.8, 6506.0], [47.9, 6513.0], [48.0, 6513.0], [48.1, 6516.0], [48.2, 6516.0], [48.3, 6519.0], [48.4, 6519.0], [48.5, 6526.0], [48.6, 6526.0], [48.7, 6528.0], [48.8, 6528.0], [48.9, 6532.0], [49.0, 6532.0], [49.1, 6533.0], [49.2, 6533.0], [49.3, 6534.0], [49.4, 6534.0], [49.5, 6543.0], [49.6, 6543.0], [49.7, 6548.0], [49.8, 6548.0], [49.9, 6548.0], [50.0, 6550.0], [50.1, 6550.0], [50.2, 6553.0], [50.3, 6553.0], [50.4, 6555.0], [50.5, 6555.0], [50.6, 6557.0], [50.7, 6557.0], [50.8, 6558.0], [50.9, 6558.0], [51.0, 6560.0], [51.1, 6560.0], [51.2, 6562.0], [51.3, 6562.0], [51.4, 6565.0], [51.5, 6565.0], [51.6, 6565.0], [51.7, 6565.0], [51.8, 6565.0], [51.9, 6565.0], [52.0, 6569.0], [52.1, 6569.0], [52.2, 6570.0], [52.3, 6570.0], [52.4, 6573.0], [52.5, 6573.0], [52.6, 6575.0], [52.7, 6575.0], [52.8, 6575.0], [52.9, 6575.0], [53.0, 6576.0], [53.1, 6576.0], [53.2, 6577.0], [53.3, 6577.0], [53.4, 6580.0], [53.5, 6580.0], [53.6, 6582.0], [53.7, 6582.0], [53.8, 6586.0], [53.9, 6586.0], [54.0, 6588.0], [54.1, 6588.0], [54.2, 6597.0], [54.3, 6598.0], [54.4, 6598.0], [54.5, 6599.0], [54.6, 6599.0], [54.7, 6609.0], [54.8, 6609.0], [54.9, 6611.0], [55.0, 6611.0], [55.1, 6614.0], [55.2, 6614.0], [55.3, 6618.0], [55.4, 6618.0], [55.5, 6628.0], [55.6, 6628.0], [55.7, 6635.0], [55.8, 6635.0], [55.9, 6640.0], [56.0, 6640.0], [56.1, 6640.0], [56.2, 6640.0], [56.3, 6642.0], [56.4, 6642.0], [56.5, 6642.0], [56.6, 6642.0], [56.7, 6650.0], [56.8, 6650.0], [56.9, 6656.0], [57.0, 6656.0], [57.1, 6657.0], [57.2, 6657.0], [57.3, 6657.0], [57.4, 6657.0], [57.5, 6657.0], [57.6, 6657.0], [57.7, 6664.0], [57.8, 6664.0], [57.9, 6666.0], [58.0, 6666.0], [58.1, 6672.0], [58.2, 6672.0], [58.3, 6683.0], [58.4, 6697.0], [58.5, 6697.0], [58.6, 6709.0], [58.7, 6709.0], [58.8, 6716.0], [58.9, 6716.0], [59.0, 6716.0], [59.1, 6716.0], [59.2, 6716.0], [59.3, 6716.0], [59.4, 6729.0], [59.5, 6729.0], [59.6, 6736.0], [59.7, 6736.0], [59.8, 6743.0], [59.9, 6743.0], [60.0, 6744.0], [60.1, 6744.0], [60.2, 6765.0], [60.3, 6765.0], [60.4, 6783.0], [60.5, 6783.0], [60.6, 6788.0], [60.7, 6788.0], [60.8, 6832.0], [60.9, 6832.0], [61.0, 6856.0], [61.1, 6856.0], [61.2, 6886.0], [61.3, 6886.0], [61.4, 6946.0], [61.5, 6946.0], [61.6, 6967.0], [61.7, 6967.0], [61.8, 7016.0], [61.9, 7016.0], [62.0, 7098.0], [62.1, 7098.0], [62.2, 7126.0], [62.3, 7126.0], [62.4, 7127.0], [62.5, 7151.0], [62.6, 7151.0], [62.7, 7158.0], [62.8, 7158.0], [62.9, 7182.0], [63.0, 7182.0], [63.1, 7224.0], [63.2, 7224.0], [63.3, 7345.0], [63.4, 7345.0], [63.5, 7349.0], [63.6, 7349.0], [63.7, 7362.0], [63.8, 7362.0], [63.9, 7365.0], [64.0, 7365.0], [64.1, 7388.0], [64.2, 7388.0], [64.3, 7451.0], [64.4, 7451.0], [64.5, 7463.0], [64.6, 7463.0], [64.7, 7720.0], [64.8, 7720.0], [64.9, 7722.0], [65.0, 7722.0], [65.1, 7723.0], [65.2, 7723.0], [65.3, 7770.0], [65.4, 7770.0], [65.5, 7814.0], [65.6, 7814.0], [65.7, 8037.0], [65.8, 8037.0], [65.9, 8056.0], [66.0, 8056.0], [66.1, 8077.0], [66.2, 8077.0], [66.3, 8082.0], [66.4, 8082.0], [66.5, 8082.0], [66.6, 8082.0], [66.7, 8134.0], [66.8, 8139.0], [66.9, 8139.0], [67.0, 8143.0], [67.1, 8143.0], [67.2, 8156.0], [67.3, 8156.0], [67.4, 8199.0], [67.5, 8199.0], [67.6, 8236.0], [67.7, 8236.0], [67.8, 8267.0], [67.9, 8267.0], [68.0, 8296.0], [68.1, 8296.0], [68.2, 8297.0], [68.3, 8297.0], [68.4, 8373.0], [68.5, 8373.0], [68.6, 8376.0], [68.7, 8376.0], [68.8, 8377.0], [68.9, 8377.0], [69.0, 8383.0], [69.1, 8383.0], [69.2, 8384.0], [69.3, 8384.0], [69.4, 8385.0], [69.5, 8385.0], [69.6, 8392.0], [69.7, 8392.0], [69.8, 8401.0], [69.9, 8401.0], [70.0, 8440.0], [70.1, 8440.0], [70.2, 8446.0], [70.3, 8446.0], [70.4, 8450.0], [70.5, 8450.0], [70.6, 8477.0], [70.7, 8477.0], [70.8, 8509.0], [70.9, 8583.0], [71.0, 8583.0], [71.1, 8596.0], [71.2, 8596.0], [71.3, 8597.0], [71.4, 8597.0], [71.5, 8601.0], [71.6, 8601.0], [71.7, 8671.0], [71.8, 8671.0], [71.9, 8687.0], [72.0, 8687.0], [72.1, 8690.0], [72.2, 8690.0], [72.3, 8690.0], [72.4, 8690.0], [72.5, 8692.0], [72.6, 8692.0], [72.7, 8698.0], [72.8, 8698.0], [72.9, 8704.0], [73.0, 8704.0], [73.1, 8718.0], [73.2, 8718.0], [73.3, 8746.0], [73.4, 8746.0], [73.5, 8753.0], [73.6, 8753.0], [73.7, 8769.0], [73.8, 8769.0], [73.9, 8787.0], [74.0, 8787.0], [74.1, 8804.0], [74.2, 8804.0], [74.3, 8829.0], [74.4, 8829.0], [74.5, 8829.0], [74.6, 8829.0], [74.7, 8845.0], [74.8, 8845.0], [74.9, 8849.0], [75.0, 8901.0], [75.1, 8901.0], [75.2, 8909.0], [75.3, 8909.0], [75.4, 8909.0], [75.5, 8909.0], [75.6, 8921.0], [75.7, 8921.0], [75.8, 8934.0], [75.9, 8934.0], [76.0, 8949.0], [76.1, 8949.0], [76.2, 8952.0], [76.3, 8952.0], [76.4, 8978.0], [76.5, 8978.0], [76.6, 8986.0], [76.7, 8986.0], [76.8, 9025.0], [76.9, 9025.0], [77.0, 9058.0], [77.1, 9058.0], [77.2, 9063.0], [77.3, 9063.0], [77.4, 9065.0], [77.5, 9065.0], [77.6, 9066.0], [77.7, 9066.0], [77.8, 9076.0], [77.9, 9076.0], [78.0, 9077.0], [78.1, 9077.0], [78.2, 9088.0], [78.3, 9088.0], [78.4, 9098.0], [78.5, 9098.0], [78.6, 9106.0], [78.7, 9106.0], [78.8, 9147.0], [78.9, 9147.0], [79.0, 9150.0], [79.1, 9150.0], [79.2, 9154.0], [79.3, 9212.0], [79.4, 9212.0], [79.5, 9253.0], [79.6, 9253.0], [79.7, 9263.0], [79.8, 9263.0], [79.9, 9266.0], [80.0, 9266.0], [80.1, 9280.0], [80.2, 9280.0], [80.3, 9307.0], [80.4, 9307.0], [80.5, 9367.0], [80.6, 9367.0], [80.7, 9375.0], [80.8, 9375.0], [80.9, 9380.0], [81.0, 9380.0], [81.1, 9387.0], [81.2, 9387.0], [81.3, 9428.0], [81.4, 9428.0], [81.5, 9460.0], [81.6, 9460.0], [81.7, 9481.0], [81.8, 9481.0], [81.9, 9481.0], [82.0, 9481.0], [82.1, 9485.0], [82.2, 9485.0], [82.3, 9491.0], [82.4, 9491.0], [82.5, 9520.0], [82.6, 9520.0], [82.7, 9533.0], [82.8, 9533.0], [82.9, 9542.0], [83.0, 9542.0], [83.1, 9570.0], [83.2, 9570.0], [83.3, 9574.0], [83.4, 9578.0], [83.5, 9578.0], [83.6, 9621.0], [83.7, 9621.0], [83.8, 9625.0], [83.9, 9625.0], [84.0, 9631.0], [84.1, 9631.0], [84.2, 9676.0], [84.3, 9676.0], [84.4, 9683.0], [84.5, 9683.0], [84.6, 9715.0], [84.7, 9715.0], [84.8, 9722.0], [84.9, 9722.0], [85.0, 9757.0], [85.1, 9757.0], [85.2, 9758.0], [85.3, 9758.0], [85.4, 9762.0], [85.5, 9762.0], [85.6, 9826.0], [85.7, 9826.0], [85.8, 9828.0], [85.9, 9828.0], [86.0, 9837.0], [86.1, 9837.0], [86.2, 9864.0], [86.3, 9864.0], [86.4, 9894.0], [86.5, 9894.0], [86.6, 9909.0], [86.7, 9909.0], [86.8, 9924.0], [86.9, 9924.0], [87.0, 9928.0], [87.1, 9928.0], [87.2, 9929.0], [87.3, 9929.0], [87.4, 9932.0], [87.5, 9933.0], [87.6, 9933.0], [87.7, 9938.0], [87.8, 9938.0], [87.9, 9941.0], [88.0, 9941.0], [88.1, 9970.0], [88.2, 9970.0], [88.3, 10018.0], [88.4, 10018.0], [88.5, 10021.0], [88.6, 10021.0], [88.7, 10046.0], [88.8, 10046.0], [88.9, 10101.0], [89.0, 10101.0], [89.1, 10103.0], [89.2, 10103.0], [89.3, 10105.0], [89.4, 10105.0], [89.5, 10122.0], [89.6, 10122.0], [89.7, 10125.0], [89.8, 10125.0], [89.9, 10139.0], [90.0, 10139.0], [90.1, 10143.0], [90.2, 10143.0], [90.3, 10148.0], [90.4, 10148.0], [90.5, 10164.0], [90.6, 10164.0], [90.7, 10167.0], [90.8, 10167.0], [90.9, 10169.0], [91.0, 10169.0], [91.1, 10169.0], [91.2, 10169.0], [91.3, 10178.0], [91.4, 10178.0], [91.5, 10221.0], [91.6, 10221.0], [91.7, 10277.0], [91.8, 10282.0], [91.9, 10282.0], [92.0, 10285.0], [92.1, 10285.0], [92.2, 10326.0], [92.3, 10326.0], [92.4, 10349.0], [92.5, 10349.0], [92.6, 10356.0], [92.7, 10356.0], [92.8, 10362.0], [92.9, 10362.0], [93.0, 10368.0], [93.1, 10368.0], [93.2, 10395.0], [93.3, 10395.0], [93.4, 10427.0], [93.5, 10427.0], [93.6, 10554.0], [93.7, 10554.0], [93.8, 10589.0], [93.9, 10589.0], [94.0, 10627.0], [94.1, 10627.0], [94.2, 10657.0], [94.3, 10657.0], [94.4, 10685.0], [94.5, 10685.0], [94.6, 10688.0], [94.7, 10688.0], [94.8, 10689.0], [94.9, 10689.0], [95.0, 10691.0], [95.1, 10691.0], [95.2, 10707.0], [95.3, 10707.0], [95.4, 10713.0], [95.5, 10713.0], [95.6, 10757.0], [95.7, 10757.0], [95.8, 10832.0], [95.9, 10922.0], [96.0, 10922.0], [96.1, 10926.0], [96.2, 10926.0], [96.3, 10944.0], [96.4, 10944.0], [96.5, 10979.0], [96.6, 10979.0], [96.7, 10984.0], [96.8, 10984.0], [96.9, 10999.0], [97.0, 10999.0], [97.1, 11000.0], [97.2, 11000.0], [97.3, 11130.0], [97.4, 11130.0], [97.5, 11532.0], [97.6, 11532.0], [97.7, 11550.0], [97.8, 11550.0], [97.9, 11554.0], [98.0, 11554.0], [98.1, 11556.0], [98.2, 11556.0], [98.3, 11557.0], [98.4, 11557.0], [98.5, 11557.0], [98.6, 11557.0], [98.7, 11572.0], [98.8, 11572.0], [98.9, 11572.0], [99.0, 11572.0], [99.1, 11608.0], [99.2, 11608.0], [99.3, 11610.0], [99.4, 11610.0], [99.5, 11611.0], [99.6, 11611.0], [99.7, 12199.0], [99.8, 12199.0], [99.9, 12203.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 338.0], [0.1, 338.0], [0.2, 341.0], [0.3, 341.0], [0.4, 341.0], [0.5, 341.0], [0.6, 342.0], [0.7, 342.0], [0.8, 342.0], [0.9, 342.0], [1.0, 343.0], [1.1, 343.0], [1.2, 343.0], [1.3, 343.0], [1.4, 344.0], [1.5, 344.0], [1.6, 344.0], [1.7, 344.0], [1.8, 345.0], [1.9, 345.0], [2.0, 345.0], [2.1, 345.0], [2.2, 345.0], [2.3, 345.0], [2.4, 345.0], [2.5, 345.0], [2.6, 349.0], [2.7, 349.0], [2.8, 350.0], [2.9, 350.0], [3.0, 353.0], [3.1, 353.0], [3.2, 378.0], [3.3, 378.0], [3.4, 381.0], [3.5, 381.0], [3.6, 417.0], [3.7, 417.0], [3.8, 420.0], [3.9, 420.0], [4.0, 430.0], [4.1, 430.0], [4.2, 434.0], [4.3, 438.0], [4.4, 438.0], [4.5, 438.0], [4.6, 438.0], [4.7, 440.0], [4.8, 440.0], [4.9, 444.0], [5.0, 444.0], [5.1, 458.0], [5.2, 458.0], [5.3, 463.0], [5.4, 463.0], [5.5, 471.0], [5.6, 471.0], [5.7, 471.0], [5.8, 471.0], [5.9, 472.0], [6.0, 472.0], [6.1, 473.0], [6.2, 473.0], [6.3, 476.0], [6.4, 476.0], [6.5, 484.0], [6.6, 484.0], [6.7, 485.0], [6.8, 485.0], [6.9, 487.0], [7.0, 487.0], [7.1, 487.0], [7.2, 487.0], [7.3, 489.0], [7.4, 489.0], [7.5, 492.0], [7.6, 492.0], [7.7, 501.0], [7.8, 501.0], [7.9, 509.0], [8.0, 509.0], [8.1, 514.0], [8.2, 514.0], [8.3, 515.0], [8.4, 517.0], [8.5, 517.0], [8.6, 519.0], [8.7, 519.0], [8.8, 521.0], [8.9, 521.0], [9.0, 522.0], [9.1, 522.0], [9.2, 522.0], [9.3, 522.0], [9.4, 528.0], [9.5, 528.0], [9.6, 528.0], [9.7, 528.0], [9.8, 529.0], [9.9, 529.0], [10.0, 530.0], [10.1, 530.0], [10.2, 531.0], [10.3, 531.0], [10.4, 532.0], [10.5, 532.0], [10.6, 533.0], [10.7, 533.0], [10.8, 533.0], [10.9, 533.0], [11.0, 533.0], [11.1, 533.0], [11.2, 535.0], [11.3, 535.0], [11.4, 536.0], [11.5, 536.0], [11.6, 539.0], [11.7, 539.0], [11.8, 540.0], [11.9, 540.0], [12.0, 540.0], [12.1, 540.0], [12.2, 541.0], [12.3, 541.0], [12.4, 542.0], [12.5, 542.0], [12.6, 542.0], [12.7, 544.0], [12.8, 544.0], [12.9, 545.0], [13.0, 545.0], [13.1, 545.0], [13.2, 545.0], [13.3, 545.0], [13.4, 545.0], [13.5, 546.0], [13.6, 546.0], [13.7, 547.0], [13.8, 547.0], [13.9, 548.0], [14.0, 548.0], [14.1, 553.0], [14.2, 553.0], [14.3, 554.0], [14.4, 554.0], [14.5, 555.0], [14.6, 555.0], [14.7, 555.0], [14.8, 555.0], [14.9, 558.0], [15.0, 558.0], [15.1, 558.0], [15.2, 558.0], [15.3, 562.0], [15.4, 562.0], [15.5, 563.0], [15.6, 563.0], [15.7, 564.0], [15.8, 564.0], [15.9, 568.0], [16.0, 568.0], [16.1, 568.0], [16.2, 568.0], [16.3, 569.0], [16.4, 569.0], [16.5, 570.0], [16.6, 570.0], [16.7, 570.0], [16.8, 571.0], [16.9, 571.0], [17.0, 572.0], [17.1, 572.0], [17.2, 572.0], [17.3, 572.0], [17.4, 573.0], [17.5, 573.0], [17.6, 574.0], [17.7, 574.0], [17.8, 575.0], [17.9, 575.0], [18.0, 576.0], [18.1, 576.0], [18.2, 576.0], [18.3, 576.0], [18.4, 581.0], [18.5, 581.0], [18.6, 581.0], [18.7, 581.0], [18.8, 582.0], [18.9, 582.0], [19.0, 582.0], [19.1, 582.0], [19.2, 583.0], [19.3, 583.0], [19.4, 583.0], [19.5, 583.0], [19.6, 589.0], [19.7, 589.0], [19.8, 590.0], [19.9, 590.0], [20.0, 591.0], [20.1, 591.0], [20.2, 592.0], [20.3, 592.0], [20.4, 595.0], [20.5, 595.0], [20.6, 595.0], [20.7, 595.0], [20.8, 599.0], [20.9, 599.0], [21.0, 599.0], [21.1, 600.0], [21.2, 600.0], [21.3, 601.0], [21.4, 601.0], [21.5, 602.0], [21.6, 602.0], [21.7, 603.0], [21.8, 603.0], [21.9, 603.0], [22.0, 603.0], [22.1, 604.0], [22.2, 604.0], [22.3, 604.0], [22.4, 604.0], [22.5, 606.0], [22.6, 606.0], [22.7, 607.0], [22.8, 607.0], [22.9, 610.0], [23.0, 610.0], [23.1, 610.0], [23.2, 610.0], [23.3, 613.0], [23.4, 613.0], [23.5, 618.0], [23.6, 618.0], [23.7, 622.0], [23.8, 622.0], [23.9, 627.0], [24.0, 627.0], [24.1, 629.0], [24.2, 629.0], [24.3, 629.0], [24.4, 629.0], [24.5, 635.0], [24.6, 635.0], [24.7, 636.0], [24.8, 636.0], [24.9, 636.0], [25.0, 645.0], [25.1, 645.0], [25.2, 648.0], [25.3, 648.0], [25.4, 652.0], [25.5, 652.0], [25.6, 658.0], [25.7, 658.0], [25.8, 658.0], [25.9, 658.0], [26.0, 662.0], [26.1, 662.0], [26.2, 663.0], [26.3, 663.0], [26.4, 664.0], [26.5, 664.0], [26.6, 664.0], [26.7, 664.0], [26.8, 664.0], [26.9, 664.0], [27.0, 665.0], [27.1, 665.0], [27.2, 665.0], [27.3, 665.0], [27.4, 666.0], [27.5, 666.0], [27.6, 666.0], [27.7, 666.0], [27.8, 666.0], [27.9, 666.0], [28.0, 667.0], [28.1, 667.0], [28.2, 667.0], [28.3, 667.0], [28.4, 667.0], [28.5, 667.0], [28.6, 668.0], [28.7, 668.0], [28.8, 669.0], [28.9, 669.0], [29.0, 671.0], [29.1, 671.0], [29.2, 671.0], [29.3, 672.0], [29.4, 672.0], [29.5, 672.0], [29.6, 672.0], [29.7, 673.0], [29.8, 673.0], [29.9, 674.0], [30.0, 674.0], [30.1, 675.0], [30.2, 675.0], [30.3, 675.0], [30.4, 675.0], [30.5, 676.0], [30.6, 676.0], [30.7, 676.0], [30.8, 676.0], [30.9, 676.0], [31.0, 676.0], [31.1, 677.0], [31.2, 677.0], [31.3, 678.0], [31.4, 678.0], [31.5, 678.0], [31.6, 678.0], [31.7, 680.0], [31.8, 680.0], [31.9, 680.0], [32.0, 680.0], [32.1, 681.0], [32.2, 681.0], [32.3, 681.0], [32.4, 681.0], [32.5, 681.0], [32.6, 681.0], [32.7, 681.0], [32.8, 681.0], [32.9, 681.0], [33.0, 681.0], [33.1, 681.0], [33.2, 681.0], [33.3, 682.0], [33.4, 682.0], [33.5, 682.0], [33.6, 682.0], [33.7, 682.0], [33.8, 683.0], [33.9, 683.0], [34.0, 683.0], [34.1, 683.0], [34.2, 684.0], [34.3, 684.0], [34.4, 684.0], [34.5, 684.0], [34.6, 685.0], [34.7, 685.0], [34.8, 685.0], [34.9, 685.0], [35.0, 686.0], [35.1, 686.0], [35.2, 689.0], [35.3, 689.0], [35.4, 690.0], [35.5, 690.0], [35.6, 690.0], [35.7, 690.0], [35.8, 690.0], [35.9, 690.0], [36.0, 690.0], [36.1, 690.0], [36.2, 691.0], [36.3, 691.0], [36.4, 692.0], [36.5, 692.0], [36.6, 692.0], [36.7, 692.0], [36.8, 693.0], [36.9, 693.0], [37.0, 693.0], [37.1, 693.0], [37.2, 694.0], [37.3, 694.0], [37.4, 694.0], [37.5, 695.0], [37.6, 695.0], [37.7, 695.0], [37.8, 695.0], [37.9, 695.0], [38.0, 695.0], [38.1, 695.0], [38.2, 695.0], [38.3, 696.0], [38.4, 696.0], [38.5, 697.0], [38.6, 697.0], [38.7, 697.0], [38.8, 697.0], [38.9, 697.0], [39.0, 697.0], [39.1, 698.0], [39.2, 698.0], [39.3, 699.0], [39.4, 699.0], [39.5, 699.0], [39.6, 699.0], [39.7, 699.0], [39.8, 699.0], [39.9, 699.0], [40.0, 699.0], [40.1, 700.0], [40.2, 700.0], [40.3, 701.0], [40.4, 701.0], [40.5, 703.0], [40.6, 703.0], [40.7, 704.0], [40.8, 704.0], [40.9, 706.0], [41.0, 706.0], [41.1, 706.0], [41.2, 706.0], [41.3, 707.0], [41.4, 707.0], [41.5, 707.0], [41.6, 707.0], [41.7, 708.0], [41.8, 708.0], [41.9, 708.0], [42.0, 709.0], [42.1, 709.0], [42.2, 710.0], [42.3, 710.0], [42.4, 710.0], [42.5, 710.0], [42.6, 711.0], [42.7, 711.0], [42.8, 712.0], [42.9, 712.0], [43.0, 712.0], [43.1, 712.0], [43.2, 713.0], [43.3, 713.0], [43.4, 714.0], [43.5, 714.0], [43.6, 715.0], [43.7, 715.0], [43.8, 715.0], [43.9, 715.0], [44.0, 716.0], [44.1, 716.0], [44.2, 718.0], [44.3, 718.0], [44.4, 718.0], [44.5, 718.0], [44.6, 720.0], [44.7, 720.0], [44.8, 720.0], [44.9, 720.0], [45.0, 721.0], [45.1, 721.0], [45.2, 723.0], [45.3, 723.0], [45.4, 725.0], [45.5, 725.0], [45.6, 726.0], [45.7, 726.0], [45.8, 727.0], [45.9, 728.0], [46.0, 728.0], [46.1, 728.0], [46.2, 728.0], [46.3, 728.0], [46.4, 728.0], [46.5, 728.0], [46.6, 728.0], [46.7, 728.0], [46.8, 728.0], [46.9, 735.0], [47.0, 735.0], [47.1, 736.0], [47.2, 736.0], [47.3, 738.0], [47.4, 738.0], [47.5, 740.0], [47.6, 740.0], [47.7, 740.0], [47.8, 740.0], [47.9, 741.0], [48.0, 741.0], [48.1, 742.0], [48.2, 742.0], [48.3, 742.0], [48.4, 742.0], [48.5, 743.0], [48.6, 743.0], [48.7, 743.0], [48.8, 743.0], [48.9, 745.0], [49.0, 745.0], [49.1, 748.0], [49.2, 748.0], [49.3, 752.0], [49.4, 752.0], [49.5, 758.0], [49.6, 758.0], [49.7, 759.0], [49.8, 759.0], [49.9, 761.0], [50.0, 762.0], [50.1, 762.0], [50.2, 765.0], [50.3, 765.0], [50.4, 765.0], [50.5, 765.0], [50.6, 766.0], [50.7, 766.0], [50.8, 768.0], [50.9, 768.0], [51.0, 768.0], [51.1, 768.0], [51.2, 777.0], [51.3, 777.0], [51.4, 784.0], [51.5, 784.0], [51.6, 784.0], [51.7, 784.0], [51.8, 787.0], [51.9, 787.0], [52.0, 788.0], [52.1, 788.0], [52.2, 789.0], [52.3, 789.0], [52.4, 790.0], [52.5, 790.0], [52.6, 790.0], [52.7, 790.0], [52.8, 793.0], [52.9, 793.0], [53.0, 798.0], [53.1, 798.0], [53.2, 803.0], [53.3, 803.0], [53.4, 804.0], [53.5, 804.0], [53.6, 804.0], [53.7, 804.0], [53.8, 808.0], [53.9, 808.0], [54.0, 811.0], [54.1, 811.0], [54.2, 814.0], [54.3, 817.0], [54.4, 817.0], [54.5, 821.0], [54.6, 821.0], [54.7, 823.0], [54.8, 823.0], [54.9, 824.0], [55.0, 824.0], [55.1, 825.0], [55.2, 825.0], [55.3, 827.0], [55.4, 827.0], [55.5, 830.0], [55.6, 830.0], [55.7, 833.0], [55.8, 833.0], [55.9, 833.0], [56.0, 833.0], [56.1, 836.0], [56.2, 836.0], [56.3, 836.0], [56.4, 836.0], [56.5, 837.0], [56.6, 837.0], [56.7, 839.0], [56.8, 839.0], [56.9, 841.0], [57.0, 841.0], [57.1, 843.0], [57.2, 843.0], [57.3, 844.0], [57.4, 844.0], [57.5, 844.0], [57.6, 844.0], [57.7, 844.0], [57.8, 844.0], [57.9, 845.0], [58.0, 845.0], [58.1, 846.0], [58.2, 846.0], [58.3, 847.0], [58.4, 847.0], [58.5, 847.0], [58.6, 849.0], [58.7, 849.0], [58.8, 849.0], [58.9, 849.0], [59.0, 852.0], [59.1, 852.0], [59.2, 853.0], [59.3, 853.0], [59.4, 853.0], [59.5, 853.0], [59.6, 855.0], [59.7, 855.0], [59.8, 856.0], [59.9, 856.0], [60.0, 856.0], [60.1, 856.0], [60.2, 857.0], [60.3, 857.0], [60.4, 857.0], [60.5, 857.0], [60.6, 858.0], [60.7, 858.0], [60.8, 858.0], [60.9, 858.0], [61.0, 859.0], [61.1, 859.0], [61.2, 859.0], [61.3, 859.0], [61.4, 860.0], [61.5, 860.0], [61.6, 862.0], [61.7, 862.0], [61.8, 863.0], [61.9, 863.0], [62.0, 864.0], [62.1, 864.0], [62.2, 864.0], [62.3, 864.0], [62.4, 864.0], [62.5, 864.0], [62.6, 864.0], [62.7, 864.0], [62.8, 864.0], [62.9, 865.0], [63.0, 865.0], [63.1, 866.0], [63.2, 866.0], [63.3, 867.0], [63.4, 867.0], [63.5, 867.0], [63.6, 867.0], [63.7, 868.0], [63.8, 868.0], [63.9, 869.0], [64.0, 869.0], [64.1, 870.0], [64.2, 870.0], [64.3, 875.0], [64.4, 875.0], [64.5, 875.0], [64.6, 875.0], [64.7, 876.0], [64.8, 876.0], [64.9, 876.0], [65.0, 876.0], [65.1, 877.0], [65.2, 877.0], [65.3, 877.0], [65.4, 877.0], [65.5, 877.0], [65.6, 877.0], [65.7, 877.0], [65.8, 877.0], [65.9, 878.0], [66.0, 878.0], [66.1, 878.0], [66.2, 878.0], [66.3, 878.0], [66.4, 878.0], [66.5, 879.0], [66.6, 879.0], [66.7, 880.0], [66.8, 880.0], [66.9, 880.0], [67.0, 881.0], [67.1, 881.0], [67.2, 881.0], [67.3, 881.0], [67.4, 881.0], [67.5, 881.0], [67.6, 883.0], [67.7, 883.0], [67.8, 886.0], [67.9, 886.0], [68.0, 888.0], [68.1, 888.0], [68.2, 891.0], [68.3, 891.0], [68.4, 895.0], [68.5, 895.0], [68.6, 895.0], [68.7, 895.0], [68.8, 896.0], [68.9, 896.0], [69.0, 897.0], [69.1, 897.0], [69.2, 898.0], [69.3, 898.0], [69.4, 898.0], [69.5, 898.0], [69.6, 898.0], [69.7, 898.0], [69.8, 899.0], [69.9, 899.0], [70.0, 900.0], [70.1, 900.0], [70.2, 901.0], [70.3, 901.0], [70.4, 901.0], [70.5, 901.0], [70.6, 902.0], [70.7, 902.0], [70.8, 902.0], [70.9, 905.0], [71.0, 905.0], [71.1, 905.0], [71.2, 905.0], [71.3, 906.0], [71.4, 906.0], [71.5, 907.0], [71.6, 907.0], [71.7, 907.0], [71.8, 907.0], [71.9, 908.0], [72.0, 908.0], [72.1, 909.0], [72.2, 909.0], [72.3, 909.0], [72.4, 909.0], [72.5, 909.0], [72.6, 909.0], [72.7, 911.0], [72.8, 911.0], [72.9, 911.0], [73.0, 911.0], [73.1, 911.0], [73.2, 911.0], [73.3, 911.0], [73.4, 911.0], [73.5, 913.0], [73.6, 913.0], [73.7, 913.0], [73.8, 913.0], [73.9, 914.0], [74.0, 914.0], [74.1, 914.0], [74.2, 914.0], [74.3, 914.0], [74.4, 914.0], [74.5, 917.0], [74.6, 917.0], [74.7, 918.0], [74.8, 918.0], [74.9, 919.0], [75.0, 921.0], [75.1, 921.0], [75.2, 921.0], [75.3, 921.0], [75.4, 922.0], [75.5, 922.0], [75.6, 925.0], [75.7, 925.0], [75.8, 927.0], [75.9, 927.0], [76.0, 930.0], [76.1, 930.0], [76.2, 932.0], [76.3, 932.0], [76.4, 932.0], [76.5, 932.0], [76.6, 932.0], [76.7, 932.0], [76.8, 938.0], [76.9, 938.0], [77.0, 945.0], [77.1, 945.0], [77.2, 945.0], [77.3, 945.0], [77.4, 947.0], [77.5, 947.0], [77.6, 948.0], [77.7, 948.0], [77.8, 950.0], [77.9, 950.0], [78.0, 952.0], [78.1, 952.0], [78.2, 960.0], [78.3, 960.0], [78.4, 962.0], [78.5, 962.0], [78.6, 963.0], [78.7, 963.0], [78.8, 964.0], [78.9, 964.0], [79.0, 969.0], [79.1, 969.0], [79.2, 971.0], [79.3, 971.0], [79.4, 971.0], [79.5, 971.0], [79.6, 971.0], [79.7, 973.0], [79.8, 973.0], [79.9, 976.0], [80.0, 976.0], [80.1, 978.0], [80.2, 978.0], [80.3, 980.0], [80.4, 980.0], [80.5, 980.0], [80.6, 980.0], [80.7, 982.0], [80.8, 982.0], [80.9, 984.0], [81.0, 984.0], [81.1, 986.0], [81.2, 986.0], [81.3, 987.0], [81.4, 987.0], [81.5, 987.0], [81.6, 987.0], [81.7, 989.0], [81.8, 989.0], [81.9, 990.0], [82.0, 990.0], [82.1, 991.0], [82.2, 991.0], [82.3, 997.0], [82.4, 997.0], [82.5, 999.0], [82.6, 999.0], [82.7, 999.0], [82.8, 999.0], [82.9, 999.0], [83.0, 999.0], [83.1, 1000.0], [83.2, 1000.0], [83.3, 1009.0], [83.4, 1014.0], [83.5, 1014.0], [83.6, 1015.0], [83.7, 1015.0], [83.8, 1016.0], [83.9, 1016.0], [84.0, 1019.0], [84.1, 1019.0], [84.2, 1020.0], [84.3, 1020.0], [84.4, 1020.0], [84.5, 1020.0], [84.6, 1022.0], [84.7, 1022.0], [84.8, 1022.0], [84.9, 1022.0], [85.0, 1022.0], [85.1, 1022.0], [85.2, 1022.0], [85.3, 1022.0], [85.4, 1023.0], [85.5, 1023.0], [85.6, 1025.0], [85.7, 1025.0], [85.8, 1026.0], [85.9, 1026.0], [86.0, 1030.0], [86.1, 1030.0], [86.2, 1031.0], [86.3, 1031.0], [86.4, 1032.0], [86.5, 1032.0], [86.6, 1032.0], [86.7, 1032.0], [86.8, 1035.0], [86.9, 1035.0], [87.0, 1042.0], [87.1, 1042.0], [87.2, 1044.0], [87.3, 1044.0], [87.4, 1045.0], [87.5, 1046.0], [87.6, 1046.0], [87.7, 1047.0], [87.8, 1047.0], [87.9, 1049.0], [88.0, 1049.0], [88.1, 1053.0], [88.2, 1053.0], [88.3, 1059.0], [88.4, 1059.0], [88.5, 1062.0], [88.6, 1062.0], [88.7, 1062.0], [88.8, 1062.0], [88.9, 1063.0], [89.0, 1063.0], [89.1, 1064.0], [89.2, 1064.0], [89.3, 1070.0], [89.4, 1070.0], [89.5, 1071.0], [89.6, 1071.0], [89.7, 1081.0], [89.8, 1081.0], [89.9, 1098.0], [90.0, 1098.0], [90.1, 1109.0], [90.2, 1109.0], [90.3, 1113.0], [90.4, 1113.0], [90.5, 1119.0], [90.6, 1119.0], [90.7, 1120.0], [90.8, 1120.0], [90.9, 1127.0], [91.0, 1127.0], [91.1, 1127.0], [91.2, 1127.0], [91.3, 1131.0], [91.4, 1131.0], [91.5, 1142.0], [91.6, 1142.0], [91.7, 1178.0], [91.8, 1181.0], [91.9, 1181.0], [92.0, 1196.0], [92.1, 1196.0], [92.2, 1201.0], [92.3, 1201.0], [92.4, 1201.0], [92.5, 1201.0], [92.6, 1263.0], [92.7, 1263.0], [92.8, 1358.0], [92.9, 1358.0], [93.0, 1360.0], [93.1, 1360.0], [93.2, 1580.0], [93.3, 1580.0], [93.4, 1604.0], [93.5, 1604.0], [93.6, 1608.0], [93.7, 1608.0], [93.8, 1608.0], [93.9, 1608.0], [94.0, 1610.0], [94.1, 1610.0], [94.2, 1622.0], [94.3, 1622.0], [94.4, 1682.0], [94.5, 1682.0], [94.6, 1701.0], [94.7, 1701.0], [94.8, 1703.0], [94.9, 1703.0], [95.0, 1706.0], [95.1, 1706.0], [95.2, 1711.0], [95.3, 1711.0], [95.4, 1721.0], [95.5, 1721.0], [95.6, 1745.0], [95.7, 1745.0], [95.8, 1786.0], [95.9, 1826.0], [96.0, 1826.0], [96.1, 1850.0], [96.2, 1850.0], [96.3, 1852.0], [96.4, 1852.0], [96.5, 1879.0], [96.6, 1879.0], [96.7, 1880.0], [96.8, 1880.0], [96.9, 1883.0], [97.0, 1883.0], [97.1, 1935.0], [97.2, 1935.0], [97.3, 1937.0], [97.4, 1937.0], [97.5, 1982.0], [97.6, 1982.0], [97.7, 2010.0], [97.8, 2010.0], [97.9, 2021.0], [98.0, 2021.0], [98.1, 2043.0], [98.2, 2043.0], [98.3, 6136.0], [98.4, 6136.0], [98.5, 6288.0], [98.6, 6288.0], [98.7, 6452.0], [98.8, 6452.0], [98.9, 6477.0], [99.0, 6477.0], [99.1, 6490.0], [99.2, 6490.0], [99.3, 6571.0], [99.4, 6571.0], [99.5, 6662.0], [99.6, 6662.0], [99.7, 6691.0], [99.8, 6691.0], [99.9, 6749.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 5912.0], [0.1, 5912.0], [0.2, 5924.0], [0.3, 5924.0], [0.4, 5924.0], [0.5, 5924.0], [0.6, 6021.0], [0.7, 6021.0], [0.8, 6038.0], [0.9, 6038.0], [1.0, 6059.0], [1.1, 6059.0], [1.2, 6130.0], [1.3, 6130.0], [1.4, 6132.0], [1.5, 6132.0], [1.6, 6176.0], [1.7, 6176.0], [1.8, 6198.0], [1.9, 6198.0], [2.0, 6206.0], [2.1, 6206.0], [2.2, 6219.0], [2.3, 6219.0], [2.4, 6245.0], [2.5, 6245.0], [2.6, 6285.0], [2.7, 6285.0], [2.8, 6291.0], [2.9, 6291.0], [3.0, 6294.0], [3.1, 6294.0], [3.2, 6315.0], [3.3, 6315.0], [3.4, 6326.0], [3.5, 6326.0], [3.6, 6327.0], [3.7, 6327.0], [3.8, 6403.0], [3.9, 6403.0], [4.0, 6411.0], [4.1, 6411.0], [4.2, 6418.0], [4.3, 6437.0], [4.4, 6437.0], [4.5, 6444.0], [4.6, 6444.0], [4.7, 6451.0], [4.8, 6451.0], [4.9, 6476.0], [5.0, 6476.0], [5.1, 6481.0], [5.2, 6481.0], [5.3, 6485.0], [5.4, 6485.0], [5.5, 6486.0], [5.6, 6486.0], [5.7, 6491.0], [5.8, 6491.0], [5.9, 6519.0], [6.0, 6519.0], [6.1, 6527.0], [6.2, 6527.0], [6.3, 6546.0], [6.4, 6546.0], [6.5, 6548.0], [6.6, 6548.0], [6.7, 6550.0], [6.8, 6550.0], [6.9, 6554.0], [7.0, 6554.0], [7.1, 6557.0], [7.2, 6557.0], [7.3, 6568.0], [7.4, 6568.0], [7.5, 6569.0], [7.6, 6569.0], [7.7, 6573.0], [7.8, 6573.0], [7.9, 6576.0], [8.0, 6576.0], [8.1, 6586.0], [8.2, 6586.0], [8.3, 6589.0], [8.4, 6591.0], [8.5, 6591.0], [8.6, 6594.0], [8.7, 6594.0], [8.8, 6598.0], [8.9, 6598.0], [9.0, 6599.0], [9.1, 6599.0], [9.2, 6605.0], [9.3, 6605.0], [9.4, 6608.0], [9.5, 6608.0], [9.6, 6609.0], [9.7, 6609.0], [9.8, 6609.0], [9.9, 6609.0], [10.0, 6610.0], [10.1, 6610.0], [10.2, 6610.0], [10.3, 6610.0], [10.4, 6614.0], [10.5, 6614.0], [10.6, 6618.0], [10.7, 6618.0], [10.8, 6620.0], [10.9, 6620.0], [11.0, 6631.0], [11.1, 6631.0], [11.2, 6646.0], [11.3, 6646.0], [11.4, 6650.0], [11.5, 6650.0], [11.6, 6654.0], [11.7, 6654.0], [11.8, 6657.0], [11.9, 6657.0], [12.0, 6664.0], [12.1, 6664.0], [12.2, 6679.0], [12.3, 6679.0], [12.4, 6684.0], [12.5, 6689.0], [12.6, 6689.0], [12.7, 6692.0], [12.8, 6692.0], [12.9, 6701.0], [13.0, 6701.0], [13.1, 6703.0], [13.2, 6703.0], [13.3, 6712.0], [13.4, 6712.0], [13.5, 6717.0], [13.6, 6717.0], [13.7, 6717.0], [13.8, 6717.0], [13.9, 6726.0], [14.0, 6726.0], [14.1, 6731.0], [14.2, 6731.0], [14.3, 6740.0], [14.4, 6740.0], [14.5, 6740.0], [14.6, 6740.0], [14.7, 6748.0], [14.8, 6748.0], [14.9, 6751.0], [15.0, 6751.0], [15.1, 6755.0], [15.2, 6755.0], [15.3, 6774.0], [15.4, 6774.0], [15.5, 6776.0], [15.6, 6776.0], [15.7, 6776.0], [15.8, 6776.0], [15.9, 6778.0], [16.0, 6778.0], [16.1, 6779.0], [16.2, 6779.0], [16.3, 6780.0], [16.4, 6780.0], [16.5, 6782.0], [16.6, 6782.0], [16.7, 6786.0], [16.8, 6791.0], [16.9, 6791.0], [17.0, 6793.0], [17.1, 6793.0], [17.2, 6793.0], [17.3, 6793.0], [17.4, 6795.0], [17.5, 6795.0], [17.6, 6795.0], [17.7, 6795.0], [17.8, 6795.0], [17.9, 6795.0], [18.0, 6809.0], [18.1, 6809.0], [18.2, 6813.0], [18.3, 6813.0], [18.4, 6817.0], [18.5, 6817.0], [18.6, 6818.0], [18.7, 6818.0], [18.8, 6822.0], [18.9, 6822.0], [19.0, 6826.0], [19.1, 6826.0], [19.2, 6835.0], [19.3, 6835.0], [19.4, 6878.0], [19.5, 6878.0], [19.6, 6882.0], [19.7, 6882.0], [19.8, 6885.0], [19.9, 6885.0], [20.0, 6887.0], [20.1, 6887.0], [20.2, 6889.0], [20.3, 6889.0], [20.4, 6894.0], [20.5, 6894.0], [20.6, 6895.0], [20.7, 6895.0], [20.8, 6900.0], [20.9, 6905.0], [21.0, 6905.0], [21.1, 6909.0], [21.2, 6909.0], [21.3, 6910.0], [21.4, 6910.0], [21.5, 6916.0], [21.6, 6916.0], [21.7, 6916.0], [21.8, 6916.0], [21.9, 6916.0], [22.0, 6916.0], [22.1, 6922.0], [22.2, 6922.0], [22.3, 6923.0], [22.4, 6923.0], [22.5, 6925.0], [22.6, 6925.0], [22.7, 6927.0], [22.8, 6927.0], [22.9, 6931.0], [23.0, 6931.0], [23.1, 6931.0], [23.2, 6931.0], [23.3, 6931.0], [23.4, 6931.0], [23.5, 6933.0], [23.6, 6933.0], [23.7, 6935.0], [23.8, 6935.0], [23.9, 6936.0], [24.0, 6936.0], [24.1, 6937.0], [24.2, 6937.0], [24.3, 6942.0], [24.4, 6942.0], [24.5, 6943.0], [24.6, 6943.0], [24.7, 6951.0], [24.8, 6951.0], [24.9, 6958.0], [25.0, 6961.0], [25.1, 6961.0], [25.2, 6968.0], [25.3, 6968.0], [25.4, 6973.0], [25.5, 6973.0], [25.6, 6983.0], [25.7, 6983.0], [25.8, 6985.0], [25.9, 6985.0], [26.0, 6985.0], [26.1, 6985.0], [26.2, 6987.0], [26.3, 6987.0], [26.4, 6988.0], [26.5, 6988.0], [26.6, 6989.0], [26.7, 6989.0], [26.8, 6991.0], [26.9, 6991.0], [27.0, 6995.0], [27.1, 6995.0], [27.2, 6996.0], [27.3, 6996.0], [27.4, 6998.0], [27.5, 6998.0], [27.6, 7003.0], [27.7, 7003.0], [27.8, 7007.0], [27.9, 7007.0], [28.0, 7012.0], [28.1, 7012.0], [28.2, 7014.0], [28.3, 7014.0], [28.4, 7020.0], [28.5, 7020.0], [28.6, 7021.0], [28.7, 7021.0], [28.8, 7022.0], [28.9, 7022.0], [29.0, 7030.0], [29.1, 7030.0], [29.2, 7031.0], [29.3, 7033.0], [29.4, 7033.0], [29.5, 7033.0], [29.6, 7033.0], [29.7, 7035.0], [29.8, 7035.0], [29.9, 7040.0], [30.0, 7040.0], [30.1, 7041.0], [30.2, 7041.0], [30.3, 7044.0], [30.4, 7044.0], [30.5, 7047.0], [30.6, 7047.0], [30.7, 7048.0], [30.8, 7048.0], [30.9, 7051.0], [31.0, 7051.0], [31.1, 7053.0], [31.2, 7053.0], [31.3, 7053.0], [31.4, 7053.0], [31.5, 7054.0], [31.6, 7054.0], [31.7, 7060.0], [31.8, 7060.0], [31.9, 7061.0], [32.0, 7061.0], [32.1, 7063.0], [32.2, 7063.0], [32.3, 7068.0], [32.4, 7068.0], [32.5, 7069.0], [32.6, 7069.0], [32.7, 7072.0], [32.8, 7072.0], [32.9, 7073.0], [33.0, 7073.0], [33.1, 7077.0], [33.2, 7077.0], [33.3, 7086.0], [33.4, 7088.0], [33.5, 7088.0], [33.6, 7088.0], [33.7, 7088.0], [33.8, 7090.0], [33.9, 7090.0], [34.0, 7092.0], [34.1, 7092.0], [34.2, 7093.0], [34.3, 7093.0], [34.4, 7100.0], [34.5, 7100.0], [34.6, 7103.0], [34.7, 7103.0], [34.8, 7105.0], [34.9, 7105.0], [35.0, 7105.0], [35.1, 7105.0], [35.2, 7106.0], [35.3, 7106.0], [35.4, 7109.0], [35.5, 7109.0], [35.6, 7117.0], [35.7, 7117.0], [35.8, 7118.0], [35.9, 7118.0], [36.0, 7118.0], [36.1, 7118.0], [36.2, 7120.0], [36.3, 7120.0], [36.4, 7120.0], [36.5, 7120.0], [36.6, 7120.0], [36.7, 7120.0], [36.8, 7122.0], [36.9, 7122.0], [37.0, 7122.0], [37.1, 7122.0], [37.2, 7125.0], [37.3, 7125.0], [37.4, 7130.0], [37.5, 7131.0], [37.6, 7131.0], [37.7, 7132.0], [37.8, 7132.0], [37.9, 7134.0], [38.0, 7134.0], [38.1, 7134.0], [38.2, 7134.0], [38.3, 7149.0], [38.4, 7149.0], [38.5, 7150.0], [38.6, 7150.0], [38.7, 7156.0], [38.8, 7156.0], [38.9, 7160.0], [39.0, 7160.0], [39.1, 7164.0], [39.2, 7164.0], [39.3, 7169.0], [39.4, 7169.0], [39.5, 7170.0], [39.6, 7170.0], [39.7, 7171.0], [39.8, 7171.0], [39.9, 7174.0], [40.0, 7174.0], [40.1, 7174.0], [40.2, 7174.0], [40.3, 7181.0], [40.4, 7181.0], [40.5, 7186.0], [40.6, 7186.0], [40.7, 7188.0], [40.8, 7188.0], [40.9, 7194.0], [41.0, 7194.0], [41.1, 7200.0], [41.2, 7200.0], [41.3, 7202.0], [41.4, 7202.0], [41.5, 7202.0], [41.6, 7202.0], [41.7, 7204.0], [41.8, 7210.0], [41.9, 7210.0], [42.0, 7214.0], [42.1, 7214.0], [42.2, 7225.0], [42.3, 7225.0], [42.4, 7225.0], [42.5, 7225.0], [42.6, 7226.0], [42.7, 7226.0], [42.8, 7228.0], [42.9, 7228.0], [43.0, 7229.0], [43.1, 7229.0], [43.2, 7235.0], [43.3, 7235.0], [43.4, 7235.0], [43.5, 7235.0], [43.6, 7235.0], [43.7, 7235.0], [43.8, 7239.0], [43.9, 7239.0], [44.0, 7240.0], [44.1, 7240.0], [44.2, 7241.0], [44.3, 7241.0], [44.4, 7257.0], [44.5, 7257.0], [44.6, 7260.0], [44.7, 7260.0], [44.8, 7263.0], [44.9, 7263.0], [45.0, 7264.0], [45.1, 7264.0], [45.2, 7270.0], [45.3, 7270.0], [45.4, 7272.0], [45.5, 7272.0], [45.6, 7274.0], [45.7, 7274.0], [45.8, 7276.0], [45.9, 7279.0], [46.0, 7279.0], [46.1, 7280.0], [46.2, 7280.0], [46.3, 7282.0], [46.4, 7282.0], [46.5, 7283.0], [46.6, 7283.0], [46.7, 7284.0], [46.8, 7284.0], [46.9, 7284.0], [47.0, 7284.0], [47.1, 7289.0], [47.2, 7289.0], [47.3, 7294.0], [47.4, 7294.0], [47.5, 7294.0], [47.6, 7294.0], [47.7, 7308.0], [47.8, 7308.0], [47.9, 7310.0], [48.0, 7310.0], [48.1, 7318.0], [48.2, 7318.0], [48.3, 7319.0], [48.4, 7319.0], [48.5, 7320.0], [48.6, 7320.0], [48.7, 7320.0], [48.8, 7320.0], [48.9, 7328.0], [49.0, 7328.0], [49.1, 7335.0], [49.2, 7335.0], [49.3, 7335.0], [49.4, 7335.0], [49.5, 7337.0], [49.6, 7337.0], [49.7, 7338.0], [49.8, 7338.0], [49.9, 7342.0], [50.0, 7344.0], [50.1, 7344.0], [50.2, 7347.0], [50.3, 7347.0], [50.4, 7348.0], [50.5, 7348.0], [50.6, 7355.0], [50.7, 7355.0], [50.8, 7358.0], [50.9, 7358.0], [51.0, 7358.0], [51.1, 7358.0], [51.2, 7371.0], [51.3, 7371.0], [51.4, 7372.0], [51.5, 7372.0], [51.6, 7373.0], [51.7, 7373.0], [51.8, 7380.0], [51.9, 7380.0], [52.0, 7380.0], [52.1, 7380.0], [52.2, 7381.0], [52.3, 7381.0], [52.4, 7384.0], [52.5, 7384.0], [52.6, 7384.0], [52.7, 7384.0], [52.8, 7400.0], [52.9, 7400.0], [53.0, 7405.0], [53.1, 7405.0], [53.2, 7407.0], [53.3, 7407.0], [53.4, 7409.0], [53.5, 7409.0], [53.6, 7411.0], [53.7, 7411.0], [53.8, 7415.0], [53.9, 7415.0], [54.0, 7426.0], [54.1, 7426.0], [54.2, 7431.0], [54.3, 7436.0], [54.4, 7436.0], [54.5, 7438.0], [54.6, 7438.0], [54.7, 7444.0], [54.8, 7444.0], [54.9, 7452.0], [55.0, 7452.0], [55.1, 7461.0], [55.2, 7461.0], [55.3, 7478.0], [55.4, 7478.0], [55.5, 7482.0], [55.6, 7482.0], [55.7, 7486.0], [55.8, 7486.0], [55.9, 7491.0], [56.0, 7491.0], [56.1, 7493.0], [56.2, 7493.0], [56.3, 7493.0], [56.4, 7493.0], [56.5, 7500.0], [56.6, 7500.0], [56.7, 7503.0], [56.8, 7503.0], [56.9, 7506.0], [57.0, 7506.0], [57.1, 7511.0], [57.2, 7511.0], [57.3, 7517.0], [57.4, 7517.0], [57.5, 7518.0], [57.6, 7518.0], [57.7, 7520.0], [57.8, 7520.0], [57.9, 7521.0], [58.0, 7521.0], [58.1, 7529.0], [58.2, 7529.0], [58.3, 7552.0], [58.4, 7555.0], [58.5, 7555.0], [58.6, 7559.0], [58.7, 7559.0], [58.8, 7639.0], [58.9, 7639.0], [59.0, 7673.0], [59.1, 7673.0], [59.2, 7698.0], [59.3, 7698.0], [59.4, 7768.0], [59.5, 7768.0], [59.6, 7841.0], [59.7, 7841.0], [59.8, 7847.0], [59.9, 7847.0], [60.0, 7854.0], [60.1, 7854.0], [60.2, 7904.0], [60.3, 7904.0], [60.4, 7940.0], [60.5, 7940.0], [60.6, 7948.0], [60.7, 7948.0], [60.8, 7956.0], [60.9, 7956.0], [61.0, 7976.0], [61.1, 7976.0], [61.2, 7986.0], [61.3, 7986.0], [61.4, 8031.0], [61.5, 8031.0], [61.6, 8032.0], [61.7, 8032.0], [61.8, 8055.0], [61.9, 8055.0], [62.0, 8091.0], [62.1, 8091.0], [62.2, 8114.0], [62.3, 8114.0], [62.4, 8179.0], [62.5, 8369.0], [62.6, 8369.0], [62.7, 8371.0], [62.8, 8371.0], [62.9, 8506.0], [63.0, 8506.0], [63.1, 8543.0], [63.2, 8543.0], [63.3, 8558.0], [63.4, 8558.0], [63.5, 8611.0], [63.6, 8611.0], [63.7, 8619.0], [63.8, 8619.0], [63.9, 8628.0], [64.0, 8628.0], [64.1, 8685.0], [64.2, 8685.0], [64.3, 8785.0], [64.4, 8785.0], [64.5, 8815.0], [64.6, 8815.0], [64.7, 8815.0], [64.8, 8815.0], [64.9, 8822.0], [65.0, 8822.0], [65.1, 8841.0], [65.2, 8841.0], [65.3, 8890.0], [65.4, 8890.0], [65.5, 8969.0], [65.6, 8969.0], [65.7, 9067.0], [65.8, 9067.0], [65.9, 9090.0], [66.0, 9090.0], [66.1, 9114.0], [66.2, 9114.0], [66.3, 9117.0], [66.4, 9117.0], [66.5, 9180.0], [66.6, 9180.0], [66.7, 9214.0], [66.8, 9231.0], [66.9, 9231.0], [67.0, 9238.0], [67.1, 9238.0], [67.2, 9247.0], [67.3, 9247.0], [67.4, 9256.0], [67.5, 9256.0], [67.6, 9259.0], [67.7, 9259.0], [67.8, 9274.0], [67.9, 9274.0], [68.0, 9283.0], [68.1, 9283.0], [68.2, 9291.0], [68.3, 9291.0], [68.4, 9296.0], [68.5, 9296.0], [68.6, 9298.0], [68.7, 9298.0], [68.8, 9306.0], [68.9, 9306.0], [69.0, 9374.0], [69.1, 9374.0], [69.2, 9379.0], [69.3, 9379.0], [69.4, 9385.0], [69.5, 9385.0], [69.6, 9386.0], [69.7, 9386.0], [69.8, 9389.0], [69.9, 9389.0], [70.0, 9456.0], [70.1, 9456.0], [70.2, 9466.0], [70.3, 9466.0], [70.4, 9482.0], [70.5, 9482.0], [70.6, 9485.0], [70.7, 9485.0], [70.8, 9514.0], [70.9, 9541.0], [71.0, 9541.0], [71.1, 9541.0], [71.2, 9541.0], [71.3, 9582.0], [71.4, 9582.0], [71.5, 9618.0], [71.6, 9618.0], [71.7, 9627.0], [71.8, 9627.0], [71.9, 9633.0], [72.0, 9633.0], [72.1, 9663.0], [72.2, 9663.0], [72.3, 9664.0], [72.4, 9664.0], [72.5, 9669.0], [72.6, 9669.0], [72.7, 9692.0], [72.8, 9692.0], [72.9, 9697.0], [73.0, 9697.0], [73.1, 9843.0], [73.2, 9843.0], [73.3, 9872.0], [73.4, 9872.0], [73.5, 9877.0], [73.6, 9877.0], [73.7, 9888.0], [73.8, 9888.0], [73.9, 9898.0], [74.0, 9898.0], [74.1, 9899.0], [74.2, 9899.0], [74.3, 9908.0], [74.4, 9908.0], [74.5, 9939.0], [74.6, 9939.0], [74.7, 9943.0], [74.8, 9943.0], [74.9, 9973.0], [75.0, 9977.0], [75.1, 9977.0], [75.2, 9987.0], [75.3, 9987.0], [75.4, 9991.0], [75.5, 9991.0], [75.6, 10000.0], [75.7, 10000.0], [75.8, 10005.0], [75.9, 10005.0], [76.0, 10025.0], [76.1, 10025.0], [76.2, 10029.0], [76.3, 10029.0], [76.4, 10029.0], [76.5, 10029.0], [76.6, 10030.0], [76.7, 10030.0], [76.8, 10048.0], [76.9, 10048.0], [77.0, 10050.0], [77.1, 10050.0], [77.2, 10050.0], [77.3, 10050.0], [77.4, 10060.0], [77.5, 10060.0], [77.6, 10086.0], [77.7, 10086.0], [77.8, 10091.0], [77.9, 10091.0], [78.0, 10108.0], [78.1, 10108.0], [78.2, 10112.0], [78.3, 10112.0], [78.4, 10168.0], [78.5, 10168.0], [78.6, 10171.0], [78.7, 10171.0], [78.8, 10177.0], [78.9, 10177.0], [79.0, 10182.0], [79.1, 10182.0], [79.2, 10213.0], [79.3, 10221.0], [79.4, 10221.0], [79.5, 10286.0], [79.6, 10286.0], [79.7, 10297.0], [79.8, 10297.0], [79.9, 10321.0], [80.0, 10321.0], [80.1, 10325.0], [80.2, 10325.0], [80.3, 10379.0], [80.4, 10379.0], [80.5, 10396.0], [80.6, 10396.0], [80.7, 10397.0], [80.8, 10397.0], [80.9, 10402.0], [81.0, 10402.0], [81.1, 10407.0], [81.2, 10407.0], [81.3, 10436.0], [81.4, 10436.0], [81.5, 10440.0], [81.6, 10440.0], [81.7, 10444.0], [81.8, 10444.0], [81.9, 10452.0], [82.0, 10452.0], [82.1, 10456.0], [82.2, 10456.0], [82.3, 10466.0], [82.4, 10466.0], [82.5, 10477.0], [82.6, 10477.0], [82.7, 10496.0], [82.8, 10496.0], [82.9, 10532.0], [83.0, 10532.0], [83.1, 10540.0], [83.2, 10540.0], [83.3, 10544.0], [83.4, 10554.0], [83.5, 10554.0], [83.6, 10572.0], [83.7, 10572.0], [83.8, 10572.0], [83.9, 10572.0], [84.0, 10592.0], [84.1, 10592.0], [84.2, 10603.0], [84.3, 10603.0], [84.4, 10606.0], [84.5, 10606.0], [84.6, 10620.0], [84.7, 10620.0], [84.8, 10627.0], [84.9, 10627.0], [85.0, 10687.0], [85.1, 10687.0], [85.2, 10688.0], [85.3, 10688.0], [85.4, 10689.0], [85.5, 10689.0], [85.6, 10701.0], [85.7, 10701.0], [85.8, 10702.0], [85.9, 10702.0], [86.0, 10707.0], [86.1, 10707.0], [86.2, 10720.0], [86.3, 10720.0], [86.4, 10754.0], [86.5, 10754.0], [86.6, 10801.0], [86.7, 10801.0], [86.8, 10889.0], [86.9, 10889.0], [87.0, 10893.0], [87.1, 10893.0], [87.2, 10942.0], [87.3, 10942.0], [87.4, 10954.0], [87.5, 10955.0], [87.6, 10955.0], [87.7, 10958.0], [87.8, 10958.0], [87.9, 10990.0], [88.0, 10990.0], [88.1, 10999.0], [88.2, 10999.0], [88.3, 11022.0], [88.4, 11022.0], [88.5, 11033.0], [88.6, 11033.0], [88.7, 11083.0], [88.8, 11083.0], [88.9, 11085.0], [89.0, 11085.0], [89.1, 11106.0], [89.2, 11106.0], [89.3, 11108.0], [89.4, 11108.0], [89.5, 11125.0], [89.6, 11125.0], [89.7, 11125.0], [89.8, 11125.0], [89.9, 11146.0], [90.0, 11146.0], [90.1, 11161.0], [90.2, 11161.0], [90.3, 11162.0], [90.4, 11162.0], [90.5, 11204.0], [90.6, 11204.0], [90.7, 11210.0], [90.8, 11210.0], [90.9, 11215.0], [91.0, 11215.0], [91.1, 11231.0], [91.2, 11231.0], [91.3, 11231.0], [91.4, 11231.0], [91.5, 11246.0], [91.6, 11246.0], [91.7, 11261.0], [91.8, 11296.0], [91.9, 11296.0], [92.0, 11301.0], [92.1, 11301.0], [92.2, 11368.0], [92.3, 11368.0], [92.4, 11406.0], [92.5, 11406.0], [92.6, 11499.0], [92.7, 11499.0], [92.8, 11514.0], [92.9, 11514.0], [93.0, 11541.0], [93.1, 11541.0], [93.2, 11545.0], [93.3, 11545.0], [93.4, 11557.0], [93.5, 11557.0], [93.6, 11642.0], [93.7, 11642.0], [93.8, 11648.0], [93.9, 11648.0], [94.0, 11709.0], [94.1, 11709.0], [94.2, 11717.0], [94.3, 11717.0], [94.4, 11727.0], [94.5, 11727.0], [94.6, 11866.0], [94.7, 11866.0], [94.8, 11869.0], [94.9, 11869.0], [95.0, 11870.0], [95.1, 11870.0], [95.2, 11872.0], [95.3, 11872.0], [95.4, 11911.0], [95.5, 11911.0], [95.6, 11954.0], [95.7, 11954.0], [95.8, 11963.0], [95.9, 11964.0], [96.0, 11964.0], [96.1, 11991.0], [96.2, 11991.0], [96.3, 11998.0], [96.4, 11998.0], [96.5, 12000.0], [96.6, 12000.0], [96.7, 12044.0], [96.8, 12044.0], [96.9, 12050.0], [97.0, 12050.0], [97.1, 12056.0], [97.2, 12056.0], [97.3, 12130.0], [97.4, 12130.0], [97.5, 12191.0], [97.6, 12191.0], [97.7, 12304.0], [97.8, 12304.0], [97.9, 12324.0], [98.0, 12324.0], [98.1, 12376.0], [98.2, 12376.0], [98.3, 12504.0], [98.4, 12504.0], [98.5, 12761.0], [98.6, 12761.0], [98.7, 12767.0], [98.8, 12767.0], [98.9, 12881.0], [99.0, 12881.0], [99.1, 12954.0], [99.2, 12954.0], [99.3, 12980.0], [99.4, 12980.0], [99.5, 13008.0], [99.6, 13008.0], [99.7, 13041.0], [99.8, 13041.0], [99.9, 13055.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 97.0, "series": [{"data": [[4500.0, 2.0], [4900.0, 2.0], [5000.0, 1.0], [5100.0, 2.0], [5300.0, 7.0], [5200.0, 2.0], [5500.0, 5.0], [5400.0, 15.0], [5600.0, 3.0], [5700.0, 23.0], [5800.0, 4.0], [5900.0, 14.0], [6000.0, 22.0], [6100.0, 28.0], [6200.0, 36.0], [6300.0, 51.0], [6400.0, 26.0], [6500.0, 37.0], [6600.0, 20.0], [6700.0, 11.0], [6800.0, 3.0], [6900.0, 2.0], [7100.0, 5.0], [7000.0, 2.0], [7200.0, 1.0], [7300.0, 5.0], [7400.0, 2.0], [7800.0, 1.0], [7700.0, 4.0], [8000.0, 5.0], [8100.0, 5.0], [8200.0, 4.0], [8400.0, 5.0], [8300.0, 7.0], [8500.0, 4.0], [8600.0, 7.0], [8700.0, 6.0], [8900.0, 9.0], [9000.0, 9.0], [8800.0, 5.0], [9100.0, 4.0], [9200.0, 5.0], [9400.0, 6.0], [9300.0, 5.0], [9500.0, 6.0], [9600.0, 5.0], [9700.0, 5.0], [9800.0, 5.0], [9900.0, 9.0], [10000.0, 3.0], [10200.0, 4.0], [10100.0, 13.0], [10300.0, 6.0], [10400.0, 1.0], [10500.0, 2.0], [10600.0, 6.0], [10700.0, 3.0], [10800.0, 1.0], [10900.0, 6.0], [11000.0, 1.0], [11100.0, 1.0], [11600.0, 3.0], [11500.0, 8.0], [12100.0, 1.0], [12200.0, 1.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[600.0, 97.0], [700.0, 67.0], [800.0, 86.0], [900.0, 67.0], [1000.0, 36.0], [1100.0, 11.0], [300.0, 18.0], [1200.0, 3.0], [1300.0, 2.0], [1500.0, 1.0], [6100.0, 1.0], [6200.0, 1.0], [400.0, 21.0], [1600.0, 6.0], [6400.0, 3.0], [6500.0, 1.0], [6600.0, 2.0], [1700.0, 7.0], [6700.0, 1.0], [1800.0, 6.0], [1900.0, 3.0], [500.0, 69.0], [2000.0, 3.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[5900.0, 3.0], [6100.0, 4.0], [6000.0, 3.0], [6200.0, 6.0], [6300.0, 3.0], [6500.0, 17.0], [6400.0, 11.0], [6600.0, 19.0], [6900.0, 35.0], [6700.0, 26.0], [6800.0, 14.0], [7000.0, 35.0], [7100.0, 34.0], [7200.0, 34.0], [7300.0, 26.0], [7400.0, 19.0], [7500.0, 12.0], [7600.0, 3.0], [7800.0, 3.0], [7900.0, 6.0], [7700.0, 1.0], [8100.0, 2.0], [8000.0, 4.0], [8300.0, 2.0], [8500.0, 3.0], [8700.0, 1.0], [8600.0, 4.0], [9200.0, 11.0], [9000.0, 2.0], [8800.0, 5.0], [9100.0, 3.0], [8900.0, 1.0], [9300.0, 6.0], [9400.0, 4.0], [9600.0, 8.0], [9500.0, 4.0], [9800.0, 6.0], [9900.0, 7.0], [10000.0, 12.0], [10100.0, 6.0], [10200.0, 4.0], [10300.0, 5.0], [10400.0, 10.0], [10500.0, 7.0], [10600.0, 7.0], [10700.0, 5.0], [10800.0, 3.0], [11000.0, 4.0], [10900.0, 6.0], [11100.0, 7.0], [11200.0, 8.0], [11300.0, 2.0], [11500.0, 4.0], [11400.0, 2.0], [11700.0, 3.0], [11600.0, 2.0], [11800.0, 4.0], [12000.0, 4.0], [11900.0, 6.0], [12100.0, 2.0], [12300.0, 3.0], [12500.0, 1.0], [12700.0, 2.0], [13000.0, 3.0], [12900.0, 2.0], [12800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 13000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 39.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1059.0, "series": [{"data": [[0.0, 39.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 438.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1059.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 259.0332031249998, "minX": 1.56871884E12, "maxY": 259.0332031249998, "series": [{"data": [[1.56871884E12, 259.0332031249998]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56871884E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 342.0, "minX": 1.0, "maxY": 13055.0, "series": [{"data": [[2.0, 12199.0], [3.0, 6350.0], [4.0, 6309.0], [5.0, 6318.0], [6.0, 6383.0], [7.0, 6290.0], [8.0, 6259.0], [9.0, 11532.0], [10.0, 11557.0], [11.0, 11556.0], [12.0, 11554.0], [14.0, 11584.0], [15.0, 11572.0], [16.0, 11572.0], [17.0, 11610.0], [18.0, 11550.0], [19.0, 11608.0], [20.0, 10148.0], [23.0, 9158.0], [25.0, 10989.5], [26.0, 5378.0], [27.0, 5381.0], [28.0, 10944.0], [29.0, 10999.0], [30.0, 10926.0], [31.0, 10922.0], [33.0, 10757.0], [32.0, 10326.0], [35.0, 10707.0], [34.0, 10713.0], [37.0, 10689.0], [36.0, 10691.0], [39.0, 10832.0], [38.0, 10101.0], [41.0, 10657.0], [43.0, 10685.0], [42.0, 10657.5], [45.0, 10277.0], [47.0, 10395.0], [46.0, 10571.5], [48.0, 10427.0], [51.0, 10362.0], [53.0, 10285.0], [54.0, 9930.5], [57.0, 10107.0], [56.0, 9938.0], [59.0, 10021.0], [61.0, 10167.0], [60.0, 10173.5], [63.0, 10093.5], [66.0, 10153.5], [64.0, 9924.0], [71.0, 9600.5], [69.0, 10139.0], [68.0, 10122.0], [75.0, 10125.0], [74.0, 9321.5], [73.0, 10227.0], [79.0, 9440.0], [77.0, 9970.0], [76.0, 9574.0], [82.0, 9481.0], [81.0, 9853.0], [87.0, 9941.0], [86.0, 9307.0], [85.0, 9776.666666666666], [90.0, 9864.0], [89.0, 9929.0], [88.0, 9266.0], [94.0, 9106.0], [93.0, 8921.0], [92.0, 9332.0], [98.0, 9758.0], [102.0, 9334.5], [101.0, 9452.666666666666], [106.0, 9230.0], [111.0, 9757.0], [110.0, 9837.0], [109.0, 8815.0], [113.0, 9263.0], [112.0, 9625.0], [119.0, 9638.6], [118.0, 9533.0], [123.0, 9460.0], [122.0, 9520.0], [121.0, 9556.0], [125.0, 8601.0], [124.0, 9491.0], [135.0, 8056.0], [134.0, 8667.5], [132.0, 8934.0], [131.0, 9280.0], [130.0, 9428.0], [129.0, 8583.0], [128.0, 8853.333333333334], [143.0, 8753.0], [142.0, 8935.0], [140.0, 9141.666666666666], [137.0, 9152.0], [151.0, 8622.5], [149.0, 8769.0], [148.0, 8998.5], [146.0, 9063.0], [145.0, 8931.0], [159.0, 8692.0], [158.0, 8687.5], [157.0, 8690.0], [155.0, 8651.0], [167.0, 8156.0], [166.0, 8509.0], [165.0, 8446.0], [164.0, 8199.0], [163.0, 8707.666666666666], [160.0, 8440.0], [175.0, 8139.0], [174.0, 8376.0], [173.0, 8297.666666666666], [170.0, 8477.0], [169.0, 8392.0], [168.0, 8384.0], [183.0, 7722.5], [182.0, 8401.0], [181.0, 8233.5], [178.0, 8450.0], [177.0, 8134.0], [176.0, 8383.0], [191.0, 7814.0], [190.0, 7616.5], [188.0, 8077.0], [187.0, 8296.5], [185.0, 7878.5], [199.0, 6323.0], [198.0, 7362.0], [197.0, 6197.0], [196.0, 7345.0], [195.0, 7365.0], [194.0, 7349.0], [193.0, 7388.0], [192.0, 7451.0], [207.0, 7182.0], [205.0, 6856.0], [204.0, 7098.0], [203.0, 7224.0], [202.0, 6832.0], [201.0, 7016.0], [200.0, 6946.0], [215.0, 6716.0], [214.0, 6383.0], [213.0, 7127.0], [212.0, 6886.0], [211.0, 7126.0], [210.0, 7151.0], [209.0, 6967.0], [208.0, 6951.0], [222.0, 6765.0], [221.0, 6353.0], [220.0, 6489.0], [219.0, 6783.0], [218.0, 6313.0], [217.0, 6709.0], [216.0, 6788.0], [229.0, 6286.0], [239.0, 5645.0], [238.0, 6736.0], [237.0, 6305.0], [236.0, 6380.0], [235.0, 6618.666666666667], [233.0, 6450.0], [232.0, 6569.0], [247.0, 6729.0], [246.0, 5641.0], [245.0, 6413.666666666667], [243.0, 6285.0], [242.0, 6550.5], [240.0, 6312.0], [254.0, 6487.0], [252.0, 6299.5], [250.0, 6623.0], [248.0, 6716.0], [271.0, 6345.5], [269.0, 6657.0], [267.0, 6565.0], [265.0, 6036.5], [263.0, 6052.5], [264.0, 6254.0], [261.0, 5435.0], [259.0, 6540.333333333333], [257.0, 6156.5], [276.0, 6640.0], [275.0, 6550.0], [274.0, 6664.0], [273.0, 6095.0], [303.0, 6378.5], [300.0, 6312.0], [298.0, 6452.0], [297.0, 6611.0], [296.0, 6424.5], [294.0, 6321.0], [293.0, 6582.0], [292.0, 6553.0], [291.0, 6395.0], [288.0, 6175.0], [318.0, 6548.0], [317.0, 6569.0], [315.0, 6344.333333333333], [312.0, 6357.5], [309.0, 6471.0], [306.0, 6345.0], [335.0, 6506.0], [332.0, 6344.333333333333], [330.0, 6486.0], [329.0, 6303.0], [327.0, 6326.666666666667], [326.0, 6557.0], [324.0, 6560.0], [323.0, 6366.25], [321.0, 6555.75], [348.0, 6485.0], [350.0, 6285.0], [351.0, 6392.666666666667], [349.0, 5985.5], [347.0, 6575.0], [345.0, 6485.5], [343.0, 6175.0], [336.0, 6514.5], [338.0, 6459.0], [337.0, 6368.0], [341.0, 6528.0], [340.0, 6517.5], [364.0, 6252.75], [367.0, 5245.0], [366.0, 6034.0], [365.0, 6258.0], [362.0, 6261.0], [358.0, 6107.0], [353.0, 6326.5], [357.0, 6169.0], [356.0, 6121.0], [355.0, 6129.0], [354.0, 5459.0], [381.0, 6440.0], [383.0, 6417.0], [380.0, 6219.0], [379.0, 6356.0], [378.0, 6468.0], [377.0, 6309.5], [375.0, 6347.0], [374.0, 6253.666666666667], [371.0, 6423.0], [370.0, 6284.0], [369.0, 5249.0], [368.0, 6088.0], [399.0, 6385.0], [398.0, 6329.5], [396.0, 6266.5], [394.0, 6325.0], [391.0, 6407.0], [390.0, 6161.666666666667], [387.0, 6017.0], [385.0, 6337.0], [413.0, 6361.0], [415.0, 6352.0], [412.0, 5968.0], [403.0, 6338.0], [402.0, 6362.0], [401.0, 6343.5], [411.0, 5996.0], [410.0, 5166.0], [409.0, 6362.0], [408.0, 6408.0], [407.0, 6037.0], [406.0, 6140.0], [405.0, 6279.0], [430.0, 6354.0], [431.0, 6292.0], [429.0, 5937.0], [428.0, 6376.0], [427.0, 6006.0], [426.0, 5955.0], [425.0, 6326.0], [424.0, 5944.0], [423.0, 5991.0], [417.0, 6030.0], [416.0, 6355.0], [419.0, 6358.0], [418.0, 5308.0], [422.0, 5130.0], [421.0, 6028.0], [420.0, 6316.0], [446.0, 6065.0], [447.0, 5872.0], [445.0, 6168.0], [434.0, 6253.0], [433.0, 5968.0], [432.0, 6241.0], [443.0, 5515.5], [441.0, 6273.0], [440.0, 5881.0], [439.0, 6093.0], [438.0, 6021.0], [436.0, 6123.0], [452.0, 6150.5], [450.0, 6141.0], [449.0, 6299.0], [448.0, 6238.0], [479.0, 5765.5], [477.0, 5681.5], [474.0, 5878.0], [473.0, 5975.4], [470.0, 5881.599999999999], [471.0, 6078.0], [495.0, 5452.0], [487.0, 5655.0], [485.0, 5770.0], [484.0, 5410.0], [483.0, 5490.0], [482.0, 4582.0], [481.0, 5533.666666666667], [507.0, 5366.0], [505.0, 5358.0], [500.0, 5750.0], [496.0, 5693.0], [511.0, 5747.0], [512.0, 5621.687500000001], [1.0, 12203.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[259.03320312500006, 7408.603515624997]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[2.0, 856.0], [3.0, 6691.0], [4.0, 6452.0], [5.0, 6662.0], [6.0, 6571.0], [7.0, 6477.0], [8.0, 6749.0], [9.0, 971.0], [10.0, 434.0], [11.0, 509.0], [12.0, 430.0], [14.0, 416.0], [15.0, 804.0], [16.0, 690.0], [17.0, 712.0], [18.0, 378.0], [19.0, 344.0], [20.0, 2043.0], [23.0, 2712.0], [25.0, 965.5], [26.0, 6136.0], [27.0, 6490.0], [28.0, 922.0], [29.0, 870.0], [30.0, 573.0], [31.0, 948.0], [33.0, 960.0], [32.0, 878.0], [35.0, 589.0], [34.0, 1014.0], [37.0, 1019.0], [36.0, 950.0], [39.0, 574.0], [38.0, 921.0], [41.0, 900.0], [43.0, 856.0], [42.0, 799.0], [45.0, 713.0], [47.0, 905.0], [46.0, 682.0], [48.0, 681.0], [51.0, 803.0], [53.0, 876.0], [54.0, 674.0], [57.0, 743.0], [56.0, 528.0], [59.0, 667.0], [61.0, 790.0], [60.0, 906.0], [63.0, 857.0], [66.0, 1014.0], [64.0, 668.0], [71.0, 1313.0], [69.0, 814.0], [68.0, 833.0], [75.0, 817.0], [74.0, 1250.0], [73.0, 771.0], [79.0, 1199.0], [77.0, 1113.0], [76.0, 877.0], [82.0, 921.0], [81.0, 887.5], [87.0, 860.0], [86.0, 914.0], [85.0, 855.0], [90.0, 837.0], [89.0, 825.0], [88.0, 901.0], [94.0, 898.0], [93.0, 978.0], [92.0, 951.5], [98.0, 682.0], [102.0, 938.75], [101.0, 922.3333333333334], [106.0, 791.5], [111.0, 349.0], [110.0, 344.0], [109.0, 1220.0], [113.0, 676.0], [112.0, 947.0], [119.0, 726.2], [118.0, 963.0], [123.0, 569.0], [122.0, 877.0], [121.0, 883.5], [125.0, 1032.0], [124.0, 830.0], [135.0, 1852.0], [134.0, 1234.5], [132.0, 728.0], [131.0, 932.0], [130.0, 601.0], [129.0, 1035.0], [128.0, 968.3333333333334], [143.0, 728.0], [142.0, 824.0], [140.0, 736.3333333333334], [137.0, 915.0], [151.0, 940.0], [149.0, 697.0], [148.0, 785.0], [146.0, 880.0], [145.0, 732.5], [159.0, 681.0], [158.0, 625.5], [157.0, 695.0], [155.0, 734.75], [167.0, 658.0], [166.0, 671.0], [165.0, 768.0], [164.0, 690.0], [163.0, 859.6666666666666], [160.0, 676.0], [175.0, 683.0], [174.0, 907.0], [173.0, 785.3333333333334], [170.0, 492.0], [169.0, 913.0], [168.0, 907.0], [183.0, 900.5], [182.0, 666.0], [181.0, 724.5], [178.0, 824.0], [177.0, 681.0], [176.0, 914.0], [191.0, 728.0], [190.0, 821.0], [188.0, 707.0], [187.0, 877.5], [185.0, 706.0], [199.0, 1580.0], [198.0, 342.0], [197.0, 1982.0], [196.0, 1025.0], [195.0, 666.0], [194.0, 742.0], [193.0, 568.0], [192.0, 604.0], [207.0, 804.0], [205.0, 1120.0], [204.0, 1016.0], [203.0, 808.0], [202.0, 727.0], [201.0, 682.0], [200.0, 693.0], [215.0, 664.0], [214.0, 710.0], [213.0, 720.0], [212.0, 1062.0], [211.0, 715.0], [210.0, 703.0], [209.0, 973.0], [208.0, 527.0], [222.0, 735.0], [221.0, 581.0], [220.0, 1062.0], [219.0, 545.0], [218.0, 718.0], [217.0, 662.0], [216.0, 438.0], [229.0, 540.0], [239.0, 1883.0], [238.0, 542.0], [237.0, 582.0], [236.0, 1131.0], [235.0, 739.6666666666666], [233.0, 1053.0], [232.0, 609.0], [247.0, 440.0], [246.0, 1879.0], [245.0, 698.3333333333334], [243.0, 528.0], [242.0, 792.5], [240.0, 603.0], [254.0, 750.0], [252.0, 606.0], [250.0, 864.6666666666666], [248.0, 558.0], [271.0, 857.0], [269.0, 794.0], [267.0, 813.5], [265.0, 1331.0], [263.0, 1046.0], [264.0, 541.0], [261.0, 1608.0], [259.0, 623.6666666666666], [257.0, 1124.0], [276.0, 697.0], [275.0, 902.0], [274.0, 458.0], [273.0, 966.0], [303.0, 816.5], [300.0, 522.3333333333334], [298.0, 887.0], [297.0, 343.0], [296.0, 706.0], [294.0, 1063.0], [293.0, 420.0], [292.0, 788.0], [291.0, 584.5], [288.0, 607.0], [318.0, 827.0], [317.0, 471.0], [315.0, 734.0], [312.0, 813.75], [309.0, 776.8], [306.0, 552.0], [335.0, 864.0], [332.0, 705.3333333333334], [330.0, 925.0], [329.0, 681.0], [327.0, 564.0], [326.0, 575.0], [324.0, 710.0], [323.0, 597.75], [321.0, 517.25], [348.0, 853.0], [350.0, 886.0], [351.0, 755.6666666666666], [349.0, 1306.0], [347.0, 714.0], [345.0, 708.0], [343.0, 772.0], [336.0, 623.5], [338.0, 876.0], [337.0, 987.0], [341.0, 606.0], [340.0, 615.0], [364.0, 829.25], [367.0, 1706.0], [366.0, 752.0], [365.0, 1020.0], [362.0, 547.0], [358.0, 610.0], [353.0, 621.0], [357.0, 665.0], [356.0, 533.0], [355.0, 582.0], [354.0, 1358.0], [381.0, 547.0], [383.0, 672.0], [380.0, 1009.0], [379.0, 879.0], [378.0, 345.0], [377.0, 955.0], [375.0, 636.0], [374.0, 808.0], [371.0, 544.0], [370.0, 987.0], [369.0, 1682.0], [368.0, 629.0], [399.0, 604.0], [398.0, 835.0], [396.0, 831.0], [394.0, 695.0], [391.0, 715.0], [390.0, 883.0], [387.0, 695.0], [385.0, 683.0], [413.0, 699.0], [415.0, 754.5], [412.0, 517.0], [403.0, 635.0], [402.0, 843.0], [401.0, 542.0], [411.0, 595.0], [410.0, 1608.0], [409.0, 694.0], [408.0, 652.0], [407.0, 664.0], [406.0, 1059.0], [405.0, 775.0], [430.0, 540.0], [431.0, 867.0], [429.0, 636.0], [428.0, 417.0], [427.0, 695.0], [426.0, 591.0], [425.0, 847.0], [424.0, 532.0], [423.0, 658.0], [417.0, 700.0], [416.0, 765.0], [419.0, 748.0], [418.0, 1880.0], [422.0, 1937.0], [421.0, 1127.0], [420.0, 898.0], [446.0, 1022.0], [447.0, 531.0], [445.0, 751.5], [434.0, 917.0], [433.0, 663.0], [432.0, 877.0], [443.0, 1484.5], [441.0, 844.0], [440.0, 530.0], [439.0, 849.0], [438.0, 1004.0], [436.0, 893.5], [452.0, 764.0], [450.0, 911.0], [449.0, 708.0], [448.0, 555.0], [479.0, 826.5], [477.0, 772.5], [474.0, 1022.0], [473.0, 784.6], [470.0, 795.5333333333333], [471.0, 909.0], [495.0, 680.0], [487.0, 859.0], [485.0, 711.0], [484.0, 610.0], [483.0, 1098.0], [482.0, 1703.0], [481.0, 663.3333333333334], [507.0, 1038.75], [505.0, 553.0], [500.0, 701.0], [496.0, 864.0], [511.0, 839.0], [512.0, 738.5625], [1.0, 678.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[259.03320312500006, 911.1093750000005]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[2.0, 13055.0], [3.0, 13041.0], [4.0, 12761.0], [5.0, 12980.0], [6.0, 12954.0], [7.0, 12767.0], [8.0, 13008.0], [9.0, 12504.0], [10.0, 12056.0], [11.0, 12130.0], [12.0, 12050.0], [14.0, 12003.5], [15.0, 12376.0], [16.0, 12304.0], [17.0, 12324.0], [18.0, 11991.0], [19.0, 11954.0], [20.0, 12191.0], [23.0, 11870.0], [25.0, 11955.5], [26.0, 11514.0], [27.0, 11872.0], [28.0, 11866.0], [29.0, 11869.0], [30.0, 11499.0], [31.0, 11870.0], [33.0, 11717.0], [32.0, 11204.0], [35.0, 11296.0], [34.0, 11727.0], [37.0, 11709.0], [36.0, 11642.0], [39.0, 11406.0], [38.0, 11022.0], [41.0, 11557.0], [43.0, 11541.0], [42.0, 11456.5], [45.0, 10990.0], [47.0, 11301.0], [46.0, 11253.5], [48.0, 11108.0], [51.0, 11165.0], [53.0, 11161.0], [54.0, 10604.5], [57.0, 10850.0], [56.0, 10466.0], [59.0, 10689.0], [61.0, 10958.0], [60.0, 11080.5], [63.0, 10951.5], [66.0, 11167.5], [64.0, 10592.0], [71.0, 10913.5], [69.0, 10954.0], [68.0, 10955.0], [75.0, 10942.0], [74.0, 10571.5], [73.0, 10999.5], [79.0, 10639.5], [77.0, 11083.0], [76.0, 10452.0], [82.0, 10402.0], [81.0, 10740.5], [87.0, 10801.0], [86.0, 10221.0], [85.0, 10631.666666666666], [90.0, 10701.0], [89.0, 10754.0], [88.0, 10168.0], [94.0, 10005.0], [93.0, 9899.0], [92.0, 10284.0], [98.0, 10440.0], [102.0, 10273.25], [101.0, 10375.0], [106.0, 10021.5], [111.0, 10171.0], [110.0, 10182.0], [109.0, 10035.0], [113.0, 9939.0], [112.0, 10572.0], [119.0, 10365.6], [118.0, 10496.0], [123.0, 10029.0], [122.0, 10397.0], [121.0, 10440.0], [125.0, 9633.0], [124.0, 10321.0], [135.0, 9908.0], [134.0, 9902.0], [132.0, 9663.0], [131.0, 10213.0], [130.0, 10029.0], [129.0, 9618.0], [128.0, 9821.666666666666], [143.0, 9482.0], [142.0, 9759.0], [140.0, 9878.0], [137.0, 10067.0], [151.0, 9563.0], [149.0, 9466.0], [148.0, 9783.5], [146.0, 9943.0], [145.0, 9664.0], [159.0, 9374.0], [158.0, 9313.0], [157.0, 9385.0], [155.0, 9386.25], [167.0, 8815.0], [166.0, 9180.0], [165.0, 9214.0], [164.0, 8890.0], [163.0, 9567.333333333334], [160.0, 9117.0], [175.0, 8822.0], [174.0, 9283.0], [173.0, 9083.666666666666], [170.0, 8969.0], [169.0, 9306.0], [168.0, 9291.0], [183.0, 8623.5], [182.0, 9067.0], [181.0, 8958.0], [178.0, 9274.0], [177.0, 8815.0], [176.0, 9298.0], [191.0, 8543.0], [190.0, 8437.5], [188.0, 8785.0], [187.0, 9174.5], [185.0, 8584.5], [199.0, 7904.0], [198.0, 7768.0], [197.0, 8179.0], [196.0, 8371.0], [195.0, 8031.0], [194.0, 8091.0], [193.0, 7956.0], [192.0, 8055.0], [207.0, 7986.0], [205.0, 7976.0], [204.0, 8114.0], [203.0, 8032.0], [202.0, 7559.0], [201.0, 7698.0], [200.0, 7639.0], [215.0, 7380.0], [214.0, 7093.0], [213.0, 7847.0], [212.0, 7948.0], [211.0, 7841.0], [210.0, 7854.0], [209.0, 7940.0], [208.0, 7478.0], [222.0, 7500.0], [221.0, 6935.0], [220.0, 7552.0], [219.0, 7328.0], [218.0, 7031.0], [217.0, 7372.0], [216.0, 7226.0], [229.0, 6826.0], [239.0, 7529.0], [238.0, 7284.0], [237.0, 6887.0], [236.0, 7511.0], [235.0, 7359.333333333333], [233.0, 7503.0], [232.0, 7210.5], [247.0, 7174.0], [246.0, 7520.0], [245.0, 7112.0], [243.0, 6813.0], [242.0, 7344.5], [240.0, 6916.0], [254.0, 7238.0], [252.0, 6905.5], [250.0, 7487.666666666667], [248.0, 7274.0], [271.0, 7202.5], [269.0, 7451.0], [267.0, 7378.5], [265.0, 7367.5], [263.0, 7098.5], [264.0, 6795.0], [261.0, 7044.0], [259.0, 7186.0], [257.0, 7281.333333333333], [276.0, 7337.0], [275.0, 7452.0], [274.0, 7122.0], [273.0, 7061.5], [303.0, 7196.5], [300.0, 6834.666666666667], [298.0, 7339.0], [297.0, 6958.0], [296.0, 7130.5], [294.0, 7384.0], [293.0, 7003.0], [292.0, 7407.0], [291.0, 6980.0], [288.0, 6782.0], [318.0, 7438.0], [317.0, 7040.0], [315.0, 7078.666666666667], [312.0, 7171.5], [309.0, 7248.6], [306.0, 6897.0], [335.0, 7371.0], [332.0, 7050.0], [330.0, 7411.0], [329.0, 6985.0], [327.0, 6891.0], [326.0, 7132.0], [324.0, 7270.0], [323.0, 6971.5], [321.0, 7073.0], [348.0, 7338.0], [350.0, 7171.0], [351.0, 7148.333333333333], [349.0, 7291.5], [347.0, 7289.0], [345.0, 7193.5], [343.0, 6947.0], [336.0, 7169.0], [338.0, 7335.0], [337.0, 7355.0], [341.0, 7134.0], [340.0, 7133.5], [364.0, 7082.25], [367.0, 6951.0], [366.0, 6786.0], [365.0, 7279.0], [362.0, 6808.5], [358.0, 6717.0], [353.0, 6948.0], [357.0, 6835.0], [356.0, 6654.0], [355.0, 6712.0], [354.0, 6817.0], [381.0, 6987.0], [383.0, 7089.0], [380.0, 7228.0], [379.0, 7235.0], [378.0, 6818.0], [377.0, 7264.5], [375.0, 6983.0], [374.0, 7073.0], [371.0, 6968.0], [370.0, 7272.0], [369.0, 6931.0], [368.0, 6717.0], [399.0, 6989.0], [398.0, 7164.5], [396.0, 7097.5], [394.0, 7020.0], [391.0, 7122.0], [390.0, 7045.0], [387.0, 6712.5], [385.0, 7022.0], [413.0, 7061.0], [415.0, 7106.5], [412.0, 6485.0], [403.0, 6973.0], [402.0, 7205.333333333333], [401.0, 6917.0], [411.0, 6591.0], [410.0, 6774.0], [409.0, 7120.0], [408.0, 7060.0], [407.0, 6701.0], [406.0, 7200.0], [405.0, 7054.0], [430.0, 6894.0], [431.0, 7160.0], [429.0, 6573.0], [428.0, 6795.0], [427.0, 6703.0], [426.0, 6546.0], [425.0, 7174.0], [424.0, 6476.0], [423.0, 6650.0], [417.0, 6731.0], [416.0, 7120.0], [419.0, 7106.0], [418.0, 7188.0], [422.0, 7068.0], [421.0, 7156.0], [420.0, 7214.0], [446.0, 7088.0], [447.0, 6403.0], [445.0, 6919.5], [434.0, 7170.0], [433.0, 6631.0], [432.0, 7118.0], [443.0, 7000.5], [441.0, 7117.0], [440.0, 6411.0], [439.0, 6943.0], [438.0, 7025.5], [436.0, 7017.0], [452.0, 6914.5], [450.0, 7053.0], [449.0, 7007.0], [448.0, 6793.0], [479.0, 6592.5], [477.0, 6454.5], [474.0, 6900.0], [473.0, 6760.4], [470.0, 6682.6], [471.0, 6988.0], [495.0, 6132.0], [487.0, 6514.0], [485.0, 6481.0], [484.0, 6021.0], [483.0, 6589.0], [482.0, 6285.0], [481.0, 6197.333333333333], [507.0, 6404.75], [505.0, 5912.0], [500.0, 6451.0], [496.0, 6557.0], [511.0, 6586.0], [512.0, 6360.5625], [1.0, 12881.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[259.03320312500006, 8322.041015624998]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 512.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3959.4666666666667, "minX": 1.56871884E12, "maxY": 23415.466666666667, "series": [{"data": [[1.56871884E12, 23415.466666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.56871884E12, 3959.4666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56871884E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 911.1093750000005, "minX": 1.56871884E12, "maxY": 8322.041015624998, "series": [{"data": [[1.56871884E12, 7408.603515624997]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.56871884E12, 911.1093750000005]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.56871884E12, 8322.041015624998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56871884E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 908.2714843749993, "minX": 1.56871884E12, "maxY": 7408.523437500005, "series": [{"data": [[1.56871884E12, 7408.523437500005]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.56871884E12, 908.2714843749994]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.56871884E12, 908.2714843749993]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56871884E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 565.5722656250001, "minX": 1.56871884E12, "maxY": 6011.716796874997, "series": [{"data": [[1.56871884E12, 6011.716796874997]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.56871884E12, 565.5722656250001]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.56871884E12, 565.5722656250001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56871884E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 338.0, "minX": 1.56871884E12, "maxY": 13055.0, "series": [{"data": [[1.56871884E12, 13055.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.56871884E12, 338.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.56871884E12, 10177.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.56871884E12, 12168.429999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.56871884E12, 10999.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56871884E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 721.0, "minX": 16.0, "maxY": 12482.0, "series": [{"data": [[32.0, 5981.0], [16.0, 12482.0], [567.0, 6589.0], [146.0, 10201.5], [42.0, 1616.0], [46.0, 7314.0], [102.0, 9463.0], [461.0, 721.0], [62.0, 9293.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 567.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 710.0, "minX": 16.0, "maxY": 6417.5, "series": [{"data": [[32.0, 5328.5], [16.0, 6417.5], [567.0, 4917.0], [146.0, 5254.0], [42.0, 1616.0], [46.0, 4089.5], [102.0, 4954.0], [461.0, 710.0], [62.0, 5758.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 567.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.6, "minX": 1.56871884E12, "maxY": 25.6, "series": [{"data": [[1.56871884E12, 25.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56871884E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.533333333333333, "minX": 1.56871884E12, "maxY": 17.066666666666666, "series": [{"data": [[1.56871884E12, 17.066666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.56871884E12, 8.533333333333333]], "isOverall": false, "label": "301", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56871884E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.533333333333333, "minX": 1.56871884E12, "maxY": 8.533333333333333, "series": [{"data": [[1.56871884E12, 8.533333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.56871884E12, 8.533333333333333]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.56871884E12, 8.533333333333333]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56871884E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.6, "minX": 1.56871884E12, "maxY": 25.6, "series": [{"data": [[1.56871884E12, 25.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56871884E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

