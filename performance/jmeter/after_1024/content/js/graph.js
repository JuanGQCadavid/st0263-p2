/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 193.0, "minX": 0.0, "maxY": 7374.0, "series": [{"data": [[0.0, 193.0], [0.1, 194.0], [0.2, 194.0], [0.3, 194.0], [0.4, 197.0], [0.5, 197.0], [0.6, 200.0], [0.7, 201.0], [0.8, 201.0], [0.9, 202.0], [1.0, 204.0], [1.1, 205.0], [1.2, 206.0], [1.3, 208.0], [1.4, 208.0], [1.5, 209.0], [1.6, 209.0], [1.7, 209.0], [1.8, 210.0], [1.9, 210.0], [2.0, 211.0], [2.1, 211.0], [2.2, 211.0], [2.3, 212.0], [2.4, 213.0], [2.5, 213.0], [2.6, 213.0], [2.7, 214.0], [2.8, 214.0], [2.9, 214.0], [3.0, 215.0], [3.1, 216.0], [3.2, 216.0], [3.3, 216.0], [3.4, 217.0], [3.5, 217.0], [3.6, 218.0], [3.7, 218.0], [3.8, 218.0], [3.9, 218.0], [4.0, 219.0], [4.1, 220.0], [4.2, 221.0], [4.3, 222.0], [4.4, 222.0], [4.5, 223.0], [4.6, 225.0], [4.7, 226.0], [4.8, 226.0], [4.9, 228.0], [5.0, 229.0], [5.1, 229.0], [5.2, 232.0], [5.3, 232.0], [5.4, 232.0], [5.5, 233.0], [5.6, 233.0], [5.7, 233.0], [5.8, 234.0], [5.9, 235.0], [6.0, 235.0], [6.1, 235.0], [6.2, 236.0], [6.3, 236.0], [6.4, 236.0], [6.5, 236.0], [6.6, 236.0], [6.7, 236.0], [6.8, 236.0], [6.9, 236.0], [7.0, 237.0], [7.1, 237.0], [7.2, 237.0], [7.3, 237.0], [7.4, 238.0], [7.5, 239.0], [7.6, 239.0], [7.7, 239.0], [7.8, 240.0], [7.9, 240.0], [8.0, 240.0], [8.1, 241.0], [8.2, 241.0], [8.3, 242.0], [8.4, 243.0], [8.5, 244.0], [8.6, 244.0], [8.7, 245.0], [8.8, 245.0], [8.9, 245.0], [9.0, 246.0], [9.1, 246.0], [9.2, 246.0], [9.3, 246.0], [9.4, 247.0], [9.5, 247.0], [9.6, 248.0], [9.7, 248.0], [9.8, 249.0], [9.9, 250.0], [10.0, 251.0], [10.1, 252.0], [10.2, 253.0], [10.3, 253.0], [10.4, 253.0], [10.5, 254.0], [10.6, 255.0], [10.7, 255.0], [10.8, 256.0], [10.9, 256.0], [11.0, 256.0], [11.1, 256.0], [11.2, 256.0], [11.3, 256.0], [11.4, 256.0], [11.5, 257.0], [11.6, 257.0], [11.7, 258.0], [11.8, 258.0], [11.9, 258.0], [12.0, 258.0], [12.1, 259.0], [12.2, 259.0], [12.3, 259.0], [12.4, 260.0], [12.5, 261.0], [12.6, 261.0], [12.7, 262.0], [12.8, 262.0], [12.9, 262.0], [13.0, 262.0], [13.1, 262.0], [13.2, 262.0], [13.3, 263.0], [13.4, 263.0], [13.5, 263.0], [13.6, 264.0], [13.7, 264.0], [13.8, 264.0], [13.9, 264.0], [14.0, 265.0], [14.1, 266.0], [14.2, 266.0], [14.3, 266.0], [14.4, 267.0], [14.5, 267.0], [14.6, 267.0], [14.7, 267.0], [14.8, 267.0], [14.9, 268.0], [15.0, 268.0], [15.1, 269.0], [15.2, 269.0], [15.3, 270.0], [15.4, 270.0], [15.5, 270.0], [15.6, 271.0], [15.7, 271.0], [15.8, 272.0], [15.9, 273.0], [16.0, 275.0], [16.1, 275.0], [16.2, 275.0], [16.3, 275.0], [16.4, 277.0], [16.5, 277.0], [16.6, 277.0], [16.7, 277.0], [16.8, 277.0], [16.9, 278.0], [17.0, 278.0], [17.1, 278.0], [17.2, 278.0], [17.3, 278.0], [17.4, 278.0], [17.5, 278.0], [17.6, 278.0], [17.7, 279.0], [17.8, 279.0], [17.9, 280.0], [18.0, 280.0], [18.1, 280.0], [18.2, 280.0], [18.3, 280.0], [18.4, 281.0], [18.5, 281.0], [18.6, 281.0], [18.7, 281.0], [18.8, 281.0], [18.9, 282.0], [19.0, 282.0], [19.1, 284.0], [19.2, 285.0], [19.3, 285.0], [19.4, 286.0], [19.5, 286.0], [19.6, 287.0], [19.7, 287.0], [19.8, 288.0], [19.9, 288.0], [20.0, 288.0], [20.1, 289.0], [20.2, 290.0], [20.3, 291.0], [20.4, 291.0], [20.5, 291.0], [20.6, 292.0], [20.7, 292.0], [20.8, 292.0], [20.9, 294.0], [21.0, 294.0], [21.1, 295.0], [21.2, 295.0], [21.3, 296.0], [21.4, 296.0], [21.5, 296.0], [21.6, 297.0], [21.7, 297.0], [21.8, 297.0], [21.9, 299.0], [22.0, 300.0], [22.1, 300.0], [22.2, 303.0], [22.3, 305.0], [22.4, 305.0], [22.5, 307.0], [22.6, 307.0], [22.7, 307.0], [22.8, 307.0], [22.9, 308.0], [23.0, 308.0], [23.1, 308.0], [23.2, 308.0], [23.3, 308.0], [23.4, 308.0], [23.5, 308.0], [23.6, 308.0], [23.7, 309.0], [23.8, 310.0], [23.9, 310.0], [24.0, 310.0], [24.1, 310.0], [24.2, 312.0], [24.3, 313.0], [24.4, 313.0], [24.5, 314.0], [24.6, 314.0], [24.7, 315.0], [24.8, 315.0], [24.9, 315.0], [25.0, 316.0], [25.1, 316.0], [25.2, 319.0], [25.3, 319.0], [25.4, 320.0], [25.5, 320.0], [25.6, 322.0], [25.7, 322.0], [25.8, 323.0], [25.9, 323.0], [26.0, 323.0], [26.1, 323.0], [26.2, 323.0], [26.3, 324.0], [26.4, 324.0], [26.5, 324.0], [26.6, 324.0], [26.7, 326.0], [26.8, 326.0], [26.9, 326.0], [27.0, 326.0], [27.1, 327.0], [27.2, 327.0], [27.3, 327.0], [27.4, 327.0], [27.5, 327.0], [27.6, 328.0], [27.7, 328.0], [27.8, 329.0], [27.9, 329.0], [28.0, 330.0], [28.1, 330.0], [28.2, 331.0], [28.3, 331.0], [28.4, 332.0], [28.5, 332.0], [28.6, 332.0], [28.7, 333.0], [28.8, 333.0], [28.9, 333.0], [29.0, 336.0], [29.1, 337.0], [29.2, 338.0], [29.3, 338.0], [29.4, 338.0], [29.5, 341.0], [29.6, 342.0], [29.7, 355.0], [29.8, 361.0], [29.9, 368.0], [30.0, 368.0], [30.1, 370.0], [30.2, 373.0], [30.3, 374.0], [30.4, 376.0], [30.5, 382.0], [30.6, 382.0], [30.7, 382.0], [30.8, 383.0], [30.9, 384.0], [31.0, 386.0], [31.1, 387.0], [31.2, 390.0], [31.3, 392.0], [31.4, 397.0], [31.5, 397.0], [31.6, 400.0], [31.7, 414.0], [31.8, 421.0], [31.9, 453.0], [32.0, 460.0], [32.1, 483.0], [32.2, 484.0], [32.3, 485.0], [32.4, 486.0], [32.5, 487.0], [32.6, 488.0], [32.7, 489.0], [32.8, 490.0], [32.9, 490.0], [33.0, 491.0], [33.1, 491.0], [33.2, 491.0], [33.3, 492.0], [33.4, 506.0], [33.5, 507.0], [33.6, 511.0], [33.7, 511.0], [33.8, 511.0], [33.9, 512.0], [34.0, 513.0], [34.1, 536.0], [34.2, 576.0], [34.3, 579.0], [34.4, 650.0], [34.5, 650.0], [34.6, 652.0], [34.7, 724.0], [34.8, 726.0], [34.9, 728.0], [35.0, 728.0], [35.1, 728.0], [35.2, 728.0], [35.3, 729.0], [35.4, 730.0], [35.5, 730.0], [35.6, 731.0], [35.7, 731.0], [35.8, 732.0], [35.9, 732.0], [36.0, 733.0], [36.1, 733.0], [36.2, 733.0], [36.3, 734.0], [36.4, 734.0], [36.5, 735.0], [36.6, 735.0], [36.7, 735.0], [36.8, 736.0], [36.9, 736.0], [37.0, 736.0], [37.1, 737.0], [37.2, 738.0], [37.3, 738.0], [37.4, 738.0], [37.5, 740.0], [37.6, 742.0], [37.7, 744.0], [37.8, 745.0], [37.9, 747.0], [38.0, 747.0], [38.1, 748.0], [38.2, 748.0], [38.3, 749.0], [38.4, 749.0], [38.5, 749.0], [38.6, 750.0], [38.7, 751.0], [38.8, 752.0], [38.9, 752.0], [39.0, 753.0], [39.1, 754.0], [39.2, 754.0], [39.3, 755.0], [39.4, 755.0], [39.5, 755.0], [39.6, 755.0], [39.7, 756.0], [39.8, 756.0], [39.9, 756.0], [40.0, 756.0], [40.1, 756.0], [40.2, 756.0], [40.3, 757.0], [40.4, 757.0], [40.5, 757.0], [40.6, 757.0], [40.7, 758.0], [40.8, 758.0], [40.9, 758.0], [41.0, 759.0], [41.1, 759.0], [41.2, 759.0], [41.3, 759.0], [41.4, 759.0], [41.5, 759.0], [41.6, 760.0], [41.7, 760.0], [41.8, 760.0], [41.9, 761.0], [42.0, 761.0], [42.1, 761.0], [42.2, 761.0], [42.3, 762.0], [42.4, 762.0], [42.5, 762.0], [42.6, 762.0], [42.7, 763.0], [42.8, 763.0], [42.9, 763.0], [43.0, 763.0], [43.1, 763.0], [43.2, 763.0], [43.3, 763.0], [43.4, 764.0], [43.5, 765.0], [43.6, 765.0], [43.7, 766.0], [43.8, 767.0], [43.9, 768.0], [44.0, 768.0], [44.1, 769.0], [44.2, 777.0], [44.3, 784.0], [44.4, 785.0], [44.5, 786.0], [44.6, 791.0], [44.7, 792.0], [44.8, 809.0], [44.9, 810.0], [45.0, 826.0], [45.1, 826.0], [45.2, 827.0], [45.3, 829.0], [45.4, 830.0], [45.5, 844.0], [45.6, 847.0], [45.7, 851.0], [45.8, 851.0], [45.9, 861.0], [46.0, 863.0], [46.1, 864.0], [46.2, 868.0], [46.3, 868.0], [46.4, 869.0], [46.5, 869.0], [46.6, 871.0], [46.7, 873.0], [46.8, 874.0], [46.9, 875.0], [47.0, 875.0], [47.1, 875.0], [47.2, 875.0], [47.3, 876.0], [47.4, 877.0], [47.5, 880.0], [47.6, 882.0], [47.7, 882.0], [47.8, 882.0], [47.9, 902.0], [48.0, 915.0], [48.1, 917.0], [48.2, 971.0], [48.3, 989.0], [48.4, 1004.0], [48.5, 1017.0], [48.6, 1018.0], [48.7, 1020.0], [48.8, 1021.0], [48.9, 1024.0], [49.0, 1024.0], [49.1, 1027.0], [49.2, 1029.0], [49.3, 1029.0], [49.4, 1036.0], [49.5, 1037.0], [49.6, 1041.0], [49.7, 1042.0], [49.8, 1051.0], [49.9, 1060.0], [50.0, 1083.0], [50.1, 1083.0], [50.2, 1084.0], [50.3, 1084.0], [50.4, 1084.0], [50.5, 1085.0], [50.6, 1086.0], [50.7, 1086.0], [50.8, 1086.0], [50.9, 1086.0], [51.0, 1086.0], [51.1, 1086.0], [51.2, 1087.0], [51.3, 1087.0], [51.4, 1087.0], [51.5, 1087.0], [51.6, 1088.0], [51.7, 1088.0], [51.8, 1088.0], [51.9, 1089.0], [52.0, 1089.0], [52.1, 1090.0], [52.2, 1090.0], [52.3, 1090.0], [52.4, 1090.0], [52.5, 1091.0], [52.6, 1091.0], [52.7, 1092.0], [52.8, 1092.0], [52.9, 1092.0], [53.0, 1092.0], [53.1, 1094.0], [53.2, 1094.0], [53.3, 1095.0], [53.4, 1096.0], [53.5, 1096.0], [53.6, 1097.0], [53.7, 1098.0], [53.8, 1099.0], [53.9, 1100.0], [54.0, 1101.0], [54.1, 1102.0], [54.2, 1102.0], [54.3, 1102.0], [54.4, 1102.0], [54.5, 1103.0], [54.6, 1105.0], [54.7, 1106.0], [54.8, 1107.0], [54.9, 1107.0], [55.0, 1108.0], [55.1, 1109.0], [55.2, 1109.0], [55.3, 1112.0], [55.4, 1113.0], [55.5, 1115.0], [55.6, 1116.0], [55.7, 1116.0], [55.8, 1116.0], [55.9, 1120.0], [56.0, 1121.0], [56.1, 1123.0], [56.2, 1123.0], [56.3, 1126.0], [56.4, 1126.0], [56.5, 1127.0], [56.6, 1127.0], [56.7, 1127.0], [56.8, 1128.0], [56.9, 1130.0], [57.0, 1132.0], [57.1, 1132.0], [57.2, 1173.0], [57.3, 1173.0], [57.4, 1173.0], [57.5, 1174.0], [57.6, 1174.0], [57.7, 1175.0], [57.8, 1176.0], [57.9, 1177.0], [58.0, 1177.0], [58.1, 1177.0], [58.2, 1180.0], [58.3, 1186.0], [58.4, 1187.0], [58.5, 1189.0], [58.6, 1190.0], [58.7, 1193.0], [58.8, 1200.0], [58.9, 1205.0], [59.0, 1205.0], [59.1, 1218.0], [59.2, 1219.0], [59.3, 1220.0], [59.4, 1221.0], [59.5, 1221.0], [59.6, 1222.0], [59.7, 1230.0], [59.8, 1231.0], [59.9, 1236.0], [60.0, 1238.0], [60.1, 1239.0], [60.2, 1241.0], [60.3, 1244.0], [60.4, 1246.0], [60.5, 1248.0], [60.6, 1257.0], [60.7, 1261.0], [60.8, 1263.0], [60.9, 1264.0], [61.0, 1266.0], [61.1, 1268.0], [61.2, 1275.0], [61.3, 1279.0], [61.4, 1279.0], [61.5, 1296.0], [61.6, 1297.0], [61.7, 1298.0], [61.8, 1310.0], [61.9, 1389.0], [62.0, 1412.0], [62.1, 1424.0], [62.2, 1429.0], [62.3, 1429.0], [62.4, 1430.0], [62.5, 1439.0], [62.6, 1477.0], [62.7, 1478.0], [62.8, 1479.0], [62.9, 1479.0], [63.0, 1479.0], [63.1, 1493.0], [63.2, 1512.0], [63.3, 1513.0], [63.4, 1514.0], [63.5, 1515.0], [63.6, 1515.0], [63.7, 1546.0], [63.8, 1548.0], [63.9, 1549.0], [64.0, 1550.0], [64.1, 1551.0], [64.2, 1551.0], [64.3, 1552.0], [64.4, 1552.0], [64.5, 1553.0], [64.6, 1553.0], [64.7, 1554.0], [64.8, 1555.0], [64.9, 1578.0], [65.0, 1579.0], [65.1, 1579.0], [65.2, 1586.0], [65.3, 1588.0], [65.4, 1588.0], [65.5, 1589.0], [65.6, 1590.0], [65.7, 1591.0], [65.8, 1591.0], [65.9, 1591.0], [66.0, 1595.0], [66.1, 1595.0], [66.2, 1595.0], [66.3, 1597.0], [66.4, 1597.0], [66.5, 1619.0], [66.6, 1620.0], [66.7, 1629.0], [66.8, 1630.0], [66.9, 1630.0], [67.0, 1631.0], [67.1, 1631.0], [67.2, 1632.0], [67.3, 1632.0], [67.4, 1632.0], [67.5, 1633.0], [67.6, 1633.0], [67.7, 1634.0], [67.8, 1636.0], [67.9, 1636.0], [68.0, 1638.0], [68.1, 1639.0], [68.2, 1639.0], [68.3, 1650.0], [68.4, 1652.0], [68.5, 1654.0], [68.6, 1654.0], [68.7, 1660.0], [68.8, 1662.0], [68.9, 1663.0], [69.0, 1666.0], [69.1, 1667.0], [69.2, 1675.0], [69.3, 1680.0], [69.4, 1683.0], [69.5, 1683.0], [69.6, 1684.0], [69.7, 1693.0], [69.8, 1703.0], [69.9, 1710.0], [70.0, 1736.0], [70.1, 1737.0], [70.2, 1744.0], [70.3, 1746.0], [70.4, 1752.0], [70.5, 1758.0], [70.6, 1759.0], [70.7, 1797.0], [70.8, 1807.0], [70.9, 1814.0], [71.0, 1846.0], [71.1, 1846.0], [71.2, 1846.0], [71.3, 1847.0], [71.4, 1847.0], [71.5, 1847.0], [71.6, 1848.0], [71.7, 1854.0], [71.8, 1866.0], [71.9, 1868.0], [72.0, 1869.0], [72.1, 1869.0], [72.2, 1872.0], [72.3, 1873.0], [72.4, 1873.0], [72.5, 1874.0], [72.6, 1874.0], [72.7, 1893.0], [72.8, 1897.0], [72.9, 1898.0], [73.0, 1898.0], [73.1, 1899.0], [73.2, 1900.0], [73.3, 1900.0], [73.4, 1901.0], [73.5, 1903.0], [73.6, 1906.0], [73.7, 1908.0], [73.8, 1909.0], [73.9, 1911.0], [74.0, 1923.0], [74.1, 1931.0], [74.2, 1931.0], [74.3, 1937.0], [74.4, 1937.0], [74.5, 1938.0], [74.6, 1939.0], [74.7, 1944.0], [74.8, 1944.0], [74.9, 1944.0], [75.0, 1960.0], [75.1, 1961.0], [75.2, 1961.0], [75.3, 1963.0], [75.4, 1963.0], [75.5, 1964.0], [75.6, 1971.0], [75.7, 1972.0], [75.8, 1972.0], [75.9, 1978.0], [76.0, 1979.0], [76.1, 1981.0], [76.2, 1983.0], [76.3, 1983.0], [76.4, 1984.0], [76.5, 2011.0], [76.6, 2014.0], [76.7, 2016.0], [76.8, 2020.0], [76.9, 2020.0], [77.0, 2020.0], [77.1, 2023.0], [77.2, 2025.0], [77.3, 2030.0], [77.4, 2033.0], [77.5, 2034.0], [77.6, 2038.0], [77.7, 2042.0], [77.8, 2043.0], [77.9, 2047.0], [78.0, 2047.0], [78.1, 2049.0], [78.2, 2050.0], [78.3, 2055.0], [78.4, 2057.0], [78.5, 2081.0], [78.6, 2081.0], [78.7, 2082.0], [78.8, 2083.0], [78.9, 2083.0], [79.0, 2175.0], [79.1, 2209.0], [79.2, 2211.0], [79.3, 2215.0], [79.4, 2215.0], [79.5, 2215.0], [79.6, 2217.0], [79.7, 2223.0], [79.8, 2226.0], [79.9, 2249.0], [80.0, 2277.0], [80.1, 2280.0], [80.2, 2280.0], [80.3, 2311.0], [80.4, 2314.0], [80.5, 2319.0], [80.6, 2321.0], [80.7, 2321.0], [80.8, 2322.0], [80.9, 2325.0], [81.0, 2331.0], [81.1, 2349.0], [81.2, 2350.0], [81.3, 2355.0], [81.4, 2355.0], [81.5, 2356.0], [81.6, 2356.0], [81.7, 2358.0], [81.8, 2359.0], [81.9, 2359.0], [82.0, 2360.0], [82.1, 2360.0], [82.2, 2360.0], [82.3, 2362.0], [82.4, 2364.0], [82.5, 2364.0], [82.6, 2365.0], [82.7, 2366.0], [82.8, 2368.0], [82.9, 2369.0], [83.0, 2371.0], [83.1, 2371.0], [83.2, 2375.0], [83.3, 2409.0], [83.4, 2444.0], [83.5, 2448.0], [83.6, 2449.0], [83.7, 2452.0], [83.8, 2454.0], [83.9, 2456.0], [84.0, 2472.0], [84.1, 2485.0], [84.2, 2511.0], [84.3, 2512.0], [84.4, 2516.0], [84.5, 2517.0], [84.6, 2522.0], [84.7, 2530.0], [84.8, 2531.0], [84.9, 2532.0], [85.0, 2532.0], [85.1, 2533.0], [85.2, 2533.0], [85.3, 2536.0], [85.4, 2537.0], [85.5, 2540.0], [85.6, 2621.0], [85.7, 2630.0], [85.8, 2635.0], [85.9, 2636.0], [86.0, 2643.0], [86.1, 2644.0], [86.2, 2666.0], [86.3, 2670.0], [86.4, 2677.0], [86.5, 2687.0], [86.6, 2698.0], [86.7, 2792.0], [86.8, 2796.0], [86.9, 2802.0], [87.0, 2807.0], [87.1, 2857.0], [87.2, 2859.0], [87.3, 2867.0], [87.4, 2873.0], [87.5, 2901.0], [87.6, 2903.0], [87.7, 2914.0], [87.8, 2917.0], [87.9, 2936.0], [88.0, 2936.0], [88.1, 2942.0], [88.2, 2949.0], [88.3, 2963.0], [88.4, 2967.0], [88.5, 2977.0], [88.6, 3004.0], [88.7, 3021.0], [88.8, 3049.0], [88.9, 3052.0], [89.0, 3078.0], [89.1, 3085.0], [89.2, 3137.0], [89.3, 3267.0], [89.4, 3367.0], [89.5, 3675.0], [89.6, 3823.0], [89.7, 3834.0], [89.8, 4018.0], [89.9, 4019.0], [90.0, 4024.0], [90.1, 4026.0], [90.2, 4026.0], [90.3, 4035.0], [90.4, 4053.0], [90.5, 4106.0], [90.6, 4111.0], [90.7, 4115.0], [90.8, 4117.0], [90.9, 4131.0], [91.0, 4147.0], [91.1, 4154.0], [91.2, 4164.0], [91.3, 4168.0], [91.4, 4171.0], [91.5, 4177.0], [91.6, 4275.0], [91.7, 4300.0], [91.8, 4311.0], [91.9, 4322.0], [92.0, 4811.0], [92.1, 5019.0], [92.2, 5633.0], [92.3, 5638.0], [92.4, 5639.0], [92.5, 5643.0], [92.6, 5643.0], [92.7, 5644.0], [92.8, 5644.0], [92.9, 5645.0], [93.0, 5646.0], [93.1, 5678.0], [93.2, 5700.0], [93.3, 5701.0], [93.4, 5701.0], [93.5, 5702.0], [93.6, 5713.0], [93.7, 5713.0], [93.8, 5714.0], [93.9, 5714.0], [94.0, 5742.0], [94.1, 5755.0], [94.2, 5776.0], [94.3, 5807.0], [94.4, 5846.0], [94.5, 5978.0], [94.6, 6013.0], [94.7, 6014.0], [94.8, 6016.0], [94.9, 6017.0], [95.0, 6019.0], [95.1, 6022.0], [95.2, 6044.0], [95.3, 6046.0], [95.4, 6047.0], [95.5, 6049.0], [95.6, 6051.0], [95.7, 6053.0], [95.8, 6076.0], [95.9, 6088.0], [96.0, 6089.0], [96.1, 6094.0], [96.2, 6094.0], [96.3, 6095.0], [96.4, 6097.0], [96.5, 6101.0], [96.6, 6103.0], [96.7, 6111.0], [96.8, 6122.0], [96.9, 6124.0], [97.0, 6126.0], [97.1, 6137.0], [97.2, 6227.0], [97.3, 6713.0], [97.4, 6729.0], [97.5, 6730.0], [97.6, 6738.0], [97.7, 6743.0], [97.8, 6749.0], [97.9, 6752.0], [98.0, 6757.0], [98.1, 6770.0], [98.2, 6783.0], [98.3, 6784.0], [98.4, 6786.0], [98.5, 6789.0], [98.6, 6796.0], [98.7, 6797.0], [98.8, 6798.0], [98.9, 6799.0], [99.0, 6803.0], [99.1, 6804.0], [99.2, 6804.0], [99.3, 6805.0], [99.4, 6818.0], [99.5, 6822.0], [99.6, 6859.0], [99.7, 6860.0], [99.8, 6865.0], [99.9, 6877.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 219.0, "series": [{"data": [[600.0, 3.0], [700.0, 103.0], [800.0, 32.0], [900.0, 5.0], [1000.0, 56.0], [1100.0, 51.0], [1200.0, 30.0], [1300.0, 2.0], [1400.0, 13.0], [1500.0, 33.0], [1600.0, 34.0], [1700.0, 10.0], [1800.0, 25.0], [1900.0, 34.0], [2000.0, 25.0], [2100.0, 1.0], [2300.0, 30.0], [2200.0, 13.0], [2400.0, 10.0], [2500.0, 14.0], [2600.0, 11.0], [2700.0, 2.0], [2800.0, 7.0], [2900.0, 11.0], [3000.0, 6.0], [3100.0, 1.0], [3200.0, 1.0], [3300.0, 1.0], [3600.0, 1.0], [3800.0, 2.0], [4000.0, 7.0], [4100.0, 11.0], [4300.0, 3.0], [4200.0, 2.0], [4800.0, 1.0], [5000.0, 1.0], [5600.0, 10.0], [5700.0, 11.0], [5800.0, 2.0], [6000.0, 20.0], [6100.0, 7.0], [5900.0, 1.0], [6200.0, 1.0], [6700.0, 17.0], [6800.0, 10.0], [7300.0, 1.0], [100.0, 6.0], [200.0, 219.0], [300.0, 98.0], [400.0, 19.0], [500.0, 10.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 305.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 377.0, "series": [{"data": [[0.0, 342.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 305.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 377.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 334.79687500000017, "minX": 1.56869454E12, "maxY": 334.79687500000017, "series": [{"data": [[1.56869454E12, 334.79687500000017]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56869454E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 194.0, "minX": 1.0, "maxY": 7374.0, "series": [{"data": [[2.0, 6859.0], [3.0, 6818.0], [4.0, 6822.0], [6.0, 6804.5], [7.0, 6803.0], [8.0, 6804.0], [9.0, 6797.0], [10.0, 6796.0], [11.0, 6798.0], [12.0, 6799.0], [13.0, 6784.0], [14.0, 6789.0], [15.0, 6786.0], [16.0, 6770.0], [17.0, 6783.0], [18.0, 6877.0], [19.0, 6757.0], [20.0, 6865.0], [21.0, 6860.0], [22.0, 6743.0], [23.0, 6752.0], [24.0, 6749.0], [25.0, 6738.0], [26.0, 6730.0], [27.0, 6729.0], [28.0, 6713.0], [29.0, 6019.0], [30.0, 5978.0], [31.0, 6137.0], [33.0, 6122.0], [32.0, 6126.0], [34.0, 6227.0], [36.0, 6106.0], [38.0, 6113.5], [41.0, 6094.0], [40.0, 6096.0], [43.0, 6089.0], [44.0, 6091.0], [46.0, 6078.5], [48.0, 6053.0], [51.0, 6048.666666666667], [52.0, 6045.5], [54.0, 6022.0], [57.0, 6015.0], [59.0, 5019.0], [58.0, 5846.0], [61.0, 5776.0], [60.0, 5807.0], [63.0, 5742.0], [62.0, 5755.0], [67.0, 5713.0], [65.0, 5714.0], [64.0, 5714.0], [71.0, 5702.0], [70.0, 5701.0], [68.0, 4811.0], [74.0, 5646.0], [73.0, 5678.0], [72.0, 5700.0], [77.0, 5643.666666666667], [83.0, 4293.0], [82.0, 5636.0], [80.0, 5642.0], [87.0, 4300.0], [86.0, 4311.0], [85.0, 4322.0], [84.0, 4275.0], [91.0, 4168.0], [90.0, 4171.0], [89.0, 4177.0], [88.0, 4147.0], [95.0, 4117.0], [94.0, 4131.0], [93.0, 4154.0], [92.0, 4164.0], [99.0, 4053.0], [98.0, 4106.0], [97.0, 4111.0], [96.0, 4115.0], [103.0, 4026.0], [102.0, 4024.0], [101.0, 4026.0], [100.0, 4035.0], [107.0, 3823.0], [106.0, 3834.0], [105.0, 4018.0], [104.0, 4019.0], [111.0, 3085.0], [110.0, 3267.0], [109.0, 3367.0], [108.0, 3675.0], [115.0, 3137.0], [114.0, 3049.0], [113.0, 3052.0], [112.0, 3078.0], [119.0, 2967.0], [118.0, 2977.0], [117.0, 3004.0], [116.0, 3021.0], [123.0, 2936.0], [122.0, 2942.0], [121.0, 2949.0], [120.0, 2963.0], [127.0, 2901.0], [126.0, 2914.0], [125.0, 2917.0], [124.0, 2936.0], [133.0, 1120.0], [134.0, 894.25], [135.0, 2802.0], [132.0, 2859.0], [131.0, 2867.0], [130.0, 2873.0], [129.0, 2877.0], [128.0, 2903.0], [143.0, 1428.5], [142.0, 1060.6666666666665], [140.0, 878.25], [139.0, 1081.6666666666665], [136.0, 888.25], [138.0, 790.8], [141.0, 2670.0], [137.0, 2792.0], [148.0, 367.9], [146.0, 1089.3333333333335], [145.0, 1051.3333333333335], [151.0, 2536.5], [149.0, 2540.0], [147.0, 2630.0], [144.0, 2643.0], [156.0, 236.0], [155.0, 1384.0], [154.0, 1385.0], [159.0, 2517.0], [158.0, 2522.0], [157.0, 2531.0], [152.0, 2533.0], [166.0, 2455.0], [164.0, 2472.0], [163.0, 2485.0], [162.0, 2511.5], [160.0, 2516.0], [175.0, 2372.3333333333335], [172.0, 2409.0], [171.0, 2425.0], [170.0, 2448.0], [169.0, 2444.0], [168.0, 2450.5], [183.0, 2363.0], [182.0, 2366.5], [180.0, 2359.5], [176.0, 2368.0], [189.0, 2356.0], [187.0, 2358.5], [186.0, 2355.5], [185.0, 2355.0], [193.0, 1318.5], [192.0, 932.7692307692307], [199.0, 2321.0], [198.0, 2331.0], [197.0, 2320.5], [196.0, 2325.0], [194.0, 2321.0], [207.0, 2226.0], [206.0, 2223.0], [205.0, 2249.0], [204.0, 2280.0], [203.0, 2277.0], [202.0, 2280.0], [201.0, 2311.0], [200.0, 2314.0], [215.0, 2175.0], [214.0, 2210.0], [213.0, 2211.0], [212.0, 2209.0], [211.0, 2215.0], [210.0, 2216.0], [222.0, 323.0], [223.0, 2033.5], [221.0, 2050.3333333333335], [218.0, 2048.5], [216.0, 2349.0], [228.0, 880.3333333333334], [231.0, 1449.0], [229.0, 2049.0], [227.0, 2082.0], [226.0, 2082.0], [224.0, 2081.0], [238.0, 1325.0], [236.0, 342.5], [233.0, 1186.0], [232.0, 1189.5], [235.0, 2024.0], [245.0, 257.25], [244.0, 1152.5], [247.0, 817.0], [242.0, 261.6666666666667], [241.0, 1131.0], [240.0, 1150.0], [246.0, 1980.0], [243.0, 1983.5], [253.0, 817.3333333333334], [251.0, 1103.5], [250.0, 816.0], [248.0, 1098.0], [252.0, 1963.5], [268.0, 275.8], [269.0, 641.75], [259.0, 371.5999999999999], [271.0, 231.0], [267.0, 576.8], [266.0, 1519.75], [265.0, 194.0], [264.0, 1935.0], [262.0, 1073.0], [261.0, 228.0], [260.0, 1080.0], [258.0, 789.0], [256.0, 1538.0], [257.0, 1959.0], [286.0, 243.33333333333334], [287.0, 1269.125], [285.0, 715.2857142857142], [284.0, 256.4], [283.0, 258.0], [282.0, 248.0], [281.0, 253.5], [280.0, 558.0], [277.0, 1335.8333333333335], [274.0, 214.5], [273.0, 214.0], [272.0, 1568.8], [278.0, 257.0], [279.0, 1901.0], [276.0, 767.6666666666666], [291.0, 641.0], [301.0, 245.0], [300.0, 1017.0], [299.0, 1286.6666666666667], [298.0, 236.0], [296.0, 633.5], [297.0, 1846.5], [302.0, 1758.5], [294.0, 242.0], [293.0, 778.1666666666666], [292.0, 236.0], [290.0, 442.375], [289.0, 1871.0], [288.0, 255.2], [295.0, 772.6666666666666], [318.0, 346.5], [313.0, 1128.6], [317.0, 735.3333333333333], [315.0, 971.0], [314.0, 973.5], [312.0, 276.14285714285717], [309.0, 997.5], [308.0, 1710.0], [310.0, 1693.0], [307.0, 1739.0], [304.0, 1749.0], [319.0, 1662.5], [316.0, 1666.0], [321.0, 352.57894736842104], [328.0, 1215.0], [331.0, 1635.6666666666667], [329.0, 1639.0], [327.0, 386.0], [324.0, 644.0], [325.0, 1650.0], [322.0, 1021.0], [323.0, 1660.0], [320.0, 1064.5], [335.0, 949.0], [334.0, 825.6], [332.0, 1634.0], [348.0, 312.0], [344.0, 997.5], [347.0, 1596.0], [339.0, 365.0], [336.0, 733.0], [338.0, 1177.6666666666667], [337.0, 285.0], [342.0, 724.6666666666667], [341.0, 1629.0], [340.0, 1631.0], [343.0, 1620.0], [350.0, 1595.0], [349.0, 1596.0], [355.0, 1191.3333333333333], [357.0, 990.75], [356.0, 361.0], [358.0, 300.0], [353.0, 1590.5], [352.0, 1591.0], [365.0, 929.5], [367.0, 1553.5], [366.0, 1554.0], [364.0, 1552.0], [362.0, 1553.0], [360.0, 1578.6666666666667], [381.0, 1479.0], [383.0, 1478.0], [380.0, 1479.0], [378.0, 1493.0], [377.0, 1512.5], [375.0, 1514.5], [373.0, 1515.0], [372.0, 1547.0], [370.0, 1550.6666666666667], [368.0, 1551.0], [398.0, 1275.0], [399.0, 1268.0], [397.0, 1279.0], [387.0, 1432.6666666666667], [384.0, 1432.0], [395.0, 1297.0], [392.0, 1310.0], [391.0, 1412.0], [390.0, 1429.0], [389.0, 1424.0], [388.0, 1389.0], [415.0, 1220.0], [413.0, 1222.0], [411.0, 1221.0], [410.0, 1230.0], [409.0, 1231.0], [408.0, 1236.0], [407.0, 1239.3333333333333], [404.0, 1257.0], [403.0, 1261.0], [402.0, 1263.5], [400.0, 1266.0], [430.0, 308.0], [422.0, 285.0], [419.0, 1200.0], [418.0, 1205.0], [416.0, 1218.0], [431.0, 518.5], [429.0, 746.25], [427.0, 595.0], [428.0, 277.0], [425.0, 1186.0], [424.0, 1188.25], [420.0, 1193.0], [434.0, 286.6666666666667], [437.0, 642.0], [444.0, 1116.0], [443.0, 1126.0], [442.0, 1127.0], [438.0, 1173.0], [436.0, 1173.0], [435.0, 1176.0], [433.0, 1175.0], [462.0, 633.6], [455.0, 903.0], [458.0, 308.0], [460.0, 1105.5], [459.0, 1086.0], [457.0, 1096.0], [456.0, 1096.0], [452.0, 1111.0], [450.0, 1119.25], [448.0, 1128.5], [478.0, 587.0], [479.0, 632.4], [476.0, 844.3333333333334], [464.0, 1087.0], [475.0, 591.0], [474.0, 833.3333333333334], [472.0, 1087.5], [471.0, 1089.0], [470.0, 1090.0], [469.0, 1087.3333333333333], [492.0, 713.0], [480.0, 708.5], [483.0, 330.3333333333333], [482.0, 323.5], [493.0, 331.0], [495.0, 1103.0], [494.0, 1096.5], [491.0, 711.375], [490.0, 326.0], [488.0, 634.6], [487.0, 323.0], [485.0, 324.5], [486.0, 1090.0], [484.0, 894.25], [489.0, 334.0], [511.0, 1029.0], [509.0, 1036.5], [507.0, 1041.5], [505.0, 1057.3333333333333], [502.0, 1083.0], [500.0, 1089.5], [498.0, 1085.0], [497.0, 1090.5], [538.0, 869.0], [529.0, 882.0], [541.0, 857.5], [543.0, 861.0], [528.0, 875.0], [540.0, 860.0], [537.0, 868.0], [519.0, 1004.0], [518.0, 1019.6666666666666], [517.0, 1021.0], [516.0, 1020.0], [513.0, 1026.6666666666667], [527.0, 873.0], [526.0, 875.0], [525.0, 877.0], [524.0, 882.0], [522.0, 1248.0], [521.0, 971.0], [520.0, 989.0], [532.0, 869.0], [531.0, 880.0], [530.0, 875.0], [571.0, 773.0], [549.0, 368.0], [551.0, 605.5], [550.0, 826.0], [548.0, 442.28571428571433], [547.0, 844.0], [546.0, 847.0], [545.0, 863.5], [544.0, 875.0], [557.0, 1132.0], [556.0, 1120.0], [555.0, 1132.0], [554.0, 809.5], [552.0, 827.0], [573.0, 764.5], [565.0, 1101.0], [562.0, 1106.6], [569.0, 765.0], [568.0, 786.0], [567.0, 791.0], [566.0, 787.0], [606.0, 762.0], [607.0, 747.0], [593.0, 760.0], [592.0, 759.0], [605.0, 758.5], [603.0, 761.5], [602.0, 765.0], [601.0, 762.0], [590.0, 759.5], [576.0, 765.3333333333334], [581.0, 758.0], [578.0, 753.0], [588.0, 763.0], [587.0, 762.0], [586.0, 761.5], [584.0, 762.5], [599.0, 763.0], [598.0, 753.0], [596.0, 753.0], [594.0, 767.0], [634.0, 757.0], [637.0, 757.0], [633.0, 758.0], [632.0, 759.0], [631.0, 732.0], [628.0, 731.5], [626.0, 730.3333333333334], [623.0, 736.5], [609.0, 754.5], [611.0, 760.0], [610.0, 744.0], [615.0, 748.0], [613.0, 749.0], [621.0, 734.0], [619.0, 735.5], [670.0, 734.0], [671.0, 707.2857142857143], [668.0, 728.0], [647.0, 758.0], [646.0, 749.0], [643.0, 757.0], [641.0, 756.0], [658.0, 738.0], [657.0, 909.5], [656.0, 738.0], [655.0, 736.0], [652.0, 804.0], [649.0, 755.6666666666666], [690.0, 460.0], [698.0, 511.0], [697.0, 506.5], [679.0, 491.0], [676.0, 490.0], [675.0, 650.0], [674.0, 536.0], [673.0, 577.5], [695.0, 512.0], [692.0, 511.0], [691.0, 453.0], [689.0, 489.5], [688.0, 483.0], [685.0, 485.5], [682.0, 489.3333333333333], [680.0, 489.0], [1.0, 7374.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[334.8212890624999, 1534.9267578124986]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 698.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1996.8, "minX": 1.56869454E12, "maxY": 17425.066666666666, "series": [{"data": [[1.56869454E12, 17425.066666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.56869454E12, 1996.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56869454E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1534.9267578124986, "minX": 1.56869454E12, "maxY": 1534.9267578124986, "series": [{"data": [[1.56869454E12, 1534.9267578124986]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56869454E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1534.8857421875005, "minX": 1.56869454E12, "maxY": 1534.8857421875005, "series": [{"data": [[1.56869454E12, 1534.8857421875005]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56869454E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 493.0839843750002, "minX": 1.56869454E12, "maxY": 493.0839843750002, "series": [{"data": [[1.56869454E12, 493.0839843750002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56869454E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 193.0, "minX": 1.56869454E12, "maxY": 7374.0, "series": [{"data": [[1.56869454E12, 7374.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.56869454E12, 193.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.56869454E12, 4025.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.56869454E12, 6803.75]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.56869454E12, 6021.25]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56869454E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 274.0, "minX": 27.0, "maxY": 6789.0, "series": [{"data": [[260.0, 788.5], [32.0, 4018.5], [326.0, 274.0], [211.0, 1633.0], [107.0, 2371.0], [27.0, 6081.0], [30.0, 5644.5], [31.0, 6789.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 326.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 274.0, "minX": 27.0, "maxY": 6789.0, "series": [{"data": [[260.0, 788.5], [32.0, 4018.5], [326.0, 274.0], [211.0, 1633.0], [107.0, 2371.0], [27.0, 6081.0], [30.0, 5644.5], [31.0, 6789.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 326.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 17.066666666666666, "minX": 1.56869454E12, "maxY": 17.066666666666666, "series": [{"data": [[1.56869454E12, 17.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56869454E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 17.066666666666666, "minX": 1.56869454E12, "maxY": 17.066666666666666, "series": [{"data": [[1.56869454E12, 17.066666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56869454E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 17.066666666666666, "minX": 1.56869454E12, "maxY": 17.066666666666666, "series": [{"data": [[1.56869454E12, 17.066666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56869454E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 17.066666666666666, "minX": 1.56869454E12, "maxY": 17.066666666666666, "series": [{"data": [[1.56869454E12, 17.066666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56869454E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

