/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 326.0, "minX": 0.0, "maxY": 80824.0, "series": [{"data": [[0.0, 326.0], [0.1, 333.0], [0.2, 343.0], [0.3, 346.0], [0.4, 352.0], [0.5, 354.0], [0.6, 356.0], [0.7, 356.0], [0.8, 357.0], [0.9, 358.0], [1.0, 361.0], [1.1, 361.0], [1.2, 363.0], [1.3, 368.0], [1.4, 370.0], [1.5, 375.0], [1.6, 375.0], [1.7, 376.0], [1.8, 380.0], [1.9, 389.0], [2.0, 389.0], [2.1, 391.0], [2.2, 395.0], [2.3, 399.0], [2.4, 409.0], [2.5, 422.0], [2.6, 425.0], [2.7, 429.0], [2.8, 429.0], [2.9, 430.0], [3.0, 434.0], [3.1, 434.0], [3.2, 436.0], [3.3, 436.0], [3.4, 437.0], [3.5, 437.0], [3.6, 440.0], [3.7, 442.0], [3.8, 444.0], [3.9, 446.0], [4.0, 449.0], [4.1, 450.0], [4.2, 452.0], [4.3, 455.0], [4.4, 457.0], [4.5, 459.0], [4.6, 460.0], [4.7, 462.0], [4.8, 465.0], [4.9, 475.0], [5.0, 476.0], [5.1, 481.0], [5.2, 484.0], [5.3, 484.0], [5.4, 494.0], [5.5, 496.0], [5.6, 497.0], [5.7, 508.0], [5.8, 509.0], [5.9, 517.0], [6.0, 518.0], [6.1, 521.0], [6.2, 524.0], [6.3, 524.0], [6.4, 525.0], [6.5, 526.0], [6.6, 527.0], [6.7, 527.0], [6.8, 527.0], [6.9, 528.0], [7.0, 529.0], [7.1, 529.0], [7.2, 532.0], [7.3, 532.0], [7.4, 532.0], [7.5, 533.0], [7.6, 535.0], [7.7, 535.0], [7.8, 536.0], [7.9, 537.0], [8.0, 538.0], [8.1, 541.0], [8.2, 552.0], [8.3, 560.0], [8.4, 577.0], [8.5, 583.0], [8.6, 625.0], [8.7, 627.0], [8.8, 627.0], [8.9, 628.0], [9.0, 629.0], [9.1, 630.0], [9.2, 642.0], [9.3, 646.0], [9.4, 646.0], [9.5, 648.0], [9.6, 650.0], [9.7, 650.0], [9.8, 651.0], [9.9, 652.0], [10.0, 653.0], [10.1, 654.0], [10.2, 654.0], [10.3, 654.0], [10.4, 655.0], [10.5, 656.0], [10.6, 658.0], [10.7, 658.0], [10.8, 664.0], [10.9, 666.0], [11.0, 668.0], [11.1, 669.0], [11.2, 683.0], [11.3, 687.0], [11.4, 692.0], [11.5, 700.0], [11.6, 707.0], [11.7, 708.0], [11.8, 709.0], [11.9, 710.0], [12.0, 713.0], [12.1, 716.0], [12.2, 718.0], [12.3, 725.0], [12.4, 726.0], [12.5, 727.0], [12.6, 731.0], [12.7, 735.0], [12.8, 746.0], [12.9, 773.0], [13.0, 773.0], [13.1, 790.0], [13.2, 816.0], [13.3, 834.0], [13.4, 868.0], [13.5, 875.0], [13.6, 876.0], [13.7, 877.0], [13.8, 879.0], [13.9, 880.0], [14.0, 881.0], [14.1, 883.0], [14.2, 885.0], [14.3, 906.0], [14.4, 906.0], [14.5, 908.0], [14.6, 909.0], [14.7, 911.0], [14.8, 919.0], [14.9, 921.0], [15.0, 926.0], [15.1, 927.0], [15.2, 927.0], [15.3, 928.0], [15.4, 930.0], [15.5, 934.0], [15.6, 934.0], [15.7, 938.0], [15.8, 938.0], [15.9, 938.0], [16.0, 943.0], [16.1, 948.0], [16.2, 954.0], [16.3, 954.0], [16.4, 956.0], [16.5, 957.0], [16.6, 961.0], [16.7, 964.0], [16.8, 966.0], [16.9, 970.0], [17.0, 971.0], [17.1, 973.0], [17.2, 975.0], [17.3, 975.0], [17.4, 982.0], [17.5, 987.0], [17.6, 994.0], [17.7, 994.0], [17.8, 997.0], [17.9, 1002.0], [18.0, 1004.0], [18.1, 1004.0], [18.2, 1007.0], [18.3, 1008.0], [18.4, 1008.0], [18.5, 1009.0], [18.6, 1010.0], [18.7, 1010.0], [18.8, 1010.0], [18.9, 1011.0], [19.0, 1012.0], [19.1, 1013.0], [19.2, 1015.0], [19.3, 1018.0], [19.4, 1021.0], [19.5, 1023.0], [19.6, 1036.0], [19.7, 1038.0], [19.8, 1045.0], [19.9, 1046.0], [20.0, 1048.0], [20.1, 1051.0], [20.2, 1055.0], [20.3, 1061.0], [20.4, 1065.0], [20.5, 1066.0], [20.6, 1067.0], [20.7, 1068.0], [20.8, 1068.0], [20.9, 1069.0], [21.0, 1070.0], [21.1, 1071.0], [21.2, 1076.0], [21.3, 1076.0], [21.4, 1078.0], [21.5, 1079.0], [21.6, 1079.0], [21.7, 1081.0], [21.8, 1082.0], [21.9, 1083.0], [22.0, 1085.0], [22.1, 1088.0], [22.2, 1098.0], [22.3, 1106.0], [22.4, 1109.0], [22.5, 1112.0], [22.6, 1115.0], [22.7, 1118.0], [22.8, 1119.0], [22.9, 1127.0], [23.0, 1131.0], [23.1, 1140.0], [23.2, 1141.0], [23.3, 1148.0], [23.4, 1184.0], [23.5, 1187.0], [23.6, 1206.0], [23.7, 1207.0], [23.8, 1209.0], [23.9, 1217.0], [24.0, 1218.0], [24.1, 1220.0], [24.2, 1225.0], [24.3, 1228.0], [24.4, 1237.0], [24.5, 1240.0], [24.6, 1241.0], [24.7, 1243.0], [24.8, 1247.0], [24.9, 1251.0], [25.0, 1253.0], [25.1, 1255.0], [25.2, 1257.0], [25.3, 1260.0], [25.4, 1262.0], [25.5, 1263.0], [25.6, 1269.0], [25.7, 1269.0], [25.8, 1273.0], [25.9, 1273.0], [26.0, 1274.0], [26.1, 1274.0], [26.2, 1275.0], [26.3, 1275.0], [26.4, 1276.0], [26.5, 1277.0], [26.6, 1278.0], [26.7, 1279.0], [26.8, 1283.0], [26.9, 1284.0], [27.0, 1285.0], [27.1, 1286.0], [27.2, 1286.0], [27.3, 1288.0], [27.4, 1288.0], [27.5, 1289.0], [27.6, 1293.0], [27.7, 1293.0], [27.8, 1299.0], [27.9, 1310.0], [28.0, 1310.0], [28.1, 1311.0], [28.2, 1312.0], [28.3, 1313.0], [28.4, 1313.0], [28.5, 1318.0], [28.6, 1320.0], [28.7, 1324.0], [28.8, 1324.0], [28.9, 1325.0], [29.0, 1326.0], [29.1, 1327.0], [29.2, 1331.0], [29.3, 1340.0], [29.4, 1340.0], [29.5, 1341.0], [29.6, 1344.0], [29.7, 1345.0], [29.8, 1353.0], [29.9, 1356.0], [30.0, 1357.0], [30.1, 1358.0], [30.2, 1363.0], [30.3, 1365.0], [30.4, 1365.0], [30.5, 1366.0], [30.6, 1368.0], [30.7, 1369.0], [30.8, 1372.0], [30.9, 1372.0], [31.0, 1374.0], [31.1, 1375.0], [31.2, 1375.0], [31.3, 1375.0], [31.4, 1377.0], [31.5, 1377.0], [31.6, 1378.0], [31.7, 1380.0], [31.8, 1381.0], [31.9, 1382.0], [32.0, 1383.0], [32.1, 1386.0], [32.2, 1387.0], [32.3, 1387.0], [32.4, 1389.0], [32.5, 1390.0], [32.6, 1392.0], [32.7, 1394.0], [32.8, 1396.0], [32.9, 1397.0], [33.0, 1399.0], [33.1, 1401.0], [33.2, 1418.0], [33.3, 1424.0], [33.4, 1428.0], [33.5, 1429.0], [33.6, 1429.0], [33.7, 1430.0], [33.8, 1430.0], [33.9, 1434.0], [34.0, 1437.0], [34.1, 1437.0], [34.2, 1438.0], [34.3, 1440.0], [34.4, 1444.0], [34.5, 1447.0], [34.6, 1448.0], [34.7, 1448.0], [34.8, 1449.0], [34.9, 1449.0], [35.0, 1450.0], [35.1, 1450.0], [35.2, 1451.0], [35.3, 1452.0], [35.4, 1452.0], [35.5, 1453.0], [35.6, 1454.0], [35.7, 1456.0], [35.8, 1458.0], [35.9, 1463.0], [36.0, 1464.0], [36.1, 1464.0], [36.2, 1465.0], [36.3, 1465.0], [36.4, 1465.0], [36.5, 1468.0], [36.6, 1468.0], [36.7, 1468.0], [36.8, 1470.0], [36.9, 1470.0], [37.0, 1471.0], [37.1, 1471.0], [37.2, 1472.0], [37.3, 1472.0], [37.4, 1472.0], [37.5, 1473.0], [37.6, 1473.0], [37.7, 1473.0], [37.8, 1474.0], [37.9, 1474.0], [38.0, 1475.0], [38.1, 1478.0], [38.2, 1478.0], [38.3, 1479.0], [38.4, 1479.0], [38.5, 1480.0], [38.6, 1480.0], [38.7, 1480.0], [38.8, 1481.0], [38.9, 1481.0], [39.0, 1482.0], [39.1, 1483.0], [39.2, 1484.0], [39.3, 1484.0], [39.4, 1485.0], [39.5, 1485.0], [39.6, 1485.0], [39.7, 1487.0], [39.8, 1487.0], [39.9, 1487.0], [40.0, 1488.0], [40.1, 1488.0], [40.2, 1489.0], [40.3, 1489.0], [40.4, 1491.0], [40.5, 1492.0], [40.6, 1492.0], [40.7, 1492.0], [40.8, 1494.0], [40.9, 1498.0], [41.0, 1498.0], [41.1, 1503.0], [41.2, 1504.0], [41.3, 1506.0], [41.4, 1515.0], [41.5, 1517.0], [41.6, 1518.0], [41.7, 1536.0], [41.8, 1537.0], [41.9, 1538.0], [42.0, 1554.0], [42.1, 1555.0], [42.2, 1556.0], [42.3, 1556.0], [42.4, 1558.0], [42.5, 1559.0], [42.6, 1569.0], [42.7, 1570.0], [42.8, 1579.0], [42.9, 1590.0], [43.0, 1598.0], [43.1, 1601.0], [43.2, 1604.0], [43.3, 1604.0], [43.4, 1606.0], [43.5, 1609.0], [43.6, 1610.0], [43.7, 1615.0], [43.8, 1616.0], [43.9, 1620.0], [44.0, 1626.0], [44.1, 1628.0], [44.2, 1628.0], [44.3, 1628.0], [44.4, 1629.0], [44.5, 1629.0], [44.6, 1630.0], [44.7, 1634.0], [44.8, 1634.0], [44.9, 1635.0], [45.0, 1637.0], [45.1, 1637.0], [45.2, 1638.0], [45.3, 1639.0], [45.4, 1641.0], [45.5, 1641.0], [45.6, 1641.0], [45.7, 1642.0], [45.8, 1643.0], [45.9, 1645.0], [46.0, 1645.0], [46.1, 1645.0], [46.2, 1646.0], [46.3, 1647.0], [46.4, 1649.0], [46.5, 1649.0], [46.6, 1650.0], [46.7, 1650.0], [46.8, 1650.0], [46.9, 1650.0], [47.0, 1653.0], [47.1, 1653.0], [47.2, 1654.0], [47.3, 1655.0], [47.4, 1657.0], [47.5, 1657.0], [47.6, 1675.0], [47.7, 1683.0], [47.8, 1693.0], [47.9, 1697.0], [48.0, 1701.0], [48.1, 1702.0], [48.2, 1703.0], [48.3, 1706.0], [48.4, 1706.0], [48.5, 1708.0], [48.6, 1713.0], [48.7, 1723.0], [48.8, 1725.0], [48.9, 1725.0], [49.0, 1725.0], [49.1, 1726.0], [49.2, 1729.0], [49.3, 1750.0], [49.4, 1752.0], [49.5, 1752.0], [49.6, 1752.0], [49.7, 1756.0], [49.8, 1759.0], [49.9, 1761.0], [50.0, 1770.0], [50.1, 1771.0], [50.2, 1775.0], [50.3, 1775.0], [50.4, 1776.0], [50.5, 1777.0], [50.6, 1779.0], [50.7, 1779.0], [50.8, 1779.0], [50.9, 1780.0], [51.0, 1782.0], [51.1, 1785.0], [51.2, 1787.0], [51.3, 1788.0], [51.4, 1790.0], [51.5, 1791.0], [51.6, 1792.0], [51.7, 1792.0], [51.8, 1793.0], [51.9, 1794.0], [52.0, 1795.0], [52.1, 1796.0], [52.2, 1797.0], [52.3, 1799.0], [52.4, 1800.0], [52.5, 1801.0], [52.6, 1802.0], [52.7, 1805.0], [52.8, 1806.0], [52.9, 1808.0], [53.0, 1808.0], [53.1, 1809.0], [53.2, 1810.0], [53.3, 1812.0], [53.4, 1813.0], [53.5, 1813.0], [53.6, 1814.0], [53.7, 1815.0], [53.8, 1818.0], [53.9, 1826.0], [54.0, 1829.0], [54.1, 1831.0], [54.2, 1848.0], [54.3, 1862.0], [54.4, 1862.0], [54.5, 1864.0], [54.6, 1865.0], [54.7, 1868.0], [54.8, 1868.0], [54.9, 1870.0], [55.0, 1870.0], [55.1, 1875.0], [55.2, 1875.0], [55.3, 1877.0], [55.4, 1882.0], [55.5, 1883.0], [55.6, 1890.0], [55.7, 1901.0], [55.8, 1901.0], [55.9, 1902.0], [56.0, 1905.0], [56.1, 1906.0], [56.2, 1907.0], [56.3, 1907.0], [56.4, 1909.0], [56.5, 1914.0], [56.6, 1915.0], [56.7, 1916.0], [56.8, 1918.0], [56.9, 1918.0], [57.0, 1919.0], [57.1, 1920.0], [57.2, 1923.0], [57.3, 1923.0], [57.4, 1923.0], [57.5, 1952.0], [57.6, 1955.0], [57.7, 1955.0], [57.8, 1960.0], [57.9, 1963.0], [58.0, 1968.0], [58.1, 1969.0], [58.2, 1975.0], [58.3, 1978.0], [58.4, 2028.0], [58.5, 2032.0], [58.6, 2034.0], [58.7, 2038.0], [58.8, 2039.0], [58.9, 2039.0], [59.0, 2042.0], [59.1, 2049.0], [59.2, 2049.0], [59.3, 2055.0], [59.4, 2055.0], [59.5, 2056.0], [59.6, 2062.0], [59.7, 2065.0], [59.8, 2067.0], [59.9, 2069.0], [60.0, 2069.0], [60.1, 2071.0], [60.2, 2072.0], [60.3, 2076.0], [60.4, 2077.0], [60.5, 2081.0], [60.6, 2082.0], [60.7, 2084.0], [60.8, 2088.0], [60.9, 2093.0], [61.0, 2097.0], [61.1, 2098.0], [61.2, 2098.0], [61.3, 2099.0], [61.4, 2100.0], [61.5, 2102.0], [61.6, 2104.0], [61.7, 2104.0], [61.8, 2108.0], [61.9, 2109.0], [62.0, 2111.0], [62.1, 2118.0], [62.2, 2125.0], [62.3, 2128.0], [62.4, 2137.0], [62.5, 2142.0], [62.6, 2166.0], [62.7, 2174.0], [62.8, 2181.0], [62.9, 2184.0], [63.0, 2193.0], [63.1, 2196.0], [63.2, 2205.0], [63.3, 2207.0], [63.4, 2215.0], [63.5, 2217.0], [63.6, 2229.0], [63.7, 2235.0], [63.8, 2238.0], [63.9, 2238.0], [64.0, 2244.0], [64.1, 2246.0], [64.2, 2247.0], [64.3, 2247.0], [64.4, 2255.0], [64.5, 2293.0], [64.6, 2296.0], [64.7, 2304.0], [64.8, 2306.0], [64.9, 2309.0], [65.0, 2311.0], [65.1, 2311.0], [65.2, 2317.0], [65.3, 2327.0], [65.4, 2334.0], [65.5, 2337.0], [65.6, 2338.0], [65.7, 2344.0], [65.8, 2344.0], [65.9, 2344.0], [66.0, 2345.0], [66.1, 2346.0], [66.2, 2349.0], [66.3, 2351.0], [66.4, 2353.0], [66.5, 2356.0], [66.6, 2357.0], [66.7, 2361.0], [66.8, 2362.0], [66.9, 2368.0], [67.0, 2370.0], [67.1, 2372.0], [67.2, 2373.0], [67.3, 2374.0], [67.4, 2375.0], [67.5, 2375.0], [67.6, 2377.0], [67.7, 2377.0], [67.8, 2386.0], [67.9, 2388.0], [68.0, 2397.0], [68.1, 2397.0], [68.2, 2397.0], [68.3, 2398.0], [68.4, 2399.0], [68.5, 2402.0], [68.6, 2405.0], [68.7, 2406.0], [68.8, 2406.0], [68.9, 2407.0], [69.0, 2408.0], [69.1, 2409.0], [69.2, 2418.0], [69.3, 2418.0], [69.4, 2421.0], [69.5, 2423.0], [69.6, 2427.0], [69.7, 2427.0], [69.8, 2431.0], [69.9, 2437.0], [70.0, 2439.0], [70.1, 2448.0], [70.2, 2462.0], [70.3, 2471.0], [70.4, 2472.0], [70.5, 2475.0], [70.6, 2477.0], [70.7, 2480.0], [70.8, 2482.0], [70.9, 2494.0], [71.0, 2495.0], [71.1, 2496.0], [71.2, 2496.0], [71.3, 2503.0], [71.4, 2507.0], [71.5, 2511.0], [71.6, 2519.0], [71.7, 2521.0], [71.8, 2521.0], [71.9, 2529.0], [72.0, 2546.0], [72.1, 2549.0], [72.2, 2581.0], [72.3, 2583.0], [72.4, 2588.0], [72.5, 2589.0], [72.6, 2673.0], [72.7, 2688.0], [72.8, 2709.0], [72.9, 2748.0], [73.0, 2749.0], [73.1, 2760.0], [73.2, 2762.0], [73.3, 2775.0], [73.4, 2842.0], [73.5, 2883.0], [73.6, 2887.0], [73.7, 2920.0], [73.8, 2926.0], [73.9, 2936.0], [74.0, 2938.0], [74.1, 2978.0], [74.2, 3003.0], [74.3, 3167.0], [74.4, 3477.0], [74.5, 3487.0], [74.6, 3493.0], [74.7, 3500.0], [74.8, 3505.0], [74.9, 3505.0], [75.0, 3512.0], [75.1, 3514.0], [75.2, 3516.0], [75.3, 3518.0], [75.4, 3520.0], [75.5, 3520.0], [75.6, 3529.0], [75.7, 3533.0], [75.8, 3539.0], [75.9, 3542.0], [76.0, 3545.0], [76.1, 3549.0], [76.2, 3564.0], [76.3, 3567.0], [76.4, 3570.0], [76.5, 3571.0], [76.6, 3573.0], [76.7, 3574.0], [76.8, 3579.0], [76.9, 3580.0], [77.0, 3580.0], [77.1, 3583.0], [77.2, 3586.0], [77.3, 3587.0], [77.4, 3588.0], [77.5, 3589.0], [77.6, 3590.0], [77.7, 3591.0], [77.8, 3592.0], [77.9, 3593.0], [78.0, 3594.0], [78.1, 3596.0], [78.2, 3598.0], [78.3, 3598.0], [78.4, 3602.0], [78.5, 3603.0], [78.6, 3604.0], [78.7, 3613.0], [78.8, 3624.0], [78.9, 3625.0], [79.0, 3628.0], [79.1, 3630.0], [79.2, 3632.0], [79.3, 3634.0], [79.4, 3640.0], [79.5, 3643.0], [79.6, 3648.0], [79.7, 3648.0], [79.8, 3649.0], [79.9, 3653.0], [80.0, 3656.0], [80.1, 3658.0], [80.2, 3661.0], [80.3, 3663.0], [80.4, 3666.0], [80.5, 3666.0], [80.6, 3669.0], [80.7, 3674.0], [80.8, 3679.0], [80.9, 3681.0], [81.0, 3683.0], [81.1, 3687.0], [81.2, 3693.0], [81.3, 3695.0], [81.4, 3701.0], [81.5, 3706.0], [81.6, 3707.0], [81.7, 3710.0], [81.8, 3711.0], [81.9, 3712.0], [82.0, 3717.0], [82.1, 3721.0], [82.2, 3722.0], [82.3, 3728.0], [82.4, 3731.0], [82.5, 3732.0], [82.6, 3733.0], [82.7, 3735.0], [82.8, 3735.0], [82.9, 3736.0], [83.0, 3738.0], [83.1, 3739.0], [83.2, 3739.0], [83.3, 3742.0], [83.4, 3748.0], [83.5, 3750.0], [83.6, 3752.0], [83.7, 3752.0], [83.8, 3753.0], [83.9, 3754.0], [84.0, 3754.0], [84.1, 3755.0], [84.2, 3756.0], [84.3, 3756.0], [84.4, 3757.0], [84.5, 3759.0], [84.6, 3759.0], [84.7, 3760.0], [84.8, 3761.0], [84.9, 3763.0], [85.0, 3764.0], [85.1, 3764.0], [85.2, 3768.0], [85.3, 3769.0], [85.4, 3772.0], [85.5, 3778.0], [85.6, 3779.0], [85.7, 3781.0], [85.8, 3783.0], [85.9, 3784.0], [86.0, 3786.0], [86.1, 3787.0], [86.2, 3791.0], [86.3, 3791.0], [86.4, 3800.0], [86.5, 3802.0], [86.6, 3804.0], [86.7, 3815.0], [86.8, 3817.0], [86.9, 3817.0], [87.0, 3818.0], [87.1, 3826.0], [87.2, 3858.0], [87.3, 3893.0], [87.4, 3922.0], [87.5, 3967.0], [87.6, 4150.0], [87.7, 4194.0], [87.8, 4213.0], [87.9, 4243.0], [88.0, 4328.0], [88.1, 4387.0], [88.2, 4518.0], [88.3, 4583.0], [88.4, 4701.0], [88.5, 4709.0], [88.6, 4712.0], [88.7, 4723.0], [88.8, 4726.0], [88.9, 4771.0], [89.0, 4782.0], [89.1, 4797.0], [89.2, 4801.0], [89.3, 4982.0], [89.4, 5399.0], [89.5, 5509.0], [89.6, 5542.0], [89.7, 5549.0], [89.8, 5550.0], [89.9, 5561.0], [90.0, 5562.0], [90.1, 5567.0], [90.2, 5585.0], [90.3, 5585.0], [90.4, 5590.0], [90.5, 5595.0], [90.6, 5595.0], [90.7, 5599.0], [90.8, 5603.0], [90.9, 5612.0], [91.0, 5615.0], [91.1, 5618.0], [91.2, 5621.0], [91.3, 5626.0], [91.4, 5638.0], [91.5, 5643.0], [91.6, 5648.0], [91.7, 5662.0], [91.8, 5663.0], [91.9, 5666.0], [92.0, 5678.0], [92.1, 5683.0], [92.2, 5684.0], [92.3, 5686.0], [92.4, 5689.0], [92.5, 5689.0], [92.6, 5693.0], [92.7, 5710.0], [92.8, 5718.0], [92.9, 5728.0], [93.0, 5730.0], [93.1, 5731.0], [93.2, 5736.0], [93.3, 5738.0], [93.4, 5744.0], [93.5, 5747.0], [93.6, 5766.0], [93.7, 5771.0], [93.8, 5791.0], [93.9, 5791.0], [94.0, 5804.0], [94.1, 5896.0], [94.2, 5903.0], [94.3, 5904.0], [94.4, 5906.0], [94.5, 5912.0], [94.6, 5913.0], [94.7, 5913.0], [94.8, 5918.0], [94.9, 5918.0], [95.0, 6137.0], [95.1, 6159.0], [95.2, 6170.0], [95.3, 6473.0], [95.4, 6475.0], [95.5, 6657.0], [95.6, 6667.0], [95.7, 7290.0], [95.8, 7293.0], [95.9, 7407.0], [96.0, 7407.0], [96.1, 7449.0], [96.2, 7453.0], [96.3, 7455.0], [96.4, 7459.0], [96.5, 7462.0], [96.6, 7462.0], [96.7, 7604.0], [96.8, 7605.0], [96.9, 7617.0], [97.0, 7617.0], [97.1, 7645.0], [97.2, 7665.0], [97.3, 11320.0], [97.4, 15457.0], [97.5, 15457.0], [97.6, 76789.0], [97.7, 76826.0], [97.8, 77020.0], [97.9, 77069.0], [98.0, 77752.0], [98.1, 77759.0], [98.2, 77804.0], [98.3, 77808.0], [98.4, 78659.0], [98.5, 78967.0], [98.6, 79068.0], [98.7, 79333.0], [98.8, 79538.0], [98.9, 79539.0], [99.0, 79563.0], [99.1, 79604.0], [99.2, 79774.0], [99.3, 79790.0], [99.4, 79827.0], [99.5, 79834.0], [99.6, 80049.0], [99.7, 80477.0], [99.8, 80517.0], [99.9, 80739.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 82.0, "series": [{"data": [[600.0, 29.0], [700.0, 18.0], [800.0, 11.0], [900.0, 37.0], [1000.0, 45.0], [1100.0, 13.0], [1200.0, 44.0], [1300.0, 53.0], [1400.0, 82.0], [1500.0, 21.0], [1600.0, 50.0], [1700.0, 45.0], [1800.0, 34.0], [1900.0, 27.0], [2000.0, 31.0], [2100.0, 19.0], [2200.0, 15.0], [2300.0, 39.0], [2400.0, 29.0], [2500.0, 13.0], [2600.0, 2.0], [2700.0, 6.0], [2800.0, 3.0], [2900.0, 5.0], [3000.0, 1.0], [3100.0, 1.0], [3400.0, 3.0], [3500.0, 38.0], [3600.0, 31.0], [3700.0, 51.0], [3800.0, 10.0], [3900.0, 3.0], [4300.0, 2.0], [4100.0, 2.0], [4200.0, 2.0], [4500.0, 2.0], [4700.0, 8.0], [4800.0, 1.0], [76700.0, 1.0], [77700.0, 2.0], [4900.0, 1.0], [78900.0, 1.0], [79300.0, 1.0], [79500.0, 3.0], [79700.0, 2.0], [80500.0, 1.0], [80700.0, 1.0], [5300.0, 1.0], [5500.0, 13.0], [5600.0, 20.0], [5700.0, 13.0], [5800.0, 2.0], [6100.0, 3.0], [5900.0, 8.0], [6600.0, 2.0], [6400.0, 2.0], [7400.0, 8.0], [7200.0, 3.0], [7600.0, 6.0], [11300.0, 1.0], [15400.0, 2.0], [300.0, 24.0], [76800.0, 1.0], [77000.0, 2.0], [77800.0, 2.0], [78600.0, 1.0], [79000.0, 1.0], [79600.0, 1.0], [79800.0, 2.0], [80000.0, 1.0], [80400.0, 1.0], [80800.0, 1.0], [400.0, 34.0], [500.0, 30.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 80800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 40.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 564.0, "series": [{"data": [[0.0, 58.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 362.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 564.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 40.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.04, "minX": 1.56778896E12, "maxY": 489.9319319319325, "series": [{"data": [[1.56778902E12, 13.04], [1.56778896E12, 489.9319319319325]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56778902E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 389.0, "minX": 1.0, "maxY": 80824.0, "series": [{"data": [[2.0, 80739.0], [3.0, 80517.0], [4.0, 80477.0], [5.0, 80049.0], [6.0, 79834.0], [7.0, 79827.0], [8.0, 79774.0], [9.0, 79790.0], [10.0, 79604.0], [12.0, 79550.5], [13.0, 79539.0], [14.0, 79333.0], [15.0, 79068.0], [16.0, 78967.0], [17.0, 78659.0], [18.0, 77808.0], [19.0, 77759.0], [20.0, 77752.0], [21.0, 77804.0], [22.0, 77069.0], [23.0, 77020.0], [24.0, 76826.0], [25.0, 76789.0], [27.0, 15457.0], [28.0, 11320.0], [30.0, 7291.5], [31.0, 7295.0], [33.0, 7560.0], [35.0, 7462.0], [34.0, 7645.0], [37.0, 7611.0], [41.0, 7434.5], [40.0, 7610.5], [42.0, 7453.0], [45.0, 6657.0], [44.0, 7433.0], [46.0, 6473.0], [49.0, 7449.0], [48.0, 6571.0], [51.0, 4776.5], [55.0, 5878.333333333333], [56.0, 5918.0], [59.0, 5908.0], [58.0, 5906.0], [62.0, 5908.0], [66.0, 5945.0], [64.0, 5780.25], [71.0, 5920.25], [68.0, 5595.0], [75.0, 4213.0], [74.0, 4243.0], [73.0, 4388.5], [76.0, 4150.0], [91.0, 4599.400000000001], [94.0, 5730.0], [93.0, 5710.0], [92.0, 5693.0], [99.0, 5666.0], [98.0, 5671.5], [96.0, 5715.0], [103.0, 3815.0], [102.0, 5663.0], [101.0, 4296.0], [107.0, 4753.5], [105.0, 3793.0], [110.0, 5615.0], [109.0, 4691.0], [114.0, 5672.5], [112.0, 5634.5], [119.0, 5523.5], [118.0, 4797.0], [116.0, 4714.0], [123.0, 5595.0], [122.0, 5638.0], [120.0, 5562.0], [126.0, 5621.0], [125.0, 5619.0], [124.0, 5585.0], [134.0, 4712.0], [133.0, 5542.0], [132.0, 4723.0], [131.0, 5590.0], [130.0, 5549.0], [129.0, 4726.0], [128.0, 5558.5], [143.0, 3793.75], [139.0, 5120.0], [137.0, 5599.0], [151.0, 3761.0], [147.0, 3760.0], [146.0, 3768.0], [145.0, 3784.0], [144.0, 3772.0], [159.0, 3712.0], [158.0, 3739.0], [157.0, 3711.0], [156.0, 3732.0], [155.0, 3742.0], [154.0, 3791.0], [153.0, 3764.0], [152.0, 3750.75], [167.0, 3628.0], [166.0, 3640.0], [165.0, 3695.0], [164.0, 3681.0], [163.0, 3693.0], [162.0, 3701.0], [161.0, 3721.0], [160.0, 3728.0], [175.0, 3679.0], [174.0, 3683.0], [173.0, 3570.0], [172.0, 3594.0], [171.0, 3579.0], [170.0, 3588.0], [169.0, 3613.0], [168.0, 3624.0], [180.0, 3658.5], [178.0, 3666.0], [177.0, 3669.0], [176.0, 3674.0], [191.0, 3963.0], [190.0, 3632.0], [189.0, 3630.0], [188.0, 3634.0], [187.0, 3632.0], [186.0, 3699.166666666667], [199.0, 3596.0], [198.0, 3598.0], [197.0, 3590.0], [196.0, 3858.0], [195.0, 3598.0], [194.0, 3602.0], [193.0, 3603.0], [192.0, 3604.0], [207.0, 3587.0], [206.0, 3586.0], [205.0, 3759.0], [204.0, 3778.0], [203.0, 3592.0], [202.0, 3593.0], [201.0, 3804.0], [200.0, 3589.0], [215.0, 3542.0], [214.0, 3545.0], [213.0, 3731.0], [212.0, 3567.0], [211.0, 3580.0], [210.0, 3754.0], [209.0, 3574.0], [208.0, 3752.0], [223.0, 3722.0], [222.0, 3505.0], [221.0, 3518.0], [220.0, 3529.0], [219.0, 3520.0], [218.0, 3779.0], [217.0, 3539.0], [216.0, 3533.0], [231.0, 3549.0], [230.0, 3516.0], [229.0, 4982.0], [228.0, 3505.0], [227.0, 3512.0], [226.0, 3487.0], [225.0, 3493.0], [224.0, 3733.0], [239.0, 2581.0], [238.0, 2585.5], [236.0, 3167.0], [235.0, 3663.0], [234.0, 3520.0], [233.0, 3500.0], [232.0, 3507.0], [247.0, 2529.0], [246.0, 2519.0], [245.0, 2521.0], [244.0, 2549.0], [243.0, 2546.0], [242.0, 4387.0], [241.0, 4518.0], [240.0, 2589.0], [255.0, 2507.0], [254.0, 2495.5], [253.0, 2503.0], [252.0, 2496.0], [250.0, 2494.0], [249.0, 2521.0], [248.0, 2511.0], [271.0, 2421.0], [268.0, 2418.6666666666665], [266.0, 2427.0], [264.0, 2397.0], [263.0, 2423.0], [262.0, 2437.0], [261.0, 2477.75], [258.0, 2448.0], [256.0, 2471.0], [286.0, 3817.0], [287.0, 2346.0], [285.0, 2351.0], [284.0, 2349.0], [283.0, 2353.0], [282.0, 2398.0], [281.0, 2372.0], [280.0, 2368.0], [279.0, 2409.0], [278.0, 2418.0], [277.0, 2431.0], [276.0, 2400.0], [303.0, 3639.6666666666665], [300.0, 3756.0], [299.0, 3591.0], [298.0, 3757.0], [297.0, 3752.0], [296.0, 3099.0], [294.0, 3721.5], [292.0, 3114.5], [291.0, 3967.0], [289.0, 3761.0], [318.0, 2372.5], [316.0, 2386.0], [315.0, 3355.0], [311.0, 3607.6], [306.0, 3712.0], [304.0, 3580.0], [323.0, 2038.0], [329.0, 1960.0], [330.0, 1955.0], [328.0, 1963.0], [327.0, 2887.0], [326.0, 2883.0], [325.0, 2306.0], [324.0, 2032.0], [322.0, 2174.5], [320.0, 2356.5], [351.0, 1808.0], [350.0, 1806.0], [349.0, 2025.9374999999998], [348.0, 1918.0], [346.0, 1914.0], [365.0, 1785.0], [366.0, 1787.0], [364.0, 1788.0], [363.0, 1794.0], [362.0, 1796.0], [359.0, 1792.0], [358.0, 1794.5], [356.0, 2396.5], [354.0, 2680.5], [352.0, 1808.0], [383.0, 1729.0], [380.0, 2485.0], [370.0, 1777.3333333333333], [369.0, 1780.0], [379.0, 1752.0], [378.0, 1752.0], [376.0, 1756.0], [375.0, 1759.0], [374.0, 1764.0], [373.0, 1779.0], [372.0, 1778.5], [387.0, 1706.0], [399.0, 1647.0], [396.0, 1650.0], [395.0, 1651.0], [393.0, 1650.0], [391.0, 1650.0], [390.0, 2214.0], [388.0, 1675.0], [386.0, 1723.0], [385.0, 1725.0], [384.0, 1725.3333333333333], [414.0, 1641.0], [415.0, 1634.0], [412.0, 1639.0], [402.0, 1645.0], [401.0, 2709.0], [411.0, 1642.0], [409.0, 2197.0], [407.0, 2193.0], [406.0, 1642.0], [405.0, 1639.5], [404.0, 1643.0], [431.0, 1482.5], [429.0, 1481.0], [425.0, 2928.0], [422.0, 2978.0], [421.0, 2063.3333333333335], [420.0, 1629.0], [418.0, 1629.0], [446.0, 1471.0], [445.0, 1485.0], [441.0, 1474.0], [440.0, 1475.6666666666667], [438.0, 1481.5], [437.0, 1487.0], [436.0, 1485.0], [434.0, 1484.0], [433.0, 1482.0], [462.0, 1479.0], [463.0, 1479.0], [461.0, 1480.3333333333333], [460.0, 1487.0], [458.0, 1468.0], [457.0, 1468.0], [456.0, 1491.0], [454.0, 1492.0], [450.0, 1487.0], [448.0, 1472.0], [453.0, 1489.5], [452.0, 1473.0], [477.0, 1447.0], [479.0, 1425.5], [476.0, 1450.0], [475.0, 1451.0], [474.0, 1448.0], [473.0, 1452.0], [471.0, 1455.6666666666667], [469.0, 1451.0], [467.0, 1454.0], [466.0, 1471.0], [465.0, 1465.0], [464.0, 1470.0], [493.0, 1510.5], [491.0, 2255.0], [490.0, 1497.0], [488.0, 1392.0], [487.0, 1399.0], [486.0, 1387.0], [485.0, 1387.0], [484.0, 1389.0], [483.0, 1397.0], [482.0, 1396.0], [510.0, 2357.0], [505.0, 1365.0], [503.0, 1369.0], [501.0, 1723.0], [499.0, 1373.5], [497.0, 1860.5], [538.0, 1274.0], [542.0, 1278.0], [543.0, 2098.0], [531.0, 1816.0], [529.0, 1872.5], [541.0, 1273.0], [540.0, 1479.0], [539.0, 1275.0], [536.0, 1285.0], [518.0, 2337.0], [517.0, 2374.0], [516.0, 2311.0], [515.0, 2331.0], [514.0, 1634.6249999999998], [513.0, 1353.0], [512.0, 1647.25], [527.0, 2407.0], [526.0, 2361.0], [525.0, 1975.0], [524.0, 1911.0], [523.0, 2368.5], [521.0, 2377.0], [520.0, 2377.0], [535.0, 1652.6666666666667], [533.0, 1286.0], [568.0, 2293.0], [562.0, 2235.0], [575.0, 1337.6666666666667], [572.0, 1868.0], [571.0, 1934.0], [559.0, 2247.0], [546.0, 1941.0], [544.0, 2071.0], [549.0, 1593.0], [548.0, 1225.0], [551.0, 1273.0], [550.0, 1207.0], [557.0, 2244.0], [556.0, 1875.0], [555.0, 2309.0], [554.0, 2304.0], [553.0, 1240.0], [567.0, 2358.5], [566.0, 2286.5], [563.0, 2296.0], [561.0, 1119.0], [560.0, 2238.0], [602.0, 2215.0], [606.0, 2200.5], [607.0, 2174.0], [604.0, 2194.0], [601.0, 2217.0], [600.0, 1759.3333333333333], [597.0, 1007.75], [595.0, 1010.5], [587.0, 1061.0], [576.0, 1078.0], [581.0, 1750.0], [578.0, 1081.0], [583.0, 1552.6666666666667], [582.0, 1702.0], [586.0, 1055.0], [585.0, 1065.0], [584.0, 1071.0], [636.0, 1428.0], [639.0, 868.0], [626.0, 1293.0], [625.0, 1219.0], [629.0, 1477.0], [628.0, 1641.0], [638.0, 927.0], [637.0, 877.0], [635.0, 880.0], [634.0, 1279.0], [633.0, 1309.5], [632.0, 1537.0], [621.0, 2125.0], [608.0, 2099.0], [611.0, 1326.0], [610.0, 2184.0], [614.0, 1318.0], [612.0, 1322.0], [620.0, 1313.0], [619.0, 1311.5], [618.0, 1708.0], [616.0, 1314.0], [631.0, 1434.0], [630.0, 927.0], [668.0, 1464.6666666666667], [671.0, 874.8], [656.0, 1607.5], [659.0, 1653.0], [658.0, 1797.0], [661.0, 1565.3333333333333], [660.0, 718.0], [670.0, 1382.0000000000002], [667.0, 1466.111111111111], [669.0, 1546.8999999999999], [665.0, 1067.8333333333333], [664.0, 1835.5], [647.0, 1808.0], [646.0, 1831.0], [645.0, 1800.0], [643.0, 1269.0], [642.0, 1799.0], [641.0, 1277.0], [640.0, 1276.0], [654.0, 1243.0], [653.0, 1255.0], [652.0, 1655.0], [651.0, 1269.0], [650.0, 1606.0], [649.0, 1854.0], [666.0, 1259.0], [663.0, 1047.3333333333335], [662.0, 1792.25], [679.0, 1064.6923076923076], [689.0, 1544.6666666666667], [698.0, 1067.0], [700.0, 1085.5], [699.0, 1540.0], [697.0, 1098.5], [696.0, 1461.0], [677.0, 738.8], [675.0, 1622.5], [676.0, 2104.0], [674.0, 1275.5], [672.0, 688.0], [673.0, 1798.6666666666667], [687.0, 2076.5], [678.0, 1357.0], [695.0, 1370.0], [694.0, 1978.0], [693.0, 1690.0], [690.0, 1207.0], [692.0, 2034.0], [691.0, 1485.0], [688.0, 1609.6666666666667], [703.0, 2049.0], [702.0, 1878.5], [686.0, 1382.0], [685.0, 1558.8], [681.0, 699.5], [680.0, 1094.5], [682.0, 1406.5], [732.0, 529.0], [731.0, 538.0], [711.0, 773.0], [710.0, 1950.25], [709.0, 1812.5], [707.0, 2028.0], [726.0, 389.0], [725.0, 437.0], [724.0, 451.0], [721.0, 465.0], [716.0, 434.0], [717.0, 1882.5], [719.0, 1864.0], [705.0, 2062.0], [704.0, 1924.3333333333333], [718.0, 1870.0], [706.0, 1853.6666666666667], [715.0, 1835.5], [714.0, 1833.5], [713.0, 1941.0], [712.0, 1842.5], [755.0, 733.0], [765.0, 573.5], [762.0, 648.0], [761.0, 862.3333333333334], [743.0, 1036.0], [739.0, 524.0], [737.0, 481.0], [736.0, 476.0], [759.0, 789.5], [757.0, 981.2222222222222], [756.0, 952.5], [752.0, 858.6666666666666], [753.0, 635.0], [751.0, 1133.375], [750.0, 850.3571428571428], [748.0, 1066.0], [747.0, 887.0], [786.0, 1115.0], [798.0, 562.3333333333334], [797.0, 1062.2], [794.0, 1085.0], [775.0, 590.6666666666666], [774.0, 547.5], [773.0, 652.0], [772.0, 642.0], [769.0, 1015.3333333333334], [768.0, 573.0], [791.0, 1011.0], [790.0, 930.0], [788.0, 1152.5], [784.0, 510.0], [782.0, 846.5], [779.0, 859.6666666666666], [777.0, 970.0], [829.0, 881.0], [830.0, 753.0], [828.0, 1048.0], [827.0, 1516.5], [825.0, 1183.5], [824.0, 1218.0], [815.0, 663.0], [800.0, 629.0], [803.0, 906.6666666666666], [801.0, 961.0], [807.0, 1238.0], [805.0, 657.0], [810.0, 770.5], [809.0, 1450.5], [823.0, 1131.3333333333333], [822.0, 641.3333333333334], [819.0, 681.5], [818.0, 497.0], [850.0, 908.0], [862.0, 437.0], [858.0, 1465.0], [856.0, 1311.0], [839.0, 1460.0], [838.0, 442.0], [837.0, 444.0], [835.0, 457.0], [833.0, 598.6666666666666], [855.0, 393.0], [853.0, 591.6666666666666], [851.0, 650.0], [849.0, 1076.0], [846.0, 1077.5], [844.0, 1069.0], [843.0, 964.5], [842.0, 436.0], [840.0, 450.0], [869.0, 558.8695652173913], [867.0, 430.0], [864.0, 864.5], [1.0, 80824.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[478.2841796874996, 4117.14453125]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 869.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 48.75, "minX": 1.56778896E12, "maxY": 17979.25, "series": [{"data": [[1.56778902E12, 425.4166666666667], [1.56778896E12, 17979.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.56778902E12, 48.75], [1.56778896E12, 1870.05]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56778902E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2243.2702702702704, "minX": 1.56778896E12, "maxY": 78997.15999999999, "series": [{"data": [[1.56778902E12, 78997.15999999999], [1.56778896E12, 2243.2702702702704]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56778902E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2136.432432432432, "minX": 1.56778896E12, "maxY": 78997.11999999998, "series": [{"data": [[1.56778902E12, 78997.11999999998], [1.56778896E12, 2136.432432432432]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56778902E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 889.1841841841837, "minX": 1.56778896E12, "maxY": 1127.7999999999997, "series": [{"data": [[1.56778902E12, 1127.7999999999997], [1.56778896E12, 889.1841841841837]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56778902E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 326.0, "minX": 1.56778896E12, "maxY": 80824.0, "series": [{"data": [[1.56778902E12, 80824.0], [1.56778896E12, 15457.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.56778902E12, 76789.0], [1.56778896E12, 326.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.56778902E12, 80605.8], [1.56778896E12, 4518.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.56778902E12, 80824.0], [1.56778896E12, 7518.7999999999965]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.56778902E12, 80798.5], [1.56778896E12, 5728.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56778902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 881.0, "minX": 1.0, "maxY": 80497.0, "series": [{"data": [[2.0, 76807.5], [146.0, 1725.0], [158.0, 3753.0], [10.0, 79551.0], [3.0, 7293.0], [249.0, 881.0], [1.0, 9384.5], [17.0, 7459.0], [309.0, 1606.0], [5.0, 77752.0], [86.0, 3571.0], [6.0, 80497.0], [27.0, 5896.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[158.0, 3826.0], [86.0, 2448.0], [27.0, 4203.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 309.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 80497.0, "series": [{"data": [[2.0, 76807.5], [146.0, 1725.0], [158.0, 3753.0], [10.0, 79550.5], [3.0, 7293.0], [249.0, 881.0], [1.0, 9384.5], [17.0, 7459.0], [309.0, 1606.0], [5.0, 77752.0], [86.0, 3571.0], [6.0, 80497.0], [27.0, 5896.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[158.0, 0.0], [86.0, 0.0], [27.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 309.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 17.066666666666666, "minX": 1.56778896E12, "maxY": 17.066666666666666, "series": [{"data": [[1.56778896E12, 17.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56778896E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.56778896E12, "maxY": 15.983333333333333, "series": [{"data": [[1.56778902E12, 0.4166666666666667], [1.56778896E12, 15.983333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.56778896E12, 0.6666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56778902E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.56778896E12, "maxY": 15.983333333333333, "series": [{"data": [[1.56778902E12, 0.4166666666666667], [1.56778896E12, 15.983333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.56778896E12, 0.6666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56778902E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.56778896E12, "maxY": 15.983333333333333, "series": [{"data": [[1.56778902E12, 0.4166666666666667], [1.56778896E12, 15.983333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.56778896E12, 0.6666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56778902E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

