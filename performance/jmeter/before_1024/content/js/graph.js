/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 324.0, "minX": 0.0, "maxY": 275636.0, "series": [{"data": [[0.0, 324.0], [0.1, 327.0], [0.2, 328.0], [0.3, 330.0], [0.4, 332.0], [0.5, 334.0], [0.6, 359.0], [0.7, 365.0], [0.8, 386.0], [0.9, 389.0], [1.0, 400.0], [1.1, 404.0], [1.2, 412.0], [1.3, 415.0], [1.4, 434.0], [1.5, 440.0], [1.6, 447.0], [1.7, 448.0], [1.8, 449.0], [1.9, 451.0], [2.0, 455.0], [2.1, 455.0], [2.2, 456.0], [2.3, 456.0], [2.4, 458.0], [2.5, 458.0], [2.6, 458.0], [2.7, 459.0], [2.8, 460.0], [2.9, 461.0], [3.0, 462.0], [3.1, 462.0], [3.2, 463.0], [3.3, 466.0], [3.4, 466.0], [3.5, 469.0], [3.6, 472.0], [3.7, 478.0], [3.8, 479.0], [3.9, 479.0], [4.0, 480.0], [4.1, 481.0], [4.2, 483.0], [4.3, 483.0], [4.4, 487.0], [4.5, 489.0], [4.6, 490.0], [4.7, 491.0], [4.8, 637.0], [4.9, 646.0], [5.0, 649.0], [5.1, 666.0], [5.2, 673.0], [5.3, 694.0], [5.4, 702.0], [5.5, 705.0], [5.6, 706.0], [5.7, 710.0], [5.8, 711.0], [5.9, 713.0], [6.0, 783.0], [6.1, 791.0], [6.2, 804.0], [6.3, 815.0], [6.4, 825.0], [6.5, 829.0], [6.6, 831.0], [6.7, 834.0], [6.8, 841.0], [6.9, 842.0], [7.0, 843.0], [7.1, 845.0], [7.2, 849.0], [7.3, 854.0], [7.4, 859.0], [7.5, 867.0], [7.6, 896.0], [7.7, 897.0], [7.8, 917.0], [7.9, 919.0], [8.0, 922.0], [8.1, 943.0], [8.2, 944.0], [8.3, 957.0], [8.4, 966.0], [8.5, 973.0], [8.6, 974.0], [8.7, 977.0], [8.8, 984.0], [8.9, 985.0], [9.0, 988.0], [9.1, 988.0], [9.2, 992.0], [9.3, 993.0], [9.4, 993.0], [9.5, 993.0], [9.6, 995.0], [9.7, 996.0], [9.8, 999.0], [9.9, 999.0], [10.0, 999.0], [10.1, 1004.0], [10.2, 1007.0], [10.3, 1009.0], [10.4, 1009.0], [10.5, 1010.0], [10.6, 1010.0], [10.7, 1010.0], [10.8, 1011.0], [10.9, 1013.0], [11.0, 1014.0], [11.1, 1015.0], [11.2, 1017.0], [11.3, 1017.0], [11.4, 1021.0], [11.5, 1036.0], [11.6, 1041.0], [11.7, 1047.0], [11.8, 1047.0], [11.9, 1051.0], [12.0, 1052.0], [12.1, 1052.0], [12.2, 1057.0], [12.3, 1060.0], [12.4, 1060.0], [12.5, 1062.0], [12.6, 1063.0], [12.7, 1063.0], [12.8, 1064.0], [12.9, 1067.0], [13.0, 1067.0], [13.1, 1067.0], [13.2, 1068.0], [13.3, 1069.0], [13.4, 1069.0], [13.5, 1069.0], [13.6, 1069.0], [13.7, 1069.0], [13.8, 1077.0], [13.9, 1078.0], [14.0, 1079.0], [14.1, 1080.0], [14.2, 1080.0], [14.3, 1081.0], [14.4, 1082.0], [14.5, 1086.0], [14.6, 1088.0], [14.7, 1089.0], [14.8, 1089.0], [14.9, 1090.0], [15.0, 1091.0], [15.1, 1097.0], [15.2, 1100.0], [15.3, 1125.0], [15.4, 1126.0], [15.5, 1128.0], [15.6, 1129.0], [15.7, 1138.0], [15.8, 1143.0], [15.9, 1152.0], [16.0, 1153.0], [16.1, 1155.0], [16.2, 1155.0], [16.3, 1156.0], [16.4, 1158.0], [16.5, 1160.0], [16.6, 1160.0], [16.7, 1164.0], [16.8, 1166.0], [16.9, 1167.0], [17.0, 1168.0], [17.1, 1168.0], [17.2, 1170.0], [17.3, 1184.0], [17.4, 1188.0], [17.5, 1193.0], [17.6, 1195.0], [17.7, 1205.0], [17.8, 1208.0], [17.9, 1213.0], [18.0, 1218.0], [18.1, 1219.0], [18.2, 1226.0], [18.3, 1233.0], [18.4, 1237.0], [18.5, 1239.0], [18.6, 1240.0], [18.7, 1241.0], [18.8, 1242.0], [18.9, 1246.0], [19.0, 1247.0], [19.1, 1248.0], [19.2, 1249.0], [19.3, 1250.0], [19.4, 1251.0], [19.5, 1251.0], [19.6, 1252.0], [19.7, 1252.0], [19.8, 1253.0], [19.9, 1254.0], [20.0, 1254.0], [20.1, 1255.0], [20.2, 1257.0], [20.3, 1280.0], [20.4, 1299.0], [20.5, 1301.0], [20.6, 1321.0], [20.7, 1321.0], [20.8, 1321.0], [20.9, 1364.0], [21.0, 1385.0], [21.1, 1385.0], [21.2, 1386.0], [21.3, 1389.0], [21.4, 1391.0], [21.5, 1398.0], [21.6, 1406.0], [21.7, 1407.0], [21.8, 1407.0], [21.9, 1411.0], [22.0, 1411.0], [22.1, 1413.0], [22.2, 1429.0], [22.3, 1431.0], [22.4, 1436.0], [22.5, 1439.0], [22.6, 1443.0], [22.7, 1457.0], [22.8, 1458.0], [22.9, 1460.0], [23.0, 1479.0], [23.1, 1486.0], [23.2, 1486.0], [23.3, 1492.0], [23.4, 1496.0], [23.5, 1503.0], [23.6, 1508.0], [23.7, 1514.0], [23.8, 1521.0], [23.9, 1532.0], [24.0, 1532.0], [24.1, 1536.0], [24.2, 1563.0], [24.3, 1570.0], [24.4, 1593.0], [24.5, 1599.0], [24.6, 1613.0], [24.7, 1616.0], [24.8, 1620.0], [24.9, 1624.0], [25.0, 1649.0], [25.1, 1720.0], [25.2, 1759.0], [25.3, 1759.0], [25.4, 1762.0], [25.5, 1764.0], [25.6, 1772.0], [25.7, 1776.0], [25.8, 1792.0], [25.9, 1805.0], [26.0, 1823.0], [26.1, 1839.0], [26.2, 1846.0], [26.3, 1872.0], [26.4, 1875.0], [26.5, 1889.0], [26.6, 1924.0], [26.7, 1924.0], [26.8, 1925.0], [26.9, 1927.0], [27.0, 1933.0], [27.1, 1951.0], [27.2, 1951.0], [27.3, 1957.0], [27.4, 1958.0], [27.5, 1961.0], [27.6, 1983.0], [27.7, 1983.0], [27.8, 2004.0], [27.9, 2005.0], [28.0, 2012.0], [28.1, 2014.0], [28.2, 2034.0], [28.3, 2043.0], [28.4, 2046.0], [28.5, 2053.0], [28.6, 2083.0], [28.7, 2088.0], [28.8, 2089.0], [28.9, 2116.0], [29.0, 2118.0], [29.1, 2118.0], [29.2, 2155.0], [29.3, 2162.0], [29.4, 2172.0], [29.5, 2173.0], [29.6, 2181.0], [29.7, 2199.0], [29.8, 2200.0], [29.9, 2213.0], [30.0, 2218.0], [30.1, 2224.0], [30.2, 2228.0], [30.3, 2233.0], [30.4, 2234.0], [30.5, 2240.0], [30.6, 2244.0], [30.7, 2250.0], [30.8, 2258.0], [30.9, 2270.0], [31.0, 2280.0], [31.1, 2281.0], [31.2, 2284.0], [31.3, 2286.0], [31.4, 2292.0], [31.5, 2296.0], [31.6, 2325.0], [31.7, 2333.0], [31.8, 2366.0], [31.9, 2367.0], [32.0, 2371.0], [32.1, 2376.0], [32.2, 2383.0], [32.3, 2398.0], [32.4, 2407.0], [32.5, 2435.0], [32.6, 2443.0], [32.7, 2449.0], [32.8, 2461.0], [32.9, 2471.0], [33.0, 2473.0], [33.1, 2477.0], [33.2, 2489.0], [33.3, 2494.0], [33.4, 2504.0], [33.5, 2515.0], [33.6, 2519.0], [33.7, 2532.0], [33.8, 2537.0], [33.9, 2542.0], [34.0, 2547.0], [34.1, 2559.0], [34.2, 2611.0], [34.3, 2615.0], [34.4, 2641.0], [34.5, 2650.0], [34.6, 2659.0], [34.7, 2695.0], [34.8, 2736.0], [34.9, 2740.0], [35.0, 2765.0], [35.1, 2769.0], [35.2, 2770.0], [35.3, 2800.0], [35.4, 2823.0], [35.5, 2825.0], [35.6, 2830.0], [35.7, 2842.0], [35.8, 2846.0], [35.9, 2852.0], [36.0, 2896.0], [36.1, 2924.0], [36.2, 2943.0], [36.3, 2945.0], [36.4, 2950.0], [36.5, 2956.0], [36.6, 2968.0], [36.7, 2987.0], [36.8, 2996.0], [36.9, 2998.0], [37.0, 2998.0], [37.1, 3010.0], [37.2, 3013.0], [37.3, 3023.0], [37.4, 3026.0], [37.5, 3076.0], [37.6, 3111.0], [37.7, 3132.0], [37.8, 3169.0], [37.9, 3185.0], [38.0, 3207.0], [38.1, 3211.0], [38.2, 3216.0], [38.3, 3218.0], [38.4, 3226.0], [38.5, 3242.0], [38.6, 3245.0], [38.7, 3258.0], [38.8, 3270.0], [38.9, 3275.0], [39.0, 3281.0], [39.1, 3282.0], [39.2, 3497.0], [39.3, 3548.0], [39.4, 3571.0], [39.5, 3581.0], [39.6, 3672.0], [39.7, 3673.0], [39.8, 3687.0], [39.9, 3689.0], [40.0, 3712.0], [40.1, 3724.0], [40.2, 3972.0], [40.3, 3973.0], [40.4, 3975.0], [40.5, 4045.0], [40.6, 4048.0], [40.7, 4053.0], [40.8, 4057.0], [40.9, 4062.0], [41.0, 4119.0], [41.1, 4130.0], [41.2, 4135.0], [41.3, 4141.0], [41.4, 4143.0], [41.5, 4144.0], [41.6, 4145.0], [41.7, 4148.0], [41.8, 4149.0], [41.9, 4154.0], [42.0, 4154.0], [42.1, 4155.0], [42.2, 4155.0], [42.3, 4156.0], [42.4, 4156.0], [42.5, 4159.0], [42.6, 4159.0], [42.7, 4162.0], [42.8, 4162.0], [42.9, 4163.0], [43.0, 4164.0], [43.1, 4164.0], [43.2, 4166.0], [43.3, 4166.0], [43.4, 4172.0], [43.5, 4176.0], [43.6, 4177.0], [43.7, 4286.0], [43.8, 4288.0], [43.9, 4294.0], [44.0, 4311.0], [44.1, 4316.0], [44.2, 4344.0], [44.3, 4523.0], [44.4, 4530.0], [44.5, 4534.0], [44.6, 4743.0], [44.7, 4745.0], [44.8, 4745.0], [44.9, 4745.0], [45.0, 4748.0], [45.1, 4749.0], [45.2, 4751.0], [45.3, 4759.0], [45.4, 4764.0], [45.5, 4766.0], [45.6, 4766.0], [45.7, 4767.0], [45.8, 4767.0], [45.9, 4771.0], [46.0, 4773.0], [46.1, 4775.0], [46.2, 4775.0], [46.3, 4776.0], [46.4, 4776.0], [46.5, 4781.0], [46.6, 4782.0], [46.7, 4791.0], [46.8, 4795.0], [46.9, 4796.0], [47.0, 4799.0], [47.1, 4804.0], [47.2, 4813.0], [47.3, 4829.0], [47.4, 4840.0], [47.5, 4851.0], [47.6, 4864.0], [47.7, 4864.0], [47.8, 4867.0], [47.9, 4867.0], [48.0, 4867.0], [48.1, 4868.0], [48.2, 4869.0], [48.3, 4869.0], [48.4, 4871.0], [48.5, 4871.0], [48.6, 4871.0], [48.7, 4871.0], [48.8, 4872.0], [48.9, 4872.0], [49.0, 4872.0], [49.1, 4873.0], [49.2, 4875.0], [49.3, 4876.0], [49.4, 4876.0], [49.5, 4877.0], [49.6, 4877.0], [49.7, 4879.0], [49.8, 4880.0], [49.9, 4882.0], [50.0, 4885.0], [50.1, 4885.0], [50.2, 4885.0], [50.3, 4890.0], [50.4, 4896.0], [50.5, 4898.0], [50.6, 4898.0], [50.7, 4899.0], [50.8, 4903.0], [50.9, 4903.0], [51.0, 4904.0], [51.1, 4904.0], [51.2, 4904.0], [51.3, 4906.0], [51.4, 4906.0], [51.5, 4906.0], [51.6, 4908.0], [51.7, 4909.0], [51.8, 4911.0], [51.9, 4912.0], [52.0, 4913.0], [52.1, 4913.0], [52.2, 4914.0], [52.3, 4914.0], [52.4, 4915.0], [52.5, 4915.0], [52.6, 4917.0], [52.7, 4918.0], [52.8, 4921.0], [52.9, 4921.0], [53.0, 4922.0], [53.1, 4922.0], [53.2, 4923.0], [53.3, 4924.0], [53.4, 4924.0], [53.5, 4925.0], [53.6, 4925.0], [53.7, 4928.0], [53.8, 4928.0], [53.9, 4931.0], [54.0, 4931.0], [54.1, 4931.0], [54.2, 4932.0], [54.3, 4933.0], [54.4, 4933.0], [54.5, 4934.0], [54.6, 4935.0], [54.7, 4936.0], [54.8, 4936.0], [54.9, 4936.0], [55.0, 4936.0], [55.1, 4936.0], [55.2, 4936.0], [55.3, 4937.0], [55.4, 4937.0], [55.5, 4938.0], [55.6, 4939.0], [55.7, 4940.0], [55.8, 4940.0], [55.9, 4940.0], [56.0, 4940.0], [56.1, 4940.0], [56.2, 4940.0], [56.3, 4941.0], [56.4, 4942.0], [56.5, 4942.0], [56.6, 4942.0], [56.7, 4942.0], [56.8, 4942.0], [56.9, 4942.0], [57.0, 4943.0], [57.1, 4943.0], [57.2, 4943.0], [57.3, 4944.0], [57.4, 4945.0], [57.5, 4945.0], [57.6, 4945.0], [57.7, 4946.0], [57.8, 4946.0], [57.9, 4946.0], [58.0, 4947.0], [58.1, 4948.0], [58.2, 4948.0], [58.3, 4948.0], [58.4, 4949.0], [58.5, 4949.0], [58.6, 4950.0], [58.7, 4951.0], [58.8, 4951.0], [58.9, 4953.0], [59.0, 4954.0], [59.1, 4954.0], [59.2, 4956.0], [59.3, 4956.0], [59.4, 4956.0], [59.5, 4957.0], [59.6, 4957.0], [59.7, 4958.0], [59.8, 4958.0], [59.9, 4959.0], [60.0, 4959.0], [60.1, 4960.0], [60.2, 4960.0], [60.3, 4961.0], [60.4, 4962.0], [60.5, 4964.0], [60.6, 4966.0], [60.7, 4966.0], [60.8, 4967.0], [60.9, 4970.0], [61.0, 4970.0], [61.1, 4974.0], [61.2, 4974.0], [61.3, 4981.0], [61.4, 4985.0], [61.5, 4988.0], [61.6, 4989.0], [61.7, 4991.0], [61.8, 4991.0], [61.9, 4994.0], [62.0, 4995.0], [62.1, 4996.0], [62.2, 4997.0], [62.3, 4998.0], [62.4, 4999.0], [62.5, 5000.0], [62.6, 5002.0], [62.7, 5003.0], [62.8, 5005.0], [62.9, 5007.0], [63.0, 5009.0], [63.1, 5010.0], [63.2, 5011.0], [63.3, 5012.0], [63.4, 5014.0], [63.5, 5014.0], [63.6, 5016.0], [63.7, 5016.0], [63.8, 5017.0], [63.9, 5017.0], [64.0, 5017.0], [64.1, 5018.0], [64.2, 5018.0], [64.3, 5019.0], [64.4, 5019.0], [64.5, 5019.0], [64.6, 5019.0], [64.7, 5020.0], [64.8, 5020.0], [64.9, 5021.0], [65.0, 5021.0], [65.1, 5021.0], [65.2, 5021.0], [65.3, 5021.0], [65.4, 5022.0], [65.5, 5022.0], [65.6, 5022.0], [65.7, 5022.0], [65.8, 5022.0], [65.9, 5022.0], [66.0, 5023.0], [66.1, 5023.0], [66.2, 5023.0], [66.3, 5023.0], [66.4, 5023.0], [66.5, 5024.0], [66.6, 5024.0], [66.7, 5024.0], [66.8, 5024.0], [66.9, 5025.0], [67.0, 5025.0], [67.1, 5025.0], [67.2, 5026.0], [67.3, 5026.0], [67.4, 5027.0], [67.5, 5027.0], [67.6, 5028.0], [67.7, 5028.0], [67.8, 5028.0], [67.9, 5028.0], [68.0, 5029.0], [68.1, 5029.0], [68.2, 5029.0], [68.3, 5029.0], [68.4, 5030.0], [68.5, 5031.0], [68.6, 5031.0], [68.7, 5031.0], [68.8, 5032.0], [68.9, 5034.0], [69.0, 5034.0], [69.1, 5034.0], [69.2, 5036.0], [69.3, 5036.0], [69.4, 5036.0], [69.5, 5036.0], [69.6, 5038.0], [69.7, 5038.0], [69.8, 5039.0], [69.9, 5039.0], [70.0, 5039.0], [70.1, 5039.0], [70.2, 5040.0], [70.3, 5041.0], [70.4, 5041.0], [70.5, 5042.0], [70.6, 5042.0], [70.7, 5042.0], [70.8, 5044.0], [70.9, 5045.0], [71.0, 5046.0], [71.1, 5048.0], [71.2, 5049.0], [71.3, 5049.0], [71.4, 5050.0], [71.5, 5050.0], [71.6, 5050.0], [71.7, 5051.0], [71.8, 5051.0], [71.9, 5052.0], [72.0, 5053.0], [72.1, 5056.0], [72.2, 5058.0], [72.3, 5060.0], [72.4, 5060.0], [72.5, 5061.0], [72.6, 5063.0], [72.7, 5064.0], [72.8, 5065.0], [72.9, 5070.0], [73.0, 5071.0], [73.1, 5075.0], [73.2, 5077.0], [73.3, 5079.0], [73.4, 5079.0], [73.5, 5080.0], [73.6, 5082.0], [73.7, 5082.0], [73.8, 5084.0], [73.9, 5084.0], [74.0, 5084.0], [74.1, 5084.0], [74.2, 5085.0], [74.3, 5086.0], [74.4, 5087.0], [74.5, 5087.0], [74.6, 5088.0], [74.7, 5089.0], [74.8, 5089.0], [74.9, 5092.0], [75.0, 5093.0], [75.1, 5094.0], [75.2, 5096.0], [75.3, 5096.0], [75.4, 5098.0], [75.5, 5099.0], [75.6, 5100.0], [75.7, 5100.0], [75.8, 5100.0], [75.9, 5101.0], [76.0, 5102.0], [76.1, 5102.0], [76.2, 5102.0], [76.3, 5103.0], [76.4, 5105.0], [76.5, 5109.0], [76.6, 5110.0], [76.7, 5112.0], [76.8, 5113.0], [76.9, 5114.0], [77.0, 5115.0], [77.1, 5116.0], [77.2, 5117.0], [77.3, 5118.0], [77.4, 5119.0], [77.5, 5126.0], [77.6, 5127.0], [77.7, 5129.0], [77.8, 5131.0], [77.9, 5131.0], [78.0, 5131.0], [78.1, 5131.0], [78.2, 5132.0], [78.3, 5135.0], [78.4, 5135.0], [78.5, 5136.0], [78.6, 5137.0], [78.7, 5137.0], [78.8, 5140.0], [78.9, 5140.0], [79.0, 5140.0], [79.1, 5140.0], [79.2, 5141.0], [79.3, 5141.0], [79.4, 5143.0], [79.5, 5144.0], [79.6, 5146.0], [79.7, 5146.0], [79.8, 5148.0], [79.9, 5150.0], [80.0, 5151.0], [80.1, 5151.0], [80.2, 5151.0], [80.3, 5151.0], [80.4, 5152.0], [80.5, 5153.0], [80.6, 5154.0], [80.7, 5159.0], [80.8, 5200.0], [80.9, 5201.0], [81.0, 5204.0], [81.1, 5208.0], [81.2, 5212.0], [81.3, 5216.0], [81.4, 5219.0], [81.5, 5219.0], [81.6, 5222.0], [81.7, 5237.0], [81.8, 5239.0], [81.9, 5241.0], [82.0, 5242.0], [82.1, 5245.0], [82.2, 5250.0], [82.3, 5269.0], [82.4, 5274.0], [82.5, 5290.0], [82.6, 5290.0], [82.7, 5291.0], [82.8, 5312.0], [82.9, 5312.0], [83.0, 5319.0], [83.1, 5320.0], [83.2, 5320.0], [83.3, 5320.0], [83.4, 5328.0], [83.5, 5329.0], [83.6, 5329.0], [83.7, 5335.0], [83.8, 5343.0], [83.9, 5351.0], [84.0, 5353.0], [84.1, 5357.0], [84.2, 5387.0], [84.3, 5391.0], [84.4, 5393.0], [84.5, 5398.0], [84.6, 5399.0], [84.7, 5401.0], [84.8, 5404.0], [84.9, 5405.0], [85.0, 5406.0], [85.1, 5409.0], [85.2, 5413.0], [85.3, 5418.0], [85.4, 5429.0], [85.5, 5432.0], [85.6, 5440.0], [85.7, 5445.0], [85.8, 5447.0], [85.9, 5458.0], [86.0, 5458.0], [86.1, 5464.0], [86.2, 5465.0], [86.3, 5466.0], [86.4, 5469.0], [86.5, 5469.0], [86.6, 5470.0], [86.7, 5470.0], [86.8, 5475.0], [86.9, 5475.0], [87.0, 5475.0], [87.1, 5478.0], [87.2, 5480.0], [87.3, 5481.0], [87.4, 5482.0], [87.5, 5512.0], [87.6, 5513.0], [87.7, 5521.0], [87.8, 5521.0], [87.9, 5523.0], [88.0, 5524.0], [88.1, 5525.0], [88.2, 5531.0], [88.3, 5534.0], [88.4, 5542.0], [88.5, 5548.0], [88.6, 5549.0], [88.7, 5550.0], [88.8, 5557.0], [88.9, 5562.0], [89.0, 5564.0], [89.1, 5566.0], [89.2, 5569.0], [89.3, 5578.0], [89.4, 5579.0], [89.5, 5602.0], [89.6, 5603.0], [89.7, 5609.0], [89.8, 5616.0], [89.9, 5617.0], [90.0, 5617.0], [90.1, 5621.0], [90.2, 5623.0], [90.3, 5625.0], [90.4, 5625.0], [90.5, 5636.0], [90.6, 5638.0], [90.7, 5638.0], [90.8, 5639.0], [90.9, 5639.0], [91.0, 5643.0], [91.1, 5646.0], [91.2, 5646.0], [91.3, 5647.0], [91.4, 5648.0], [91.5, 5658.0], [91.6, 5659.0], [91.7, 5662.0], [91.8, 5699.0], [91.9, 5704.0], [92.0, 5717.0], [92.1, 5719.0], [92.2, 5719.0], [92.3, 5720.0], [92.4, 5722.0], [92.5, 5724.0], [92.6, 5726.0], [92.7, 5728.0], [92.8, 5729.0], [92.9, 5731.0], [93.0, 5742.0], [93.1, 5743.0], [93.2, 5746.0], [93.3, 5748.0], [93.4, 5752.0], [93.5, 5895.0], [93.6, 5898.0], [93.7, 5898.0], [93.8, 5962.0], [93.9, 5969.0], [94.0, 6245.0], [94.1, 6302.0], [94.2, 6311.0], [94.3, 6325.0], [94.4, 6326.0], [94.5, 6327.0], [94.6, 6328.0], [94.7, 6329.0], [94.8, 6331.0], [94.9, 6331.0], [95.0, 6355.0], [95.1, 6367.0], [95.2, 6370.0], [95.3, 6397.0], [95.4, 6403.0], [95.5, 6406.0], [95.6, 6439.0], [95.7, 6466.0], [95.8, 6467.0], [95.9, 6645.0], [96.0, 6732.0], [96.1, 6733.0], [96.2, 6734.0], [96.3, 6751.0], [96.4, 7991.0], [96.5, 8159.0], [96.6, 11132.0], [96.7, 11682.0], [96.8, 72474.0], [96.9, 72612.0], [97.0, 72616.0], [97.1, 72624.0], [97.2, 72632.0], [97.3, 72634.0], [97.4, 72641.0], [97.5, 72671.0], [97.6, 72719.0], [97.7, 72719.0], [97.8, 72748.0], [97.9, 72762.0], [98.0, 72873.0], [98.1, 72985.0], [98.2, 73052.0], [98.3, 73112.0], [98.4, 73193.0], [98.5, 73294.0], [98.6, 73296.0], [98.7, 73300.0], [98.8, 73551.0], [98.9, 73562.0], [99.0, 73564.0], [99.1, 73565.0], [99.2, 73603.0], [99.3, 73620.0], [99.4, 73649.0], [99.5, 73652.0], [99.6, 73727.0], [99.7, 73751.0], [99.8, 263067.0], [99.9, 275621.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 134.0, "series": [{"data": [[600.0, 6.0], [700.0, 8.0], [800.0, 16.0], [900.0, 24.0], [1000.0, 52.0], [1100.0, 26.0], [1200.0, 28.0], [1300.0, 12.0], [1400.0, 19.0], [1500.0, 11.0], [1600.0, 6.0], [1700.0, 8.0], [1800.0, 7.0], [1900.0, 12.0], [2000.0, 11.0], [2100.0, 10.0], [2200.0, 18.0], [2300.0, 8.0], [2400.0, 11.0], [2500.0, 8.0], [2600.0, 6.0], [2800.0, 8.0], [2700.0, 5.0], [2900.0, 10.0], [3000.0, 6.0], [3100.0, 4.0], [3200.0, 12.0], [3400.0, 1.0], [3500.0, 3.0], [3600.0, 4.0], [3700.0, 2.0], [3900.0, 3.0], [4000.0, 5.0], [4100.0, 28.0], [4200.0, 3.0], [4300.0, 3.0], [4500.0, 3.0], [72700.0, 4.0], [72900.0, 1.0], [73100.0, 2.0], [73300.0, 1.0], [73500.0, 4.0], [73700.0, 2.0], [4800.0, 38.0], [4700.0, 26.0], [5100.0, 53.0], [4900.0, 120.0], [5000.0, 134.0], [5300.0, 20.0], [5200.0, 20.0], [5400.0, 28.0], [5500.0, 21.0], [5600.0, 25.0], [5700.0, 16.0], [5800.0, 3.0], [5900.0, 2.0], [6200.0, 1.0], [6300.0, 13.0], [6400.0, 5.0], [6600.0, 2.0], [6700.0, 4.0], [7900.0, 1.0], [8100.0, 1.0], [11100.0, 1.0], [11600.0, 1.0], [275600.0, 2.0], [263000.0, 1.0], [72400.0, 1.0], [72600.0, 7.0], [72800.0, 1.0], [73000.0, 1.0], [73200.0, 2.0], [73600.0, 4.0], [300.0, 10.0], [400.0, 39.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 275600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 48.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 736.0, "series": [{"data": [[0.0, 49.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 191.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 736.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 48.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.5677886E12, "maxY": 393.48133198789077, "series": [{"data": [[1.56778866E12, 18.73333333333333], [1.56778884E12, 2.0], [1.5677886E12, 393.48133198789077]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56778884E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 455.0, "minX": 1.0, "maxY": 275636.0, "series": [{"data": [[2.0, 275621.0], [3.0, 263067.0], [4.0, 73751.0], [5.0, 73727.0], [6.0, 73649.0], [7.0, 73652.0], [9.0, 73611.5], [11.0, 73562.0], [12.0, 73551.0], [13.0, 73564.5], [16.0, 73296.66666666667], [17.0, 73193.0], [18.0, 73112.0], [19.0, 73052.0], [20.0, 72985.0], [21.0, 72873.0], [22.0, 72748.0], [23.0, 72719.0], [24.0, 72719.0], [25.0, 72671.0], [26.0, 72762.0], [27.0, 72641.0], [28.0, 72632.0], [29.0, 72634.0], [30.0, 72612.0], [31.0, 72624.0], [33.0, 72474.0], [32.0, 72616.0], [35.0, 11132.0], [34.0, 11682.0], [37.0, 7991.0], [36.0, 8159.0], [39.0, 6734.0], [38.0, 6751.0], [41.0, 6406.0], [40.0, 6733.0], [43.0, 6732.0], [42.0, 6403.0], [45.0, 6311.0], [44.0, 6397.0], [47.0, 6328.0], [46.0, 6302.0], [49.0, 6328.0], [51.0, 6331.0], [50.0, 6329.0], [53.0, 6326.5], [55.0, 6367.0], [54.0, 6370.0], [57.0, 6245.0], [56.0, 6355.0], [59.0, 5699.0], [58.0, 5704.0], [61.0, 5658.0], [60.0, 5662.0], [63.0, 5659.0], [62.0, 5647.0], [67.0, 5623.0], [66.0, 5636.0], [65.0, 5646.0], [64.0, 5643.0], [71.0, 5569.0], [70.0, 5579.0], [69.0, 5603.0], [68.0, 5621.0], [75.0, 5549.0], [74.0, 5550.0], [73.0, 5557.0], [72.0, 5562.0], [79.0, 5531.0], [78.0, 5534.0], [77.0, 5542.0], [76.0, 5548.0], [83.0, 5480.0], [82.0, 5505.0], [81.0, 5513.0], [80.0, 5512.0], [87.0, 5458.0], [86.0, 5465.0], [85.0, 5469.0], [84.0, 5464.0], [91.0, 5440.0], [90.0, 5445.0], [89.0, 5447.0], [88.0, 5458.0], [95.0, 5413.0], [94.0, 5418.0], [93.0, 5429.0], [92.0, 5432.0], [99.0, 5393.0], [98.0, 5398.0], [97.0, 5406.0], [96.0, 5405.0], [100.0, 5387.0], [106.0, 5328.5], [104.0, 6032.5], [111.0, 5375.0], [108.0, 5364.5], [115.0, 5312.0], [114.0, 5399.0], [113.0, 5319.5], [119.0, 5351.0], [118.0, 5290.0], [117.0, 5290.5], [123.0, 5353.0], [122.0, 5315.5], [120.0, 5269.0], [127.0, 5325.0], [126.0, 5332.0], [124.0, 5343.0], [135.0, 5222.0], [134.0, 5208.0], [133.0, 5239.0], [132.0, 5250.0], [131.0, 5241.5], [130.0, 5245.0], [128.0, 5312.0], [142.0, 5204.0], [141.0, 5200.0], [140.0, 5201.0], [139.0, 5212.0], [138.0, 5219.0], [137.0, 5216.0], [136.0, 5219.0], [150.0, 5448.5], [148.0, 5159.0], [147.0, 5141.0], [146.0, 5136.0], [145.0, 5149.0], [159.0, 5129.0], [158.0, 5142.5], [157.0, 5140.0], [156.0, 5446.5], [154.0, 5146.0], [153.0, 5148.0], [166.0, 5131.0], [164.0, 5135.0], [163.0, 5729.5], [161.0, 5139.0], [175.0, 5719.0], [174.0, 5117.0], [173.0, 5748.0], [172.0, 5752.0], [169.0, 5130.0], [168.0, 5719.0], [180.0, 5577.5], [179.0, 5729.0], [177.0, 5726.0], [176.0, 5720.0], [189.0, 5105.0], [188.0, 5099.0], [187.0, 5102.0], [185.0, 5265.4], [197.0, 5093.0], [196.0, 5089.0], [194.0, 5205.75], [207.0, 5131.5], [205.0, 5112.666666666667], [201.0, 5088.0], [202.0, 5114.0], [215.0, 5098.0], [213.0, 5078.666666666667], [210.0, 5088.0], [209.0, 5122.6], [222.0, 5113.0], [220.0, 5109.0], [219.0, 5080.333333333333], [217.0, 5079.0], [216.0, 5089.0], [230.0, 5092.0], [228.0, 5095.0], [224.0, 5276.0], [239.0, 5647.0], [236.0, 6133.333333333333], [234.0, 5102.0], [233.0, 5100.0], [232.0, 5085.0], [246.0, 5617.0], [243.0, 5627.0], [252.0, 5748.666666666667], [249.0, 5565.25], [270.0, 5027.071428571429], [269.0, 5025.0], [259.0, 5566.0], [257.0, 5564.0], [284.0, 5035.5], [279.0, 3148.75], [281.0, 2600.333333333333], [280.0, 5034.0], [277.0, 3814.3333333333335], [276.0, 1126.0], [275.0, 3814.6666666666665], [274.0, 5024.5], [272.0, 5021.5], [287.0, 5042.5], [286.0, 5040.0], [282.0, 5023.0], [288.0, 2219.25], [303.0, 2468.333333333333], [296.0, 2265.25], [299.0, 5017.0], [298.0, 5045.0], [290.0, 3233.75], [292.0, 1440.0], [291.0, 2289.75], [301.0, 5022.0], [300.0, 5020.0], [289.0, 1398.0], [293.0, 2844.2], [294.0, 3245.5], [295.0, 2262.0], [306.0, 1277.5], [309.0, 3714.0], [308.0, 3043.5], [307.0, 3175.75], [305.0, 1282.0], [311.0, 5027.0], [304.0, 5031.0], [319.0, 5029.0], [312.0, 5028.0], [318.0, 5032.0], [317.0, 5022.0], [316.0, 5026.5], [323.0, 1380.5], [325.0, 1051.0], [324.0, 4300.6], [322.0, 3249.5], [326.0, 5044.0], [335.0, 5053.666666666667], [332.0, 5052.0], [331.0, 5036.0], [330.0, 5049.5], [328.0, 5057.0], [350.0, 2465.333333333333], [351.0, 584.0], [349.0, 762.1111111111111], [348.0, 1635.8000000000002], [347.0, 646.0], [346.0, 4999.0], [345.0, 5016.0], [344.0, 5021.0], [343.0, 5016.5], [339.0, 5521.0], [338.0, 5523.0], [336.0, 5056.0], [341.0, 5014.0], [355.0, 634.4285714285714], [367.0, 1878.25], [361.0, 5017.0], [360.0, 5478.0], [363.0, 5031.0], [362.0, 5036.0], [366.0, 1880.0], [364.0, 882.5], [365.0, 5014.0], [356.0, 982.875], [358.0, 455.0], [357.0, 4981.0], [354.0, 767.3333333333334], [353.0, 2033.142857142857], [352.0, 1808.3636363636363], [359.0, 3121.25], [382.0, 1017.0], [372.0, 1559.75], [383.0, 2178.0], [381.0, 2726.5], [380.0, 2718.25], [378.0, 3304.2], [377.0, 765.5], [375.0, 2181.333333333333], [369.0, 2901.0], [371.0, 2750.0], [370.0, 2759.0], [376.0, 2741.0], [374.0, 681.3333333333334], [373.0, 2744.0], [396.0, 2402.1666666666665], [387.0, 2282.666666666667], [386.0, 2575.2], [385.0, 2064.0], [384.0, 1925.0], [391.0, 2817.75], [390.0, 723.0], [389.0, 3003.0], [388.0, 2184.666666666667], [398.0, 3707.6666666666665], [394.0, 1893.5], [393.0, 1374.3000000000002], [392.0, 1509.8333333333335], [399.0, 1066.0], [413.0, 1084.5], [414.0, 1067.5454545454545], [412.0, 1193.0], [411.0, 1679.8333333333333], [400.0, 2621.0], [409.0, 4952.666666666667], [406.0, 4938.5], [404.0, 4937.5], [402.0, 4942.0], [417.0, 1003.375], [416.0, 710.0], [430.0, 4945.0], [429.0, 4937.5], [427.0, 4935.5], [425.0, 4932.999999999999], [424.0, 4936.0], [435.0, 4946.0], [446.0, 4914.0], [447.0, 4899.0], [444.0, 4907.333333333333], [434.0, 4943.0], [433.0, 4966.0], [432.0, 4939.333333333333], [442.0, 4909.0], [441.0, 4890.0], [439.0, 4885.0], [438.0, 4958.0], [437.0, 4942.0], [436.0, 4938.0], [462.0, 4876.0], [463.0, 4875.0], [461.0, 4879.0], [451.0, 4918.0], [449.0, 4909.5], [459.0, 4885.0], [458.0, 4898.0], [457.0, 4905.0], [456.0, 4913.0], [455.0, 4903.0], [454.0, 4909.0], [467.0, 4884.0], [478.0, 4872.0], [476.0, 4867.0], [466.0, 4873.0], [465.0, 4877.0], [464.0, 4872.0], [475.0, 4868.0], [474.0, 4868.0], [472.0, 4869.0], [471.0, 4871.0], [470.0, 4880.0], [469.0, 4885.0], [468.0, 4879.0], [483.0, 4871.0], [495.0, 4961.0], [492.0, 4989.5], [490.0, 4974.0], [489.0, 5391.0], [488.0, 4985.0], [487.0, 4994.5], [486.0, 4989.0], [485.0, 4991.0], [482.0, 4869.0], [481.0, 4869.0], [480.0, 4871.0], [510.0, 1443.0], [511.0, 3188.0], [508.0, 4942.0], [499.0, 4958.5], [498.0, 4966.0], [497.0, 4961.0], [507.0, 4948.0], [506.0, 4947.0], [505.0, 4956.0], [504.0, 4956.0], [503.0, 4967.0], [502.0, 4970.0], [501.0, 4970.0], [539.0, 1521.0], [526.0, 1759.0], [525.0, 1362.6666666666667], [527.0, 1759.0], [515.0, 4942.0], [513.0, 4942.0], [524.0, 867.0], [535.0, 1805.0], [532.0, 4912.999999999999], [538.0, 1647.0], [516.0, 4929.6], [541.0, 1536.0], [542.0, 1776.0], [548.0, 3498.5], [545.0, 1839.0], [551.0, 4361.714285714285], [549.0, 4796.0], [552.0, 4422.222222222223], [554.0, 4150.9], [555.0, 2966.8], [557.0, 4864.0], [556.0, 4745.0], [559.0, 4845.5], [553.0, 3709.6666666666665], [568.0, 1771.5], [567.0, 3501.3333333333335], [565.0, 4311.0], [564.0, 4316.0], [563.0, 4288.0], [562.0, 4344.0], [561.0, 5525.0], [560.0, 4829.0], [575.0, 1823.0], [574.0, 4177.0], [573.0, 5131.0], [572.0, 5307.5], [570.0, 5143.0], [569.0, 5140.0], [606.0, 4048.6666666666665], [588.0, 2343.75], [587.0, 4148.5], [586.0, 4155.0], [584.0, 4146.0], [607.0, 3973.0], [593.0, 4135.0], [595.0, 4162.0], [594.0, 4151.666666666667], [604.0, 4057.0], [602.0, 4062.0], [601.0, 4142.0], [583.0, 4154.0], [582.0, 4165.0], [580.0, 4163.0], [578.0, 4166.0], [577.0, 4163.0], [576.0, 4174.0], [590.0, 4137.0], [599.0, 4159.0], [598.0, 4155.0], [597.0, 4159.0], [596.0, 4156.0], [636.0, 2367.0], [612.0, 2858.0], [613.0, 2704.5], [614.0, 3687.0], [633.0, 2494.0], [632.0, 2547.0], [635.0, 3242.0], [634.0, 2371.0], [611.0, 2554.0], [610.0, 4872.0], [609.0, 2992.0], [608.0, 2994.5], [623.0, 4523.0], [622.0, 4530.0], [621.0, 4534.0], [620.0, 3497.0], [619.0, 3548.0], [618.0, 3571.0], [617.0, 3581.0], [616.0, 3672.5], [639.0, 3216.0], [625.0, 3282.0], [624.0, 3281.0], [627.0, 3275.0], [626.0, 3270.0], [629.0, 3218.0], [628.0, 3245.0], [631.0, 3111.0], [630.0, 3132.0], [638.0, 2366.0], [637.0, 3258.0], [664.0, 2996.0], [668.0, 2118.0], [671.0, 3026.0], [657.0, 2616.5], [660.0, 2580.0], [658.0, 2998.0], [670.0, 2083.0], [669.0, 2089.0], [667.0, 2950.0], [666.0, 2924.0], [665.0, 2118.0], [655.0, 3013.0], [641.0, 2325.0], [640.0, 3226.0], [643.0, 3211.0], [642.0, 2333.0], [645.0, 2286.0], [644.0, 3185.0], [647.0, 2280.0], [646.0, 3207.0], [654.0, 3023.0], [653.0, 3076.0], [652.0, 2213.0], [651.0, 2218.0], [650.0, 2228.0], [649.0, 2240.0], [648.0, 3169.0], [663.0, 2129.0], [662.0, 2177.0], [700.0, 2659.0], [696.0, 1998.0], [687.0, 2825.0], [673.0, 2769.0], [672.0, 3010.0], [675.0, 2968.0], [674.0, 2987.0], [677.0, 2945.0], [676.0, 2736.0], [679.0, 2956.0], [678.0, 2943.0], [686.0, 2896.0], [685.0, 2770.0], [684.0, 2823.0], [683.0, 2842.0], [682.0, 2852.0], [681.0, 2846.0], [680.0, 2765.0], [703.0, 2443.0], [689.0, 2830.0], [688.0, 2519.0], [691.0, 2740.0], [690.0, 2477.0], [693.0, 2532.0], [692.0, 2537.0], [702.0, 2650.0], [701.0, 2461.0], [699.0, 2611.0], [698.0, 2489.0], [697.0, 2695.0], [695.0, 2641.0], [694.0, 2800.0], [732.0, 1411.0], [715.0, 2374.5], [717.0, 2504.0], [716.0, 2181.0], [719.0, 1532.0], [705.0, 2559.0], [704.0, 2449.0], [707.0, 2542.0], [706.0, 2615.0], [709.0, 2250.0], [708.0, 2471.0], [711.0, 1620.0], [710.0, 1624.0], [718.0, 2494.0], [729.0, 2046.0], [728.0, 2376.0], [714.0, 2062.5], [713.0, 2210.0], [712.0, 1613.0], [735.0, 2116.0], [721.0, 2244.0], [720.0, 2258.0], [723.0, 2088.0], [722.0, 2435.0], [725.0, 2398.0], [724.0, 2407.0], [727.0, 2053.0], [726.0, 2383.0], [734.0, 2173.0], [733.0, 1406.0], [731.0, 2043.0], [730.0, 2034.0], [738.0, 2068.0], [741.0, 2167.3333333333335], [742.0, 1662.5], [740.0, 2284.0], [739.0, 2292.0], [737.0, 1983.0], [736.0, 1983.0], [1.0, 275636.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[381.3554687499997, 6480.258789062503]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 742.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.5677886E12, "maxY": 18127.85, "series": [{"data": [[1.56778866E12, 516.5], [1.56778884E12, 128.2], [1.5677886E12, 18127.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.56778866E12, 63.0], [1.56778884E12, 0.0], [1.5677886E12, 1986.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56778884E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3661.210898082746, "minX": 1.5677886E12, "maxY": 271441.3333333333, "series": [{"data": [[1.56778866E12, 73106.7], [1.56778884E12, 271441.3333333333], [1.5677886E12, 3661.210898082746]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56778884E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.5677886E12, "maxY": 73106.66666666666, "series": [{"data": [[1.56778866E12, 73106.66666666666], [1.56778884E12, 0.0], [1.5677886E12, 3405.598385469224]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56778884E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1814.022199798186, "minX": 1.5677886E12, "maxY": 4236.333333333333, "series": [{"data": [[1.56778866E12, 3168.7], [1.56778884E12, 4236.333333333333], [1.5677886E12, 1814.022199798186]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56778884E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 324.0, "minX": 1.5677886E12, "maxY": 73751.0, "series": [{"data": [[1.56778866E12, 73751.0], [1.5677886E12, 11682.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.56778866E12, 72474.0], [1.5677886E12, 324.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.56778866E12, 73651.7], [1.5677886E12, 5441.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.56778866E12, 73751.0], [1.5677886E12, 6404.59]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.56778866E12, 73737.8], [1.5677886E12, 5632.15]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56778866E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 988.0, "minX": 1.0, "maxY": 275621.0, "series": [{"data": [[134.0, 5398.5], [1.0, 11407.0], [9.0, 6406.0], [165.0, 988.0], [20.0, 72733.5], [10.0, 73611.5], [43.0, 4166.0], [22.0, 2520.5], [376.0, 5019.0], [96.0, 2455.0], [112.0, 1407.0], [30.0, 3718.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[134.0, 6328.5], [2.0, 8075.0], [1.0, 275621.0], [9.0, 6565.0], [376.0, 4951.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 376.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 73611.5, "series": [{"data": [[134.0, 5398.5], [1.0, 11407.0], [9.0, 6406.0], [165.0, 988.0], [20.0, 72733.5], [10.0, 73611.5], [43.0, 4166.0], [22.0, 2520.0], [376.0, 5019.0], [96.0, 2454.5], [112.0, 1402.5], [30.0, 3718.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[134.0, 0.0], [2.0, 0.0], [1.0, 0.0], [9.0, 0.0], [376.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 376.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 17.066666666666666, "minX": 1.5677886E12, "maxY": 17.066666666666666, "series": [{"data": [[1.5677886E12, 17.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5677886E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.5677886E12, "maxY": 15.766666666666667, "series": [{"data": [[1.56778866E12, 0.5], [1.5677886E12, 15.766666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.56778884E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketTimeoutException", "isController": false}, {"data": [[1.5677886E12, 0.75]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56778884E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.5677886E12, "maxY": 15.766666666666667, "series": [{"data": [[1.56778866E12, 0.5], [1.5677886E12, 15.766666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.56778884E12, 0.05], [1.5677886E12, 0.75]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56778884E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.5677886E12, "maxY": 15.766666666666667, "series": [{"data": [[1.56778866E12, 0.5], [1.5677886E12, 15.766666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.56778884E12, 0.05], [1.5677886E12, 0.75]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56778884E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

